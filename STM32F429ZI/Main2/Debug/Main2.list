
Main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08006d90  08006d90  00016d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de4  08006de4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dec  08006dec  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000a00  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a18  20000a18  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014e27  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026a1  00000000  00000000  00034eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001240  00000000  00000000  00037558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e54  00000000  00000000  00038798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024d6d  00000000  00000000  000395ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000138de  00000000  00000000  0005e359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2dee  00000000  00000000  00071c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f44  00000000  00000000  00154a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0015996c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006d78 	.word	0x08006d78

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08006d78 	.word	0x08006d78

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <Encoder_Start>:
	TIM_HandleTypeDef *htim;
	int8_t elapse;
}Encoder;

void Encoder_Start(Encoder* enc, TIM_HandleTypeDef *_htim)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	enc->htim = _htim;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	683a      	ldr	r2, [r7, #0]
 8000506:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(enc->htim);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4618      	mov	r0, r3
 800050e:	f003 fb85 	bl	8003c1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start_IT(enc->htim, TIM_CHANNEL_ALL);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	213c      	movs	r1, #60	; 0x3c
 8000518:	4618      	mov	r0, r3
 800051a:	f003 fe55 	bl	80041c8 <HAL_TIM_Encoder_Start_IT>
	enc->elapse = 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	711a      	strb	r2, [r3, #4]
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <Encoder_getCnt>:

int16_t Encoder_getCnt(Encoder* enc)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	return (int16_t)__HAL_TIM_GET_COUNTER(enc->htim);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053c:	b21b      	sxth	r3, r3
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <Encoder_retZero>:
{
	return enc->elapse;
}

void Encoder_retZero(Encoder* enc)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
	enc->elapse = 0;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	711a      	strb	r2, [r3, #4]
	__HAL_TIM_SET_COUNTER(enc->htim, 0);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2200      	movs	r2, #0
 8000560:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <Encoder_elapseIT>:

void Encoder_elapseIT(Encoder* enc)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	if(__HAL_TIM_GET_COUNTER(enc->htim) == 0)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057e:	2b00      	cmp	r3, #0
 8000580:	d109      	bne.n	8000596 <Encoder_elapseIT+0x28>
	{
		enc->elapse ++;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	3301      	adds	r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	b25a      	sxtb	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	711a      	strb	r2, [r3, #4]
	}
	else
		enc->elapse --;
}
 8000594:	e008      	b.n	80005a8 <Encoder_elapseIT+0x3a>
		enc->elapse --;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	3b01      	subs	r3, #1
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	b25a      	sxtb	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	711a      	strb	r2, [r3, #4]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <BT_Config>:
uint8_t dma;



void BT_Config(void(*_User_TxCplt_CB)(void), void(*_User_RxCplt_CB)(const uint8_t*))
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	User_TxCplt_CB = _User_TxCplt_CB;
 80005be:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <BT_Config+0x44>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6013      	str	r3, [r2, #0]
	User_RxCplt_CB = _User_RxCplt_CB;
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <BT_Config+0x48>)
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	6013      	str	r3, [r2, #0]
	HAL_UART_RegisterCallback(&BT_UART, HAL_UART_TX_COMPLETE_CB_ID, BT_TxCplt_CB);
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <BT_Config+0x4c>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <BT_Config+0x50>)
 80005d0:	f004 fda6 	bl	8005120 <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(&BT_UART, HAL_UART_RX_COMPLETE_CB_ID, BT_RxCplt_CB);
 80005d4:	4a0c      	ldr	r2, [pc, #48]	; (8000608 <BT_Config+0x54>)
 80005d6:	2103      	movs	r1, #3
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <BT_Config+0x50>)
 80005da:	f004 fda1 	bl	8005120 <HAL_UART_RegisterCallback>
	tx_cplt = 1;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <BT_Config+0x58>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	701a      	strb	r2, [r3, #0]
	rx_cplt = 1;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <BT_Config+0x5c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
	dma = 0;
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <BT_Config+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000980 	.word	0x20000980
 80005fc:	20000984 	.word	0x20000984
 8000600:	080006d9 	.word	0x080006d9
 8000604:	200002ec 	.word	0x200002ec
 8000608:	080006f5 	.word	0x080006f5
 800060c:	20000988 	.word	0x20000988
 8000610:	20000989 	.word	0x20000989
 8000614:	200009ac 	.word	0x200009ac

08000618 <BT_Transmit_Str>:
	HAL_UART_Transmit_DMA(&BT_UART, tx_msg, MSG_LEN);
	return 1;
}

uint8_t BT_Transmit_Str(const char* str)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	if(tx_cplt == 0)
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <BT_Transmit_Str+0x74>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <BT_Transmit_Str+0x14>
		return 0;
 8000628:	2300      	movs	r3, #0
 800062a:	e02a      	b.n	8000682 <BT_Transmit_Str+0x6a>
	tx_cplt = 0;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <BT_Transmit_Str+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
	memset(tx_msg, ' ', sizeof(uint8_t)*MSG_LEN);
 8000632:	2210      	movs	r2, #16
 8000634:	2120      	movs	r1, #32
 8000636:	4816      	ldr	r0, [pc, #88]	; (8000690 <BT_Transmit_Str+0x78>)
 8000638:	f006 fb63 	bl	8006d02 <memset>
	if(strlen(str) < MSG_LEN-2)
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff fdd5 	bl	80001ec <strlen>
 8000642:	4603      	mov	r3, r0
 8000644:	2b0d      	cmp	r3, #13
 8000646:	d80a      	bhi.n	800065e <BT_Transmit_Str+0x46>
		memcpy(tx_msg+1, str, sizeof(uint8_t)*(strlen(str)));
 8000648:	4c12      	ldr	r4, [pc, #72]	; (8000694 <BT_Transmit_Str+0x7c>)
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f7ff fdce 	bl	80001ec <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	6879      	ldr	r1, [r7, #4]
 8000656:	4620      	mov	r0, r4
 8000658:	f006 fb80 	bl	8006d5c <memcpy>
 800065c:	e005      	b.n	800066a <BT_Transmit_Str+0x52>
	else
		memcpy(tx_msg+1, str, sizeof(uint8_t)*(MSG_LEN-2));
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <BT_Transmit_Str+0x7c>)
 8000660:	220e      	movs	r2, #14
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	4618      	mov	r0, r3
 8000666:	f006 fb79 	bl	8006d5c <memcpy>
	tx_msg[0] = MSG_FRONT;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <BT_Transmit_Str+0x78>)
 800066c:	2223      	movs	r2, #35	; 0x23
 800066e:	701a      	strb	r2, [r3, #0]
	tx_msg[MSG_LEN-1] = MSG_END;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <BT_Transmit_Str+0x78>)
 8000672:	220a      	movs	r2, #10
 8000674:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(&BT_UART, tx_msg, MSG_LEN);
 8000676:	2210      	movs	r2, #16
 8000678:	4905      	ldr	r1, [pc, #20]	; (8000690 <BT_Transmit_Str+0x78>)
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <BT_Transmit_Str+0x80>)
 800067c:	f004 fe0e 	bl	800529c <HAL_UART_Transmit_DMA>
	return 1;
 8000680:	2301      	movs	r3, #1
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	bf00      	nop
 800068c:	20000988 	.word	0x20000988
 8000690:	2000098c 	.word	0x2000098c
 8000694:	2000098d 	.word	0x2000098d
 8000698:	200002ec 	.word	0x200002ec

0800069c <BT_StartGetCMD>:

uint8_t BT_StartGetCMD()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	if(rx_cplt == 0)
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <BT_StartGetCMD+0x30>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d101      	bne.n	80006ac <BT_StartGetCMD+0x10>
		return 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	e00d      	b.n	80006c8 <BT_StartGetCMD+0x2c>
	rx_cplt = 0;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <BT_StartGetCMD+0x30>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	memset(rx_msg, 0, sizeof(uint8_t)*MSG_LEN);
 80006b2:	2210      	movs	r2, #16
 80006b4:	2100      	movs	r1, #0
 80006b6:	4806      	ldr	r0, [pc, #24]	; (80006d0 <BT_StartGetCMD+0x34>)
 80006b8:	f006 fb23 	bl	8006d02 <memset>
	HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	4904      	ldr	r1, [pc, #16]	; (80006d0 <BT_StartGetCMD+0x34>)
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <BT_StartGetCMD+0x38>)
 80006c2:	f004 fdc5 	bl	8005250 <HAL_UART_Receive_IT>
	return 1;
 80006c6:	2301      	movs	r3, #1
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000989 	.word	0x20000989
 80006d0:	2000099c 	.word	0x2000099c
 80006d4:	200002ec 	.word	0x200002ec

080006d8 <BT_TxCplt_CB>:

void BT_TxCplt_CB()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	tx_cplt = 1;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <BT_TxCplt_CB+0x14>)
 80006de:	2201      	movs	r2, #1
 80006e0:	701a      	strb	r2, [r3, #0]
	User_TxCplt_CB();
 80006e2:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <BT_TxCplt_CB+0x18>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4798      	blx	r3

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000988 	.word	0x20000988
 80006f0:	20000980 	.word	0x20000980

080006f4 <BT_RxCplt_CB>:

void BT_RxCplt_CB()
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	if(dma == 0)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <BT_RxCplt_CB+0x50>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d113      	bne.n	8000728 <BT_RxCplt_CB+0x34>
	{
		if(rx_msg[0] == MSG_FRONT)
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <BT_RxCplt_CB+0x54>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b23      	cmp	r3, #35	; 0x23
 8000706:	d109      	bne.n	800071c <BT_RxCplt_CB+0x28>
		{
			HAL_UART_Receive_DMA(&BT_UART, rx_msg+1, MSG_LEN-1);
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <BT_RxCplt_CB+0x58>)
 800070a:	220f      	movs	r2, #15
 800070c:	4619      	mov	r1, r3
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <BT_RxCplt_CB+0x5c>)
 8000710:	f004 fe34 	bl	800537c <HAL_UART_Receive_DMA>
			dma = 1;
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <BT_RxCplt_CB+0x50>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
	{
		dma = 0;
		User_RxCplt_CB(rx_msg);
		HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
	}
}
 800071a:	e011      	b.n	8000740 <BT_RxCplt_CB+0x4c>
			HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
 800071c:	2201      	movs	r2, #1
 800071e:	490a      	ldr	r1, [pc, #40]	; (8000748 <BT_RxCplt_CB+0x54>)
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <BT_RxCplt_CB+0x5c>)
 8000722:	f004 fd95 	bl	8005250 <HAL_UART_Receive_IT>
}
 8000726:	e00b      	b.n	8000740 <BT_RxCplt_CB+0x4c>
		dma = 0;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <BT_RxCplt_CB+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
		User_RxCplt_CB(rx_msg);
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <BT_RxCplt_CB+0x60>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <BT_RxCplt_CB+0x54>)
 8000734:	4798      	blx	r3
		HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
 8000736:	2201      	movs	r2, #1
 8000738:	4903      	ldr	r1, [pc, #12]	; (8000748 <BT_RxCplt_CB+0x54>)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <BT_RxCplt_CB+0x5c>)
 800073c:	f004 fd88 	bl	8005250 <HAL_UART_Receive_IT>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200009ac 	.word	0x200009ac
 8000748:	2000099c 	.word	0x2000099c
 800074c:	2000099d 	.word	0x2000099d
 8000750:	200002ec 	.word	0x200002ec
 8000754:	20000984 	.word	0x20000984

08000758 <Stepper_Config>:
uint16_t Dir_Pin;

void Stepper_Rotate_Cplt_CB();

void Stepper_Config(TIM_HandleTypeDef *_htim, uint32_t _channel, uint16_t _interval, GPIO_TypeDef* _Dir_Port, uint16_t _Dir_Pin)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4613      	mov	r3, r2
 8000766:	80fb      	strh	r3, [r7, #6]
	htim = _htim;
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <Stepper_Config+0xbc>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6013      	str	r3, [r2, #0]
	channel = _channel;
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <Stepper_Config+0xc0>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	6013      	str	r3, [r2, #0]
	interval = _interval;
 8000774:	4a29      	ldr	r2, [pc, #164]	; (800081c <Stepper_Config+0xc4>)
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, interval);
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <Stepper_Config+0xc4>)
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <Stepper_Config+0xbc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	62da      	str	r2, [r3, #44]	; 0x2c
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <Stepper_Config+0xc4>)
 8000788:	881a      	ldrh	r2, [r3, #0]
 800078a:	4b22      	ldr	r3, [pc, #136]	; (8000814 <Stepper_Config+0xbc>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	60da      	str	r2, [r3, #12]
	Dir_Port = _Dir_Port;
 8000790:	4a23      	ldr	r2, [pc, #140]	; (8000820 <Stepper_Config+0xc8>)
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	6013      	str	r3, [r2, #0]
	Dir_Pin = _Dir_Pin;
 8000796:	4a23      	ldr	r2, [pc, #140]	; (8000824 <Stepper_Config+0xcc>)
 8000798:	8b3b      	ldrh	r3, [r7, #24]
 800079a:	8013      	strh	r3, [r2, #0]
	steps_remain = 0;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <Stepper_Config+0xd0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, interval - 10);
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <Stepper_Config+0xc0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d108      	bne.n	80007bc <Stepper_Config+0x64>
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <Stepper_Config+0xc4>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	f1a3 020a 	sub.w	r2, r3, #10
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <Stepper_Config+0xbc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007ba:	e024      	b.n	8000806 <Stepper_Config+0xae>
	__HAL_TIM_SET_COMPARE(htim, channel, interval - 10);
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <Stepper_Config+0xc0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d109      	bne.n	80007d8 <Stepper_Config+0x80>
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <Stepper_Config+0xc4>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	f1a3 010a 	sub.w	r1, r3, #10
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <Stepper_Config+0xbc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	460b      	mov	r3, r1
 80007d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80007d6:	e016      	b.n	8000806 <Stepper_Config+0xae>
	__HAL_TIM_SET_COMPARE(htim, channel, interval - 10);
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <Stepper_Config+0xc0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d109      	bne.n	80007f4 <Stepper_Config+0x9c>
 80007e0:	4b0e      	ldr	r3, [pc, #56]	; (800081c <Stepper_Config+0xc4>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	f1a3 010a 	sub.w	r1, r3, #10
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <Stepper_Config+0xbc>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	460b      	mov	r3, r1
 80007f0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80007f2:	e008      	b.n	8000806 <Stepper_Config+0xae>
	__HAL_TIM_SET_COMPARE(htim, channel, interval - 10);
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <Stepper_Config+0xc4>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	f1a3 010a 	sub.w	r1, r3, #10
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <Stepper_Config+0xbc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	681a      	ldr	r2, [r3, #0]
 8000802:	460b      	mov	r3, r1
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	200009b0 	.word	0x200009b0
 8000818:	200009b4 	.word	0x200009b4
 800081c:	20000000 	.word	0x20000000
 8000820:	200009bc 	.word	0x200009bc
 8000824:	200009c0 	.word	0x200009c0
 8000828:	200009b8 	.word	0x200009b8

0800082c <Stepper_Set_Interval>:

uint8_t Stepper_Set_Interval(uint16_t _interval)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
	if(_interval < 200)
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	2bc7      	cmp	r3, #199	; 0xc7
 800083a:	d801      	bhi.n	8000840 <Stepper_Set_Interval+0x14>
	{
		return 0;
 800083c:	2300      	movs	r3, #0
 800083e:	e00e      	b.n	800085e <Stepper_Set_Interval+0x32>
	}
	interval = _interval;
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <Stepper_Set_Interval+0x40>)
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, interval);
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <Stepper_Set_Interval+0x40>)
 8000848:	881a      	ldrh	r2, [r3, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <Stepper_Set_Interval+0x44>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <Stepper_Set_Interval+0x40>)
 8000854:	881a      	ldrh	r2, [r3, #0]
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <Stepper_Set_Interval+0x44>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	60da      	str	r2, [r3, #12]
	return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000000 	.word	0x20000000
 8000870:	200009b0 	.word	0x200009b0

08000874 <Stepper_Rotate>:

uint8_t Stepper_Rotate(int32_t steps)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if(steps_remain != 0)
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <Stepper_Rotate+0x80>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <Stepper_Rotate+0x14>
	{
		return 0;
 8000884:	2300      	movs	r3, #0
 8000886:	e031      	b.n	80008ec <Stepper_Rotate+0x78>
	}
	if(steps == 0)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <Stepper_Rotate+0x22>
	{
		Stepper_Rotate_Cplt_CB();
 800088e:	f000 fd19 	bl	80012c4 <Stepper_Rotate_Cplt_CB>
		return 1;
 8000892:	2301      	movs	r3, #1
 8000894:	e02a      	b.n	80008ec <Stepper_Rotate+0x78>
	}
	if(steps < 0)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	da0c      	bge.n	80008b6 <Stepper_Rotate+0x42>
	{
		steps_remain = (-steps) - 1;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	43db      	mvns	r3, r3
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <Stepper_Rotate+0x80>)
 80008a2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(Dir_Port, Dir_Pin, RESET);
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <Stepper_Rotate+0x84>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <Stepper_Rotate+0x88>)
 80008aa:	8811      	ldrh	r1, [r2, #0]
 80008ac:	2200      	movs	r2, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fb8a 	bl	8002fc8 <HAL_GPIO_WritePin>
 80008b4:	e00c      	b.n	80008d0 <Stepper_Rotate+0x5c>
	}
	else
	{
		steps_remain = steps - 1;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	461a      	mov	r2, r3
 80008bc:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <Stepper_Rotate+0x80>)
 80008be:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Dir_Port, Dir_Pin, SET);
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <Stepper_Rotate+0x84>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <Stepper_Rotate+0x88>)
 80008c6:	8811      	ldrh	r1, [r2, #0]
 80008c8:	2201      	movs	r2, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fb7c 	bl	8002fc8 <HAL_GPIO_WritePin>
	}
	HAL_TIM_Base_Start_IT(htim);
 80008d0:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <Stepper_Rotate+0x8c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f003 f9a1 	bl	8003c1c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, channel);
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <Stepper_Rotate+0x8c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a09      	ldr	r2, [pc, #36]	; (8000904 <Stepper_Rotate+0x90>)
 80008e0:	6812      	ldr	r2, [r2, #0]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f003 fa91 	bl	8003e0c <HAL_TIM_PWM_Start>
	return 1;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200009b8 	.word	0x200009b8
 80008f8:	200009bc 	.word	0x200009bc
 80008fc:	200009c0 	.word	0x200009c0
 8000900:	200009b0 	.word	0x200009b0
 8000904:	200009b4 	.word	0x200009b4

08000908 <Stepper_Stop>:

void Stepper_Stop()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(htim, channel);
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <Stepper_Stop+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a08      	ldr	r2, [pc, #32]	; (8000934 <Stepper_Stop+0x2c>)
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fb40 	bl	8003f9c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim);
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <Stepper_Stop+0x28>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f9eb 	bl	8003cfc <HAL_TIM_Base_Stop_IT>
	Stepper_Rotate_Cplt_CB();
 8000926:	f000 fccd 	bl	80012c4 <Stepper_Rotate_Cplt_CB>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200009b0 	.word	0x200009b0
 8000934:	200009b4 	.word	0x200009b4

08000938 <Stepper_Step_Cplt>:

void Stepper_Step_Cplt()
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	if(steps_remain == 0)
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <Stepper_Step_Cplt+0x2c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d108      	bne.n	8000956 <Stepper_Step_Cplt+0x1e>
	{
		Stepper_Stop();
 8000944:	f7ff ffe0 	bl	8000908 <Stepper_Stop>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <Stepper_Step_Cplt+0x30>)
 8000950:	f002 fb3a 	bl	8002fc8 <HAL_GPIO_WritePin>
	}
	else
	{
		steps_remain--;
	}
}
 8000954:	e004      	b.n	8000960 <Stepper_Step_Cplt+0x28>
		steps_remain--;
 8000956:	4b03      	ldr	r3, [pc, #12]	; (8000964 <Stepper_Step_Cplt+0x2c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3b01      	subs	r3, #1
 800095c:	4a01      	ldr	r2, [pc, #4]	; (8000964 <Stepper_Step_Cplt+0x2c>)
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200009b8 	.word	0x200009b8
 8000968:	40020400 	.word	0x40020400

0800096c <Stepper_Cplt>:

uint8_t Stepper_Cplt()
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	return steps_remain == 0;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <Stepper_Cplt+0x1c>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf0c      	ite	eq
 8000978:	2301      	moveq	r3, #1
 800097a:	2300      	movne	r3, #0
 800097c:	b2db      	uxtb	r3, r3
}
 800097e:	4618      	mov	r0, r3
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	200009b8 	.word	0x200009b8

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f001 f89b 	bl	8001acc <HAL_Init>

  /* USER CODE BEGIN Init */
  float cnt_inter = NUM_OF_CNT_PER_CYCLE/NUM_OF_SHELF;
 8000996:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <main+0x118>)
 8000998:	603b      	str	r3, [r7, #0]
  for(int i=0; i<NUM_OF_SHELF; i++)
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e014      	b.n	80009ca <main+0x3e>
  {
	  desti_cnt[i] = cnt_inter*(i - INIT_SHELF);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b03      	subs	r3, #3
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ac:	edd7 7a00 	vldr	s15, [r7]
 80009b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 1a90 	vmov	r1, s15
 80009bc:	4a3a      	ldr	r2, [pc, #232]	; (8000aa8 <main+0x11c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i=0; i<NUM_OF_SHELF; i++)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3301      	adds	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b05      	cmp	r3, #5
 80009ce:	dde7      	ble.n	80009a0 <main+0x14>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f888 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f000 fae4 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009d8:	f000 faba 	bl	8000f50 <MX_DMA_Init>
  MX_ETH_Init();
 80009dc:	f000 f8ec 	bl	8000bb8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009e0:	f000 fa5e 	bl	8000ea0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009e4:	f000 fa86 	bl	8000ef4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 fa30 	bl	8000e4c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009ec:	f000 f932 	bl	8000c54 <MX_TIM1_Init>
  MX_TIM4_Init();
 80009f0:	f000 f9d8 	bl	8000da4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  Encoder_Start(&enc1, &htim4);
 80009f4:	492d      	ldr	r1, [pc, #180]	; (8000aac <main+0x120>)
 80009f6:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <main+0x124>)
 80009f8:	f7ff fd7e 	bl	80004f8 <Encoder_Start>

  Stepper_Config(STEPPER_TIMER, TIM_CHANNEL_1, STEPPER_INTERVAL, Stepper_Dir_GPIO_Port, Stepper_Dir_Pin);
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <main+0x128>)
 8000a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a08:	2100      	movs	r1, #0
 8000a0a:	482b      	ldr	r0, [pc, #172]	; (8000ab8 <main+0x12c>)
 8000a0c:	f7ff fea4 	bl	8000758 <Stepper_Config>
  BT_Config(txCplt, getCMD);
 8000a10:	492a      	ldr	r1, [pc, #168]	; (8000abc <main+0x130>)
 8000a12:	482b      	ldr	r0, [pc, #172]	; (8000ac0 <main+0x134>)
 8000a14:	f7ff fdce 	bl	80005b4 <BT_Config>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1e:	4829      	ldr	r0, [pc, #164]	; (8000ac4 <main+0x138>)
 8000a20:	f002 fad2 	bl	8002fc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD2_Pin, RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	4826      	ldr	r0, [pc, #152]	; (8000ac4 <main+0x138>)
 8000a2a:	f002 facd 	bl	8002fc8 <HAL_GPIO_WritePin>

  BT_Transmit_Str("AutoBookshelf");
 8000a2e:	4826      	ldr	r0, [pc, #152]	; (8000ac8 <main+0x13c>)
 8000a30:	f7ff fdf2 	bl	8000618 <BT_Transmit_Str>
  BT_StartGetCMD();
 8000a34:	f7ff fe32 	bl	800069c <BT_StartGetCMD>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  curr_cnt = Encoder_getCnt(&enc1);
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <main+0x124>)
 8000a3a:	f7ff fd77 	bl	800052c <Encoder_getCnt>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <main+0x140>)
 8000a44:	601a      	str	r2, [r3, #0]
	  if(steps != 0 && Stepper_Cplt())
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <main+0x144>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d011      	beq.n	8000a72 <main+0xe6>
 8000a4e:	f7ff ff8d 	bl	800096c <Stepper_Cplt>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00c      	beq.n	8000a72 <main+0xe6>
	  {
		  Stepper_Set_Interval(interval);
 8000a58:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <main+0x148>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fee5 	bl	800082c <Stepper_Set_Interval>
		  Stepper_Rotate(steps);
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <main+0x144>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff04 	bl	8000874 <Stepper_Rotate>
		  steps = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <main+0x144>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
	  }
	  if(but == 1 && Stepper_Cplt())
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <main+0x14c>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d107      	bne.n	8000a8a <main+0xfe>
 8000a7a:	f7ff ff77 	bl	800096c <Stepper_Cplt>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d002      	beq.n	8000a8a <main+0xfe>
	  {
		  Stepper_Rotate(1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f7ff fef5 	bl	8000874 <Stepper_Rotate>
	  }
	  check = Stepper_Cplt();
 8000a8a:	f7ff ff6f 	bl	800096c <Stepper_Cplt>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <main+0x150>)
 8000a94:	601a      	str	r2, [r3, #0]
	  mainwhile = 1- mainwhile;
 8000a96:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <main+0x154>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f1c3 0301 	rsb	r3, r3, #1
 8000a9e:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <main+0x154>)
 8000aa0:	6013      	str	r3, [r2, #0]
	  curr_cnt = Encoder_getCnt(&enc1);
 8000aa2:	e7c9      	b.n	8000a38 <main+0xac>
 8000aa4:	42840000 	.word	0x42840000
 8000aa8:	200009e8 	.word	0x200009e8
 8000aac:	200002a4 	.word	0x200002a4
 8000ab0:	200009c4 	.word	0x200009c4
 8000ab4:	40021400 	.word	0x40021400
 8000ab8:	2000025c 	.word	0x2000025c
 8000abc:	080011a5 	.word	0x080011a5
 8000ac0:	08001195 	.word	0x08001195
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	08006d90 	.word	0x08006d90
 8000acc:	200009cc 	.word	0x200009cc
 8000ad0:	200009e4 	.word	0x200009e4
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	200009d0 	.word	0x200009d0
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000a00 	.word	0x20000a00

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b094      	sub	sp, #80	; 0x50
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	2230      	movs	r2, #48	; 0x30
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f006 f905 	bl	8006d02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <SystemClock_Config+0xcc>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a27      	ldr	r2, [pc, #156]	; (8000bb0 <SystemClock_Config+0xcc>)
 8000b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <SystemClock_Config+0xcc>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <SystemClock_Config+0xd0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a21      	ldr	r2, [pc, #132]	; (8000bb4 <SystemClock_Config+0xd0>)
 8000b2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <SystemClock_Config+0xd0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b54:	2304      	movs	r3, #4
 8000b56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b58:	23a8      	movs	r3, #168	; 0xa8
 8000b5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b60:	2307      	movs	r3, #7
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0320 	add.w	r3, r7, #32
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 fb6f 	bl	800324c <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b74:	f000 fc00 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2105      	movs	r1, #5
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fdd0 	bl	800373c <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ba2:	f000 fbe9 	bl	8001378 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3750      	adds	r7, #80	; 0x50
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_ETH_Init+0x84>)
 8000bbe:	4a20      	ldr	r2, [pc, #128]	; (8000c40 <MX_ETH_Init+0x88>)
 8000bc0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000bd0:	22e1      	movs	r2, #225	; 0xe1
 8000bd2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <MX_ETH_Init+0x84>)
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <MX_ETH_Init+0x8c>)
 8000bea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_ETH_Init+0x84>)
 8000bee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bf2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_ETH_Init+0x84>)
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <MX_ETH_Init+0x90>)
 8000bf8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_ETH_Init+0x84>)
 8000bfc:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <MX_ETH_Init+0x94>)
 8000bfe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_ETH_Init+0x84>)
 8000c02:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c06:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_ETH_Init+0x84>)
 8000c0a:	f001 fd09 	bl	8002620 <HAL_ETH_Init>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c14:	f000 fbb0 	bl	8001378 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c18:	2238      	movs	r2, #56	; 0x38
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_ETH_Init+0x98>)
 8000c1e:	f006 f870 	bl	8006d02 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <MX_ETH_Init+0x98>)
 8000c24:	2221      	movs	r2, #33	; 0x21
 8000c26:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c28:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_ETH_Init+0x98>)
 8000c2a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c2e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_ETH_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001ac 	.word	0x200001ac
 8000c40:	40028000 	.word	0x40028000
 8000c44:	20000a0c 	.word	0x20000a0c
 8000c48:	2000010c 	.word	0x2000010c
 8000c4c:	2000006c 	.word	0x2000006c
 8000c50:	20000034 	.word	0x20000034

08000c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b096      	sub	sp, #88	; 0x58
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2220      	movs	r2, #32
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f006 f838 	bl	8006d02 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c92:	4b42      	ldr	r3, [pc, #264]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000c94:	4a42      	ldr	r2, [pc, #264]	; (8000da0 <MX_TIM1_Init+0x14c>)
 8000c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000c98:	4b40      	ldr	r3, [pc, #256]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000c9a:	22a7      	movs	r2, #167	; 0xa7
 8000c9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cbe:	4837      	ldr	r0, [pc, #220]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000cc0:	f002 ff5c 	bl	8003b7c <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cca:	f000 fb55 	bl	8001378 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4830      	ldr	r0, [pc, #192]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000cdc:	f003 fcd4 	bl	8004688 <HAL_TIM_ConfigClockSource>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ce6:	f000 fb47 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cea:	482c      	ldr	r0, [pc, #176]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000cec:	f003 f835 	bl	8003d5a <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 fb3f 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d06:	4619      	mov	r1, r3
 8000d08:	4824      	ldr	r0, [pc, #144]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000d0a:	f004 f8c9 	bl	8004ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d14:	f000 fb30 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d20:	2302      	movs	r3, #2
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000d3e:	f003 fbe1 	bl	8004504 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d48:	f000 fb16 	bl	8001378 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0208 	bic.w	r2, r2, #8
 8000d5a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000d80:	f004 f90a 	bl	8004f98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000d8a:	f000 faf5 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM1_Init+0x148>)
 8000d90:	f000 fc5e 	bl	8001650 <HAL_TIM_MspPostInit>

}
 8000d94:	bf00      	nop
 8000d96:	3758      	adds	r7, #88	; 0x58
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2000025c 	.word	0x2000025c
 8000da0:	40010000 	.word	0x40010000

08000da4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	2224      	movs	r2, #36	; 0x24
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f005 ffa5 	bl	8006d02 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc0:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000dc2:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <MX_TIM4_Init+0xa4>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dee:	2301      	movs	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 9;
 8000e06:	2309      	movs	r3, #9
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480c      	ldr	r0, [pc, #48]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000e12:	f003 f933 	bl	800407c <HAL_TIM_Encoder_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 faac 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_TIM4_Init+0xa0>)
 8000e2e:	f004 f837 	bl	8004ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e38:	f000 fa9e 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	; 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	200002a4 	.word	0x200002a4
 8000e48:	40000800 	.word	0x40000800

08000e4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <MX_USART2_UART_Init+0x50>)
 8000e54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e56:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e72:	220c      	movs	r2, #12
 8000e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USART2_UART_Init+0x4c>)
 8000e84:	f004 f8ee 	bl	8005064 <HAL_UART_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e8e:	f000 fa73 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200002ec 	.word	0x200002ec
 8000e9c:	40004400 	.word	0x40004400

08000ea0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_USART3_UART_Init+0x50>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_USART3_UART_Init+0x4c>)
 8000ed8:	f004 f8c4 	bl	8005064 <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ee2:	f000 fa49 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000364 	.word	0x20000364
 8000ef0:	40004800 	.word	0x40004800

08000ef4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000efe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f02:	2204      	movs	r2, #4
 8000f04:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f14:	2202      	movs	r2, #2
 8000f16:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f38:	f002 f878 	bl	800302c <HAL_PCD_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f42:	f000 fa19 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000049c 	.word	0x2000049c

08000f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <MX_DMA_Init+0x4c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <MX_DMA_Init+0x4c>)
 8000f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <MX_DMA_Init+0x4c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	2010      	movs	r0, #16
 8000f78:	f000 ff19 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f000 ff32 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2011      	movs	r0, #17
 8000f88:	f000 ff11 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f8c:	2011      	movs	r0, #17
 8000f8e:	f000 ff2a 	bl	8001de6 <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08e      	sub	sp, #56	; 0x38
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	623b      	str	r3, [r7, #32]
 8000fba:	4b68      	ldr	r3, [pc, #416]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a67      	ldr	r2, [pc, #412]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b65      	ldr	r3, [pc, #404]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	4b61      	ldr	r3, [pc, #388]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a60      	ldr	r2, [pc, #384]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b5e      	ldr	r3, [pc, #376]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	4b5a      	ldr	r3, [pc, #360]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a59      	ldr	r2, [pc, #356]	; (800115c <MX_GPIO_Init+0x1bc>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b57      	ldr	r3, [pc, #348]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	4b53      	ldr	r3, [pc, #332]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a52      	ldr	r2, [pc, #328]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b50      	ldr	r3, [pc, #320]	; (800115c <MX_GPIO_Init+0x1bc>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b4c      	ldr	r3, [pc, #304]	; (800115c <MX_GPIO_Init+0x1bc>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a4b      	ldr	r2, [pc, #300]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b49      	ldr	r3, [pc, #292]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b45      	ldr	r3, [pc, #276]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a44      	ldr	r2, [pc, #272]	; (800115c <MX_GPIO_Init+0x1bc>)
 800104c:	f043 0310 	orr.w	r3, r3, #16
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b42      	ldr	r3, [pc, #264]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	4b3e      	ldr	r3, [pc, #248]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a3d      	ldr	r2, [pc, #244]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001068:	f043 0308 	orr.w	r3, r3, #8
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b3b      	ldr	r3, [pc, #236]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a36      	ldr	r2, [pc, #216]	; (800115c <MX_GPIO_Init+0x1bc>)
 8001084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b34      	ldr	r3, [pc, #208]	; (800115c <MX_GPIO_Init+0x1bc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f244 0181 	movw	r1, #16513	; 0x4081
 800109c:	4830      	ldr	r0, [pc, #192]	; (8001160 <MX_GPIO_Init+0x1c0>)
 800109e:	f001 ff93 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a8:	482e      	ldr	r0, [pc, #184]	; (8001164 <MX_GPIO_Init+0x1c4>)
 80010aa:	f001 ff8d 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2140      	movs	r1, #64	; 0x40
 80010b2:	482d      	ldr	r0, [pc, #180]	; (8001168 <MX_GPIO_Init+0x1c8>)
 80010b4:	f001 ff88 	bl	8002fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4827      	ldr	r0, [pc, #156]	; (800116c <MX_GPIO_Init+0x1cc>)
 80010d0:	f001 fdce 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010da:	2301      	movs	r3, #1
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <MX_GPIO_Init+0x1c0>)
 80010ee:	f001 fdbf 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stepper_Dir_Pin */
  GPIO_InitStruct.Pin = Stepper_Dir_Pin;
 80010f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Stepper_Dir_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	4816      	ldr	r0, [pc, #88]	; (8001164 <MX_GPIO_Init+0x1c4>)
 800110c:	f001 fdb0 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001110:	2340      	movs	r3, #64	; 0x40
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	4810      	ldr	r0, [pc, #64]	; (8001168 <MX_GPIO_Init+0x1c8>)
 8001128:	f001 fda2 	bl	8002c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	480a      	ldr	r0, [pc, #40]	; (8001168 <MX_GPIO_Init+0x1c8>)
 8001140:	f001 fd96 	bl	8002c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2028      	movs	r0, #40	; 0x28
 800114a:	f000 fe30 	bl	8001dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114e:	2028      	movs	r0, #40	; 0x28
 8001150:	f000 fe49 	bl	8001de6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001154:	bf00      	nop
 8001156:	3738      	adds	r7, #56	; 0x38
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020400 	.word	0x40020400
 8001164:	40021400 	.word	0x40021400
 8001168:	40021800 	.word	0x40021800
 800116c:	40020800 	.word	0x40020800

08001170 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001180:	d102      	bne.n	8001188 <HAL_GPIO_EXTI_Callback+0x18>
	{
		Encoder_retZero(&enc1);
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <HAL_GPIO_EXTI_Callback+0x20>)
 8001184:	f7ff f9e1 	bl	800054a <Encoder_retZero>
	}
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200009c4 	.word	0x200009c4

08001194 <txCplt>:

void txCplt()
{}
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <getCMD>:

void getCMD(const uint8_t *cmd)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	480a      	ldr	r0, [pc, #40]	; (80011dc <getCMD+0x38>)
 80011b2:	f001 ff09 	bl	8002fc8 <HAL_GPIO_WritePin>
	memset(tmp_rx, 0, sizeof(uint8_t)*MSG_LEN);
 80011b6:	2210      	movs	r2, #16
 80011b8:	2100      	movs	r1, #0
 80011ba:	4809      	ldr	r0, [pc, #36]	; (80011e0 <getCMD+0x3c>)
 80011bc:	f005 fda1 	bl	8006d02 <memset>
	memcpy(tmp_rx, cmd, sizeof(uint8_t)*MSG_LEN);
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <getCMD+0x3c>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4614      	mov	r4, r2
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	6859      	ldr	r1, [r3, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	Process_CMD();
 80011d0:	f000 f808 	bl	80011e4 <Process_CMD>
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	40020400 	.word	0x40020400
 80011e0:	200009d4 	.word	0x200009d4

080011e4 <Process_CMD>:

void Process_CMD()
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	if(tmp_rx[1] == 's')
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <Process_CMD+0x94>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	2b73      	cmp	r3, #115	; 0x73
 80011ee:	d140      	bne.n	8001272 <Process_CMD+0x8e>
	{
		desti_shelf = (tmp_rx[2]-'0')*100 + (tmp_rx[3]-'0')*10 + (tmp_rx[4]-'0')*1;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <Process_CMD+0x94>)
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	461a      	mov	r2, r3
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	0091      	lsls	r1, r2, #2
 80011fe:	461a      	mov	r2, r3
 8001200:	460b      	mov	r3, r1
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <Process_CMD+0x94>)
 800120a:	78db      	ldrb	r3, [r3, #3]
 800120c:	4619      	mov	r1, r3
 800120e:	0089      	lsls	r1, r1, #2
 8001210:	440b      	add	r3, r1
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4413      	add	r3, r2
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4b17      	ldr	r3, [pc, #92]	; (8001278 <Process_CMD+0x94>)
 800121c:	791b      	ldrb	r3, [r3, #4]
 800121e:	4413      	add	r3, r2
 8001220:	b2db      	uxtb	r3, r3
 8001222:	3330      	adds	r3, #48	; 0x30
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <Process_CMD+0x98>)
 8001228:	701a      	strb	r2, [r3, #0]
		if(desti_shelf == curr_shelf)
 800122a:	4b14      	ldr	r3, [pc, #80]	; (800127c <Process_CMD+0x98>)
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <Process_CMD+0x9c>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d106      	bne.n	8001244 <Process_CMD+0x60>
		{
			while(BT_Transmit_Str("Not Change") == 0){}
 8001236:	bf00      	nop
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <Process_CMD+0xa0>)
 800123a:	f7ff f9ed 	bl	8000618 <BT_Transmit_Str>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0f9      	beq.n	8001238 <Process_CMD+0x54>
		}
		if(Stepper_Rotate((desti_shelf-curr_shelf)*distance)!=1)
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <Process_CMD+0x98>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <Process_CMD+0x9c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	4a0d      	ldr	r2, [pc, #52]	; (8001288 <Process_CMD+0xa4>)
 8001252:	8812      	ldrh	r2, [r2, #0]
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fb0b 	bl	8000874 <Stepper_Rotate>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d006      	beq.n	8001272 <Process_CMD+0x8e>
		{
			while(BT_Transmit_Str("Still Busy")==0){}
 8001264:	bf00      	nop
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <Process_CMD+0xa8>)
 8001268:	f7ff f9d6 	bl	8000618 <BT_Transmit_Str>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f9      	beq.n	8001266 <Process_CMD+0x82>
		}
	}
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200009d4 	.word	0x200009d4
 800127c:	20000005 	.word	0x20000005
 8001280:	20000004 	.word	0x20000004
 8001284:	08006da0 	.word	0x08006da0
 8001288:	20000002 	.word	0x20000002
 800128c:	08006dac 	.word	0x08006dac

08001290 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	if(htim == STEPPER_TIMER)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d101      	bne.n	80012a4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Stepper_Step_Cplt();
 80012a0:	f7ff fb4a 	bl	8000938 <Stepper_Step_Cplt>
	}
	if(htim == enc1.htim)
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d102      	bne.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x24>
		Encoder_elapseIT(&enc1);
 80012ae:	4804      	ldr	r0, [pc, #16]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012b0:	f7ff f95d 	bl	800056e <Encoder_elapseIT>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000025c 	.word	0x2000025c
 80012c0:	200009c4 	.word	0x200009c4

080012c4 <Stepper_Rotate_Cplt_CB>:

int goal_cnt, cnt_diff;

void Stepper_Rotate_Cplt_CB()
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	if(curr_shelf == desti_shelf)
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <Stepper_Rotate_Cplt_CB+0x90>)
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <Stepper_Rotate_Cplt_CB+0x94>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d03c      	beq.n	800134e <Stepper_Rotate_Cplt_CB+0x8a>
		return;
	/*int */goal_cnt = desti_cnt[desti_shelf];
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <Stepper_Rotate_Cplt_CB+0x94>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <Stepper_Rotate_Cplt_CB+0x98>)
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <Stepper_Rotate_Cplt_CB+0x9c>)
 80012e2:	6013      	str	r3, [r2, #0]
	curr_cnt = Encoder_getCnt(&enc1);
 80012e4:	481f      	ldr	r0, [pc, #124]	; (8001364 <Stepper_Rotate_Cplt_CB+0xa0>)
 80012e6:	f7ff f921 	bl	800052c <Encoder_getCnt>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <Stepper_Rotate_Cplt_CB+0xa4>)
 80012f0:	601a      	str	r2, [r3, #0]
	/*int */cnt_diff = goal_cnt - curr_cnt;
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <Stepper_Rotate_Cplt_CB+0x9c>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <Stepper_Rotate_Cplt_CB+0xa4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <Stepper_Rotate_Cplt_CB+0xa8>)
 80012fe:	6013      	str	r3, [r2, #0]
	if(cnt_diff>ACC_DIFF || cnt_diff<-ACC_DIFF)
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <Stepper_Rotate_Cplt_CB+0xa8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b03      	cmp	r3, #3
 8001306:	dc04      	bgt.n	8001312 <Stepper_Rotate_Cplt_CB+0x4e>
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <Stepper_Rotate_Cplt_CB+0xa8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f113 0f03 	cmn.w	r3, #3
 8001310:	da0f      	bge.n	8001332 <Stepper_Rotate_Cplt_CB+0x6e>
	{
		Stepper_Rotate((cnt_diff*NUM_OF_STEPS_PER_CYCLE)/NUM_OF_CNT_PER_CYCLE);
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <Stepper_Rotate_Cplt_CB+0xa8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f643 7248 	movw	r2, #16200	; 0x3f48
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <Stepper_Rotate_Cplt_CB+0xac>)
 8001320:	fb82 1203 	smull	r1, r2, r2, r3
 8001324:	11d2      	asrs	r2, r2, #7
 8001326:	17db      	asrs	r3, r3, #31
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff faa2 	bl	8000874 <Stepper_Rotate>
		return;
 8001330:	e00e      	b.n	8001350 <Stepper_Rotate_Cplt_CB+0x8c>
	}
	if(curr_shelf != desti_shelf)
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <Stepper_Rotate_Cplt_CB+0x90>)
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <Stepper_Rotate_Cplt_CB+0x94>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d008      	beq.n	8001350 <Stepper_Rotate_Cplt_CB+0x8c>
	{
		curr_shelf = desti_shelf;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <Stepper_Rotate_Cplt_CB+0x94>)
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <Stepper_Rotate_Cplt_CB+0x90>)
 8001344:	701a      	strb	r2, [r3, #0]
		BT_Transmit_Str("Rotate Cplt");
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <Stepper_Rotate_Cplt_CB+0xb0>)
 8001348:	f7ff f966 	bl	8000618 <BT_Transmit_Str>
 800134c:	e000      	b.n	8001350 <Stepper_Rotate_Cplt_CB+0x8c>
		return;
 800134e:	bf00      	nop
	}

}
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000004 	.word	0x20000004
 8001358:	20000005 	.word	0x20000005
 800135c:	200009e8 	.word	0x200009e8
 8001360:	20000a04 	.word	0x20000a04
 8001364:	200009c4 	.word	0x200009c4
 8001368:	200009cc 	.word	0x200009cc
 800136c:	20000a08 	.word	0x20000a08
 8001370:	51eb851f 	.word	0x51eb851f
 8001374:	08006db8 	.word	0x08006db8

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	e7fe      	b.n	8001380 <Error_Handler+0x8>
	...

08001384 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <HAL_MspInit+0x4c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <HAL_MspInit+0x4c>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_MspInit+0x4c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <HAL_MspInit+0x4c>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_MspInit+0x4c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a55      	ldr	r2, [pc, #340]	; (8001548 <HAL_ETH_MspInit+0x174>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	f040 80a4 	bne.w	8001540 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_ETH_MspInit+0x178>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_ETH_MspInit+0x178>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	623b      	str	r3, [r7, #32]
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
 8001418:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_ETH_MspInit+0x178>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a4b      	ldr	r2, [pc, #300]	; (800154c <HAL_ETH_MspInit+0x178>)
 800141e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800142c:	61fb      	str	r3, [r7, #28]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	4b45      	ldr	r3, [pc, #276]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a44      	ldr	r2, [pc, #272]	; (800154c <HAL_ETH_MspInit+0x178>)
 800143a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b42      	ldr	r3, [pc, #264]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	4a3d      	ldr	r2, [pc, #244]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6313      	str	r3, [r2, #48]	; 0x30
 800145c:	4b3b      	ldr	r3, [pc, #236]	; (800154c <HAL_ETH_MspInit+0x178>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <HAL_ETH_MspInit+0x178>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a36      	ldr	r2, [pc, #216]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b34      	ldr	r3, [pc, #208]	; (800154c <HAL_ETH_MspInit+0x178>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <HAL_ETH_MspInit+0x178>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_ETH_MspInit+0x178>)
 800148e:	f043 0302 	orr.w	r3, r3, #2
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_ETH_MspInit+0x178>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <HAL_ETH_MspInit+0x178>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a28      	ldr	r2, [pc, #160]	; (800154c <HAL_ETH_MspInit+0x178>)
 80014aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b26      	ldr	r3, [pc, #152]	; (800154c <HAL_ETH_MspInit+0x178>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014bc:	2332      	movs	r3, #50	; 0x32
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c8:	2303      	movs	r3, #3
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014cc:	230b      	movs	r3, #11
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	481e      	ldr	r0, [pc, #120]	; (8001550 <HAL_ETH_MspInit+0x17c>)
 80014d8:	f001 fbca 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014dc:	2386      	movs	r3, #134	; 0x86
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ec:	230b      	movs	r3, #11
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4817      	ldr	r0, [pc, #92]	; (8001554 <HAL_ETH_MspInit+0x180>)
 80014f8:	f001 fbba 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150a:	2303      	movs	r3, #3
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150e:	230b      	movs	r3, #11
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	480f      	ldr	r0, [pc, #60]	; (8001558 <HAL_ETH_MspInit+0x184>)
 800151a:	f001 fba9 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800151e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001530:	230b      	movs	r3, #11
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <HAL_ETH_MspInit+0x188>)
 800153c:	f001 fb98 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001540:	bf00      	nop
 8001542:	3738      	adds	r7, #56	; 0x38
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40028000 	.word	0x40028000
 800154c:	40023800 	.word	0x40023800
 8001550:	40020800 	.word	0x40020800
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400
 800155c:	40021800 	.word	0x40021800

08001560 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_TIM_Base_MspInit+0x48>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d115      	bne.n	800159e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_TIM_Base_MspInit+0x4c>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <HAL_TIM_Base_MspInit+0x4c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6453      	str	r3, [r2, #68]	; 0x44
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_TIM_Base_MspInit+0x4c>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2019      	movs	r0, #25
 8001594:	f000 fc0b 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001598:	2019      	movs	r0, #25
 800159a:	f000 fc24 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_TIM_Encoder_MspInit+0x94>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d134      	bne.n	800163c <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_TIM_Encoder_MspInit+0x98>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <HAL_TIM_Encoder_MspInit+0x98>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <HAL_TIM_Encoder_MspInit+0x98>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_TIM_Encoder_MspInit+0x98>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a14      	ldr	r2, [pc, #80]	; (8001648 <HAL_TIM_Encoder_MspInit+0x98>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_TIM_Encoder_MspInit+0x98>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800160a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800161c:	2302      	movs	r3, #2
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4809      	ldr	r0, [pc, #36]	; (800164c <HAL_TIM_Encoder_MspInit+0x9c>)
 8001628:	f001 fb22 	bl	8002c70 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	201e      	movs	r0, #30
 8001632:	f000 fbbc 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001636:	201e      	movs	r0, #30
 8001638:	f000 fbd5 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40000800 	.word	0x40000800
 8001648:	40023800 	.word	0x40023800
 800164c:	40020c00 	.word	0x40020c00

08001650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_TIM_MspPostInit+0x68>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d11e      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_TIM_MspPostInit+0x6c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_TIM_MspPostInit+0x6c>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_TIM_MspPostInit+0x6c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_TIM_MspPostInit+0x70>)
 80016ac:	f001 fae0 	bl	8002c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 031c 	add.w	r3, r7, #28
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a74      	ldr	r2, [pc, #464]	; (80018b4 <HAL_UART_MspInit+0x1f0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	f040 80af 	bne.w	8001846 <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	4b72      	ldr	r3, [pc, #456]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a71      	ldr	r2, [pc, #452]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 80016f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	4b6b      	ldr	r3, [pc, #428]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6313      	str	r3, [r2, #48]	; 0x30
 8001714:	4b68      	ldr	r3, [pc, #416]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4a63      	ldr	r2, [pc, #396]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
 8001730:	4b61      	ldr	r3, [pc, #388]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	f003 0308 	and.w	r3, r3, #8
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800173c:	2308      	movs	r3, #8
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800174c:	2307      	movs	r3, #7
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	4619      	mov	r1, r3
 8001756:	4859      	ldr	r0, [pc, #356]	; (80018bc <HAL_UART_MspInit+0x1f8>)
 8001758:	f001 fa8a 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800175c:	2320      	movs	r3, #32
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800176c:	2307      	movs	r3, #7
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4852      	ldr	r0, [pc, #328]	; (80018c0 <HAL_UART_MspInit+0x1fc>)
 8001778:	f001 fa7a 	bl	8002c70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800177c:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_UART_MspInit+0x200>)
 800177e:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_UART_MspInit+0x204>)
 8001780:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001782:	4b50      	ldr	r3, [pc, #320]	; (80018c4 <HAL_UART_MspInit+0x200>)
 8001784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001788:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800178a:	4b4e      	ldr	r3, [pc, #312]	; (80018c4 <HAL_UART_MspInit+0x200>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <HAL_UART_MspInit+0x200>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001796:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_UART_MspInit+0x200>)
 8001798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800179c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017b0:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b6:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80017bc:	4841      	ldr	r0, [pc, #260]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017be:	f000 fb2d 	bl	8001e1c <HAL_DMA_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80017c8:	f7ff fdd6 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3d      	ldr	r2, [pc, #244]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80017d2:	4a3c      	ldr	r2, [pc, #240]	; (80018c4 <HAL_UART_MspInit+0x200>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <HAL_UART_MspInit+0x208>)
 80017da:	4a3d      	ldr	r2, [pc, #244]	; (80018d0 <HAL_UART_MspInit+0x20c>)
 80017dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_UART_MspInit+0x208>)
 80017e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e6:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_UART_MspInit+0x208>)
 80017e8:	2240      	movs	r2, #64	; 0x40
 80017ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_UART_MspInit+0x208>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_UART_MspInit+0x208>)
 80017f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_UART_MspInit+0x208>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_UART_MspInit+0x208>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <HAL_UART_MspInit+0x208>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800180c:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_UART_MspInit+0x208>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_UART_MspInit+0x208>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001818:	482c      	ldr	r0, [pc, #176]	; (80018cc <HAL_UART_MspInit+0x208>)
 800181a:	f000 faff 	bl	8001e1c <HAL_DMA_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8001824:	f7ff fda8 	bl	8001378 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a28      	ldr	r2, [pc, #160]	; (80018cc <HAL_UART_MspInit+0x208>)
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
 800182e:	4a27      	ldr	r2, [pc, #156]	; (80018cc <HAL_UART_MspInit+0x208>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	2026      	movs	r0, #38	; 0x26
 800183a:	f000 fab8 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800183e:	2026      	movs	r0, #38	; 0x26
 8001840:	f000 fad1 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001844:	e031      	b.n	80018aa <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <HAL_UART_MspInit+0x210>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d12c      	bne.n	80018aa <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 800185a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 8001876:	f043 0308 	orr.w	r3, r3, #8
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_UART_MspInit+0x1f4>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001888:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800189a:	2307      	movs	r3, #7
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <HAL_UART_MspInit+0x1fc>)
 80018a6:	f001 f9e3 	bl	8002c70 <HAL_GPIO_Init>
}
 80018aa:	bf00      	nop
 80018ac:	3730      	adds	r7, #48	; 0x30
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40004400 	.word	0x40004400
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020c00 	.word	0x40020c00
 80018c4:	200003dc 	.word	0x200003dc
 80018c8:	40026088 	.word	0x40026088
 80018cc:	2000043c 	.word	0x2000043c
 80018d0:	400260a0 	.word	0x400260a0
 80018d4:	40004800 	.word	0x40004800

080018d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f8:	d13f      	bne.n	800197a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <HAL_PCD_MspInit+0xac>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a20      	ldr	r2, [pc, #128]	; (8001984 <HAL_PCD_MspInit+0xac>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_PCD_MspInit+0xac>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001916:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001928:	230a      	movs	r3, #10
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4815      	ldr	r0, [pc, #84]	; (8001988 <HAL_PCD_MspInit+0xb0>)
 8001934:	f001 f99c 	bl	8002c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	480e      	ldr	r0, [pc, #56]	; (8001988 <HAL_PCD_MspInit+0xb0>)
 800194e:	f001 f98f 	bl	8002c70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_PCD_MspInit+0xac>)
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <HAL_PCD_MspInit+0xac>)
 8001958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195c:	6353      	str	r3, [r2, #52]	; 0x34
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <HAL_PCD_MspInit+0xac>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <HAL_PCD_MspInit+0xac>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_PCD_MspInit+0xac>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d8:	f000 f8ca 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <DMA1_Stream5_IRQHandler+0x10>)
 80019e6:	f000 fbb1 	bl	800214c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	200003dc 	.word	0x200003dc

080019f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <DMA1_Stream6_IRQHandler+0x10>)
 80019fa:	f000 fba7 	bl	800214c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000043c 	.word	0x2000043c

08001a08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a0e:	f002 fc89 	bl	8004324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000025c 	.word	0x2000025c

08001a1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <TIM4_IRQHandler+0x10>)
 8001a22:	f002 fc7f 	bl	8004324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200002a4 	.word	0x200002a4

08001a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <USART2_IRQHandler+0x10>)
 8001a36:	f003 fcc7 	bl	80053c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200002ec 	.word	0x200002ec

08001a44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001a48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a4c:	f001 fad6 	bl	8002ffc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001a78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a7c:	f7ff ffea 	bl	8001a54 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a82:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a98:	4c0a      	ldr	r4, [pc, #40]	; (8001ac4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f005 f935 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aaa:	f7fe ff6f 	bl	800098c <main>
  bx  lr    
 8001aae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ab0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001abc:	08006df4 	.word	0x08006df4
  ldr r2, =_sbss
 8001ac0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001ac4:	20000a18 	.word	0x20000a18

08001ac8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC_IRQHandler>
	...

08001acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <HAL_Init+0x40>)
 8001ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_Init+0x40>)
 8001ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_Init+0x40>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f000 f94f 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f808 	bl	8001b10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b00:	f7ff fc40 	bl	8001384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023c00 	.word	0x40023c00

08001b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_InitTick+0x54>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_InitTick+0x58>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f967 	bl	8001e02 <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00e      	b.n	8001b5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	d80a      	bhi.n	8001b5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b44:	2200      	movs	r2, #0
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f000 f92f 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_InitTick+0x5c>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	20000010 	.word	0x20000010

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000014 	.word	0x20000014
 8001b94:	20000a14 	.word	0x20000a14

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000a14 	.word	0x20000a14

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000014 	.word	0x20000014

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db0b      	blt.n	8001c86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
 8001c70:	f003 021f 	and.w	r2, r3, #31
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <__NVIC_EnableIRQ+0x38>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	095b      	lsrs	r3, r3, #5
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000e100 	.word	0xe000e100

08001c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db0a      	blt.n	8001cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	490c      	ldr	r1, [pc, #48]	; (8001ce4 <__NVIC_SetPriority+0x4c>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	440b      	add	r3, r1
 8001cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc0:	e00a      	b.n	8001cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4908      	ldr	r1, [pc, #32]	; (8001ce8 <__NVIC_SetPriority+0x50>)
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	761a      	strb	r2, [r3, #24]
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000e100 	.word	0xe000e100
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f1c3 0307 	rsb	r3, r3, #7
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	bf28      	it	cs
 8001d0a:	2304      	movcs	r3, #4
 8001d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3304      	adds	r3, #4
 8001d12:	2b06      	cmp	r3, #6
 8001d14:	d902      	bls.n	8001d1c <NVIC_EncodePriority+0x30>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3b03      	subs	r3, #3
 8001d1a:	e000      	b.n	8001d1e <NVIC_EncodePriority+0x32>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43da      	mvns	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	401a      	ands	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d34:	f04f 31ff 	mov.w	r1, #4294967295
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3e:	43d9      	mvns	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	4313      	orrs	r3, r2
         );
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff8e 	bl	8001c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff29 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff3e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff8e 	bl	8001cec <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5d 	bl	8001c98 <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff31 	bl	8001c5c <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff feb6 	bl	8001b98 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e099      	b.n	8001f6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e58:	e00f      	b.n	8001e7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e5a:	f7ff fe9d 	bl	8001b98 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b05      	cmp	r3, #5
 8001e66:	d908      	bls.n	8001e7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2203      	movs	r2, #3
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e078      	b.n	8001f6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e8      	bne.n	8001e5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_DMA_Init+0x158>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d107      	bne.n	8001ee4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4313      	orrs	r3, r2
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f023 0307 	bic.w	r3, r3, #7
 8001efa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	d117      	bne.n	8001f3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00e      	beq.n	8001f3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fb01 	bl	8002528 <DMA_CheckFifoParam>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e016      	b.n	8001f6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fab8 	bl	80024bc <DMA_CalcBaseAndBitshift>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	f010803f 	.word	0xf010803f

08001f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Start_IT+0x26>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e040      	b.n	8002020 <HAL_DMA_Start_IT+0xa8>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12f      	bne.n	8002012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fa4a 	bl	8002460 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	223f      	movs	r2, #63	; 0x3f
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0216 	orr.w	r2, r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0208 	orr.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e005      	b.n	800201e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800201a:	2302      	movs	r3, #2
 800201c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002036:	f7ff fdaf 	bl	8001b98 <HAL_GetTick>
 800203a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d008      	beq.n	800205a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e052      	b.n	8002100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0216 	bic.w	r2, r2, #22
 8002068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	2b00      	cmp	r3, #0
 8002080:	d103      	bne.n	800208a <HAL_DMA_Abort+0x62>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0208 	bic.w	r2, r2, #8
 8002098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0201 	bic.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020aa:	e013      	b.n	80020d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ac:	f7ff fd74 	bl	8001b98 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d90c      	bls.n	80020d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2220      	movs	r2, #32
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2203      	movs	r2, #3
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e015      	b.n	8002100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1e4      	bne.n	80020ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	223f      	movs	r2, #63	; 0x3f
 80020e8:	409a      	lsls	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d004      	beq.n	8002126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e00c      	b.n	8002140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2205      	movs	r2, #5
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0201 	bic.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002158:	4b8e      	ldr	r3, [pc, #568]	; (8002394 <HAL_DMA_IRQHandler+0x248>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a8e      	ldr	r2, [pc, #568]	; (8002398 <HAL_DMA_IRQHandler+0x24c>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0a9b      	lsrs	r3, r3, #10
 8002164:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002176:	2208      	movs	r2, #8
 8002178:	409a      	lsls	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4013      	ands	r3, r2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01a      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0204 	bic.w	r2, r2, #4
 800219e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a4:	2208      	movs	r2, #8
 80021a6:	409a      	lsls	r2, r3
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	f043 0201 	orr.w	r2, r3, #1
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2201      	movs	r2, #1
 80021be:	409a      	lsls	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d012      	beq.n	80021ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2201      	movs	r2, #1
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	f043 0202 	orr.w	r2, r3, #2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2204      	movs	r2, #4
 80021f4:	409a      	lsls	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d012      	beq.n	8002224 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00b      	beq.n	8002224 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	2204      	movs	r2, #4
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221c:	f043 0204 	orr.w	r2, r3, #4
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2210      	movs	r2, #16
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d043      	beq.n	80022bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d03c      	beq.n	80022bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	2210      	movs	r2, #16
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d018      	beq.n	800228e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d108      	bne.n	800227c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	2b00      	cmp	r3, #0
 8002270:	d024      	beq.n	80022bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
 800227a:	e01f      	b.n	80022bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
 800228c:	e016      	b.n	80022bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0208 	bic.w	r2, r2, #8
 80022aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	2220      	movs	r2, #32
 80022c2:	409a      	lsls	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4013      	ands	r3, r2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 808f 	beq.w	80023ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8087 	beq.w	80023ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e2:	2220      	movs	r2, #32
 80022e4:	409a      	lsls	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d136      	bne.n	8002364 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0216 	bic.w	r2, r2, #22
 8002304:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002314:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d103      	bne.n	8002326 <HAL_DMA_IRQHandler+0x1da>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0208 	bic.w	r2, r2, #8
 8002334:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	223f      	movs	r2, #63	; 0x3f
 800233c:	409a      	lsls	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	2b00      	cmp	r3, #0
 8002358:	d07e      	beq.n	8002458 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
        }
        return;
 8002362:	e079      	b.n	8002458 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d01d      	beq.n	80023ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10d      	bne.n	800239c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	2b00      	cmp	r3, #0
 8002386:	d031      	beq.n	80023ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4798      	blx	r3
 8002390:	e02c      	b.n	80023ec <HAL_DMA_IRQHandler+0x2a0>
 8002392:	bf00      	nop
 8002394:	2000000c 	.word	0x2000000c
 8002398:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4798      	blx	r3
 80023ac:	e01e      	b.n	80023ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10f      	bne.n	80023dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0210 	bic.w	r2, r2, #16
 80023ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d032      	beq.n	800245a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d022      	beq.n	8002446 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2205      	movs	r2, #5
 8002404:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0201 	bic.w	r2, r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3301      	adds	r3, #1
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	429a      	cmp	r2, r3
 8002422:	d307      	bcc.n	8002434 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f2      	bne.n	8002418 <HAL_DMA_IRQHandler+0x2cc>
 8002432:	e000      	b.n	8002436 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002434:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	4798      	blx	r3
 8002456:	e000      	b.n	800245a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002458:	bf00      	nop
    }
  }
}
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800247c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d108      	bne.n	80024a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800249e:	e007      	b.n	80024b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	3b10      	subs	r3, #16
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <DMA_CalcBaseAndBitshift+0x64>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <DMA_CalcBaseAndBitshift+0x68>)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d909      	bls.n	80024fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024f2:	f023 0303 	bic.w	r3, r3, #3
 80024f6:	1d1a      	adds	r2, r3, #4
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58
 80024fc:	e007      	b.n	800250e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002506:	f023 0303 	bic.w	r3, r3, #3
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	aaaaaaab 	.word	0xaaaaaaab
 8002524:	08006ddc 	.word	0x08006ddc

08002528 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d11f      	bne.n	8002582 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d856      	bhi.n	80025f6 <DMA_CheckFifoParam+0xce>
 8002548:	a201      	add	r2, pc, #4	; (adr r2, 8002550 <DMA_CheckFifoParam+0x28>)
 800254a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254e:	bf00      	nop
 8002550:	08002561 	.word	0x08002561
 8002554:	08002573 	.word	0x08002573
 8002558:	08002561 	.word	0x08002561
 800255c:	080025f7 	.word	0x080025f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d046      	beq.n	80025fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002570:	e043      	b.n	80025fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800257a:	d140      	bne.n	80025fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002580:	e03d      	b.n	80025fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258a:	d121      	bne.n	80025d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d837      	bhi.n	8002602 <DMA_CheckFifoParam+0xda>
 8002592:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <DMA_CheckFifoParam+0x70>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025af 	.word	0x080025af
 80025a0:	080025a9 	.word	0x080025a9
 80025a4:	080025c1 	.word	0x080025c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
      break;
 80025ac:	e030      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d025      	beq.n	8002606 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025be:	e022      	b.n	8002606 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025c8:	d11f      	bne.n	800260a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ce:	e01c      	b.n	800260a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d903      	bls.n	80025de <DMA_CheckFifoParam+0xb6>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d003      	beq.n	80025e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025dc:	e018      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      break;
 80025e2:	e015      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00e      	beq.n	800260e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e00b      	b.n	800260e <DMA_CheckFifoParam+0xe6>
      break;
 80025f6:	bf00      	nop
 80025f8:	e00a      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 80025fa:	bf00      	nop
 80025fc:	e008      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 80025fe:	bf00      	nop
 8002600:	e006      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 8002602:	bf00      	nop
 8002604:	e004      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
 8002608:	e002      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;   
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
    }
  } 
  
  return status; 
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop

08002620 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06c      	b.n	800270c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002638:	2b00      	cmp	r3, #0
 800263a:	d106      	bne.n	800264a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2223      	movs	r2, #35	; 0x23
 8002640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7fe fec5 	bl	80013d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <HAL_ETH_Init+0xf4>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a30      	ldr	r2, [pc, #192]	; (8002714 <HAL_ETH_Init+0xf4>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b2e      	ldr	r3, [pc, #184]	; (8002714 <HAL_ETH_Init+0xf4>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002666:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <HAL_ETH_Init+0xf8>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a2b      	ldr	r2, [pc, #172]	; (8002718 <HAL_ETH_Init+0xf8>)
 800266c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002670:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_ETH_Init+0xf8>)
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	4927      	ldr	r1, [pc, #156]	; (8002718 <HAL_ETH_Init+0xf8>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_ETH_Init+0xf8>)
 8002682:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6812      	ldr	r2, [r2, #0]
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800269a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800269c:	f7ff fa7c 	bl	8001b98 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026a2:	e011      	b.n	80026c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80026a4:	f7ff fa78 	bl	8001b98 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026b2:	d909      	bls.n	80026c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2204      	movs	r2, #4
 80026b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	22e0      	movs	r2, #224	; 0xe0
 80026c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e021      	b.n	800270c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e4      	bne.n	80026a4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f958 	bl	8002990 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f9ff 	bl	8002ae4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fa55 	bl	8002b96 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	461a      	mov	r2, r3
 80026f2:	2100      	movs	r1, #0
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f9bd 	bl	8002a74 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2210      	movs	r2, #16
 8002706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40023800 	.word	0x40023800
 8002718:	40013800 	.word	0x40013800

0800271c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4b51      	ldr	r3, [pc, #324]	; (8002878 <ETH_SetMACConfig+0x15c>)
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	7c1b      	ldrb	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <ETH_SetMACConfig+0x28>
 800273e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002742:	e000      	b.n	8002746 <ETH_SetMACConfig+0x2a>
 8002744:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7c5b      	ldrb	r3, [r3, #17]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d102      	bne.n	8002754 <ETH_SetMACConfig+0x38>
 800274e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002752:	e000      	b.n	8002756 <ETH_SetMACConfig+0x3a>
 8002754:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002756:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800275c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	7fdb      	ldrb	r3, [r3, #31]
 8002762:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002764:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800276a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	7f92      	ldrb	r2, [r2, #30]
 8002770:	2a00      	cmp	r2, #0
 8002772:	d102      	bne.n	800277a <ETH_SetMACConfig+0x5e>
 8002774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002778:	e000      	b.n	800277c <ETH_SetMACConfig+0x60>
 800277a:	2200      	movs	r2, #0
                        macconf->Speed |
 800277c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7f1b      	ldrb	r3, [r3, #28]
 8002782:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002784:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800278a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	791b      	ldrb	r3, [r3, #4]
 8002790:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002792:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	f892 2020 	ldrb.w	r2, [r2, #32]
 800279a:	2a00      	cmp	r2, #0
 800279c:	d102      	bne.n	80027a4 <ETH_SetMACConfig+0x88>
 800279e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027a2:	e000      	b.n	80027a6 <ETH_SetMACConfig+0x8a>
 80027a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	7bdb      	ldrb	r3, [r3, #15]
 80027ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80027b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80027bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027be:	4313      	orrs	r3, r2
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d6:	2001      	movs	r0, #1
 80027d8:	f7ff f9ea 	bl	8001bb0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002802:	2a00      	cmp	r2, #0
 8002804:	d101      	bne.n	800280a <ETH_SetMACConfig+0xee>
 8002806:	2280      	movs	r2, #128	; 0x80
 8002808:	e000      	b.n	800280c <ETH_SetMACConfig+0xf0>
 800280a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800280c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002812:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800281a:	2a01      	cmp	r2, #1
 800281c:	d101      	bne.n	8002822 <ETH_SetMACConfig+0x106>
 800281e:	2208      	movs	r2, #8
 8002820:	e000      	b.n	8002824 <ETH_SetMACConfig+0x108>
 8002822:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002824:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800282c:	2a01      	cmp	r2, #1
 800282e:	d101      	bne.n	8002834 <ETH_SetMACConfig+0x118>
 8002830:	2204      	movs	r2, #4
 8002832:	e000      	b.n	8002836 <ETH_SetMACConfig+0x11a>
 8002834:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002836:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800283e:	2a01      	cmp	r2, #1
 8002840:	d101      	bne.n	8002846 <ETH_SetMACConfig+0x12a>
 8002842:	2202      	movs	r2, #2
 8002844:	e000      	b.n	8002848 <ETH_SetMACConfig+0x12c>
 8002846:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002848:	4313      	orrs	r3, r2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002860:	2001      	movs	r0, #1
 8002862:	f7ff f9a5 	bl	8001bb0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	619a      	str	r2, [r3, #24]
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	ff20810f 	.word	0xff20810f

0800287c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4b3d      	ldr	r3, [pc, #244]	; (800298c <ETH_SetDMAConfig+0x110>)
 8002896:	4013      	ands	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	7b1b      	ldrb	r3, [r3, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d102      	bne.n	80028a8 <ETH_SetDMAConfig+0x2c>
 80028a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80028a6:	e000      	b.n	80028aa <ETH_SetDMAConfig+0x2e>
 80028a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	7b5b      	ldrb	r3, [r3, #13]
 80028ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	7f52      	ldrb	r2, [r2, #29]
 80028b6:	2a00      	cmp	r2, #0
 80028b8:	d102      	bne.n	80028c0 <ETH_SetDMAConfig+0x44>
 80028ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028be:	e000      	b.n	80028c2 <ETH_SetDMAConfig+0x46>
 80028c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	7b9b      	ldrb	r3, [r3, #14]
 80028c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	7f1b      	ldrb	r3, [r3, #28]
 80028d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	7f9b      	ldrb	r3, [r3, #30]
 80028de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002912:	2001      	movs	r0, #1
 8002914:	f7ff f94c 	bl	8001bb0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002920:	461a      	mov	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	791b      	ldrb	r3, [r3, #4]
 800292a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002930:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002936:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800293c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002944:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002946:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800294e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002954:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800295e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002962:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002970:	2001      	movs	r0, #1
 8002972:	f7ff f91d 	bl	8001bb0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	f8de3f23 	.word	0xf8de3f23

08002990 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b0a6      	sub	sp, #152	; 0x98
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002998:	2301      	movs	r3, #1
 800299a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80029a4:	2300      	movs	r3, #0
 80029a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029cc:	2300      	movs	r3, #0
 80029ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a08:	4619      	mov	r1, r3
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fe86 	bl	800271c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a14:	2301      	movs	r3, #1
 8002a16:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a44:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a4a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a50:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff ff08 	bl	800287c <ETH_SetDMAConfig>
}
 8002a6c:	bf00      	nop
 8002a6e:	3798      	adds	r7, #152	; 0x98
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3305      	adds	r3, #5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	3204      	adds	r2, #4
 8002a8c:	7812      	ldrb	r2, [r2, #0]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <ETH_MACAddressConfig+0x68>)
 8002a96:	4413      	add	r3, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	061a      	lsls	r2, r3, #24
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	7812      	ldrb	r2, [r2, #0]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <ETH_MACAddressConfig+0x6c>)
 8002ac6:	4413      	add	r3, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	6013      	str	r3, [r2, #0]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40028040 	.word	0x40028040
 8002ae0:	40028044 	.word	0x40028044

08002ae4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e03e      	b.n	8002b70 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68d9      	ldr	r1, [r3, #12]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	3206      	adds	r2, #6
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d80c      	bhi.n	8002b54 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68d9      	ldr	r1, [r3, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	4613      	mov	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	440b      	add	r3, r1
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	e004      	b.n	8002b5e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d9bd      	bls.n	8002af2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b88:	611a      	str	r2, [r3, #16]
}
 8002b8a:	bf00      	nop
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e046      	b.n	8002c32 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6919      	ldr	r1, [r3, #16]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002be0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002be8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	3212      	adds	r2, #18
 8002bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d80c      	bhi.n	8002c22 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	e004      	b.n	8002c2c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d9b5      	bls.n	8002ba4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691a      	ldr	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c62:	60da      	str	r2, [r3, #12]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c86:	2300      	movs	r3, #0
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	e177      	b.n	8002f7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	f040 8166 	bne.w	8002f76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d005      	beq.n	8002cc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d130      	bne.n	8002d24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	2203      	movs	r2, #3
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 0201 	and.w	r2, r3, #1
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d017      	beq.n	8002d60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d123      	bne.n	8002db4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	69b9      	ldr	r1, [r7, #24]
 8002db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0203 	and.w	r2, r3, #3
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80c0 	beq.w	8002f76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b66      	ldr	r3, [pc, #408]	; (8002f94 <HAL_GPIO_Init+0x324>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a65      	ldr	r2, [pc, #404]	; (8002f94 <HAL_GPIO_Init+0x324>)
 8002e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b63      	ldr	r3, [pc, #396]	; (8002f94 <HAL_GPIO_Init+0x324>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e12:	4a61      	ldr	r2, [pc, #388]	; (8002f98 <HAL_GPIO_Init+0x328>)
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	089b      	lsrs	r3, r3, #2
 8002e18:	3302      	adds	r3, #2
 8002e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a58      	ldr	r2, [pc, #352]	; (8002f9c <HAL_GPIO_Init+0x32c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d037      	beq.n	8002eae <HAL_GPIO_Init+0x23e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <HAL_GPIO_Init+0x330>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d031      	beq.n	8002eaa <HAL_GPIO_Init+0x23a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a56      	ldr	r2, [pc, #344]	; (8002fa4 <HAL_GPIO_Init+0x334>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d02b      	beq.n	8002ea6 <HAL_GPIO_Init+0x236>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a55      	ldr	r2, [pc, #340]	; (8002fa8 <HAL_GPIO_Init+0x338>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d025      	beq.n	8002ea2 <HAL_GPIO_Init+0x232>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a54      	ldr	r2, [pc, #336]	; (8002fac <HAL_GPIO_Init+0x33c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01f      	beq.n	8002e9e <HAL_GPIO_Init+0x22e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a53      	ldr	r2, [pc, #332]	; (8002fb0 <HAL_GPIO_Init+0x340>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d019      	beq.n	8002e9a <HAL_GPIO_Init+0x22a>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_GPIO_Init+0x344>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_GPIO_Init+0x226>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a51      	ldr	r2, [pc, #324]	; (8002fb8 <HAL_GPIO_Init+0x348>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d00d      	beq.n	8002e92 <HAL_GPIO_Init+0x222>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a50      	ldr	r2, [pc, #320]	; (8002fbc <HAL_GPIO_Init+0x34c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d007      	beq.n	8002e8e <HAL_GPIO_Init+0x21e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a4f      	ldr	r2, [pc, #316]	; (8002fc0 <HAL_GPIO_Init+0x350>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_GPIO_Init+0x21a>
 8002e86:	2309      	movs	r3, #9
 8002e88:	e012      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e8a:	230a      	movs	r3, #10
 8002e8c:	e010      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e8e:	2308      	movs	r3, #8
 8002e90:	e00e      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e92:	2307      	movs	r3, #7
 8002e94:	e00c      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e96:	2306      	movs	r3, #6
 8002e98:	e00a      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e008      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002e9e:	2304      	movs	r3, #4
 8002ea0:	e006      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e004      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <HAL_GPIO_Init+0x240>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	f002 0203 	and.w	r2, r2, #3
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	4093      	lsls	r3, r2
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec0:	4935      	ldr	r1, [pc, #212]	; (8002f98 <HAL_GPIO_Init+0x328>)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	089b      	lsrs	r3, r3, #2
 8002ec6:	3302      	adds	r3, #2
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ece:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ef2:	4a34      	ldr	r2, [pc, #208]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ef8:	4b32      	ldr	r3, [pc, #200]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f1c:	4a29      	ldr	r2, [pc, #164]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f22:	4b28      	ldr	r3, [pc, #160]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f46:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f70:	4a14      	ldr	r2, [pc, #80]	; (8002fc4 <HAL_GPIO_Init+0x354>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	f67f ae84 	bls.w	8002c8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40020800 	.word	0x40020800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40021400 	.word	0x40021400
 8002fb4:	40021800 	.word	0x40021800
 8002fb8:	40021c00 	.word	0x40021c00
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40022400 	.word	0x40022400
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fd8:	787b      	ldrb	r3, [r7, #1]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe4:	e003      	b.n	8002fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	619a      	str	r2, [r3, #24]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003006:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	4013      	ands	r3, r2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d006      	beq.n	8003020 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003012:	4a05      	ldr	r2, [pc, #20]	; (8003028 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe f8a8 	bl	8001170 <HAL_GPIO_EXTI_Callback>
  }
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40013c00 	.word	0x40013c00

0800302c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af02      	add	r7, sp, #8
 8003032:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e101      	b.n	8003242 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7fe fc3d 	bl	80018d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2203      	movs	r2, #3
 8003062:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306c:	d102      	bne.n	8003074 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f003 fba7 	bl	80067cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7c1a      	ldrb	r2, [r3, #16]
 8003086:	f88d 2000 	strb.w	r2, [sp]
 800308a:	3304      	adds	r3, #4
 800308c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800308e:	f003 fb39 	bl	8006704 <USB_CoreInit>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0ce      	b.n	8003242 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fb9f 	bl	80067ee <USB_SetCurrentMode>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0bf      	b.n	8003242 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e04a      	b.n	800315e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030c8:	7bfa      	ldrb	r2, [r7, #15]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3315      	adds	r3, #21
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3314      	adds	r3, #20
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	b298      	uxth	r0, r3
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	332e      	adds	r3, #46	; 0x2e
 8003104:	4602      	mov	r2, r0
 8003106:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003108:	7bfa      	ldrb	r2, [r7, #15]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	3318      	adds	r3, #24
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	331c      	adds	r3, #28
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3320      	adds	r3, #32
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003144:	7bfa      	ldrb	r2, [r7, #15]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3324      	adds	r3, #36	; 0x24
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	3301      	adds	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	791b      	ldrb	r3, [r3, #4]
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3af      	bcc.n	80030c8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e044      	b.n	80031f8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800319a:	7bfa      	ldrb	r2, [r7, #15]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031b0:	7bfa      	ldrb	r2, [r7, #15]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4413      	add	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031c6:	7bfa      	ldrb	r2, [r7, #15]
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	4613      	mov	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	440b      	add	r3, r1
 80031d4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	3301      	adds	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	791b      	ldrb	r3, [r3, #4]
 80031fc:	7bfa      	ldrb	r2, [r7, #15]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d3b5      	bcc.n	800316e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	7c1a      	ldrb	r2, [r3, #16]
 800320a:	f88d 2000 	strb.w	r2, [sp]
 800320e:	3304      	adds	r3, #4
 8003210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003212:	f003 fb39 	bl	8006888 <USB_DevInit>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e00c      	b.n	8003242 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fd01 	bl	8006c42 <USB_DevDisconnect>

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e267      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d075      	beq.n	8003356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800326a:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b04      	cmp	r3, #4
 8003274:	d00c      	beq.n	8003290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003276:	4b85      	ldr	r3, [pc, #532]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800327e:	2b08      	cmp	r3, #8
 8003280:	d112      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b82      	ldr	r3, [pc, #520]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800328e:	d10b      	bne.n	80032a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	4b7e      	ldr	r3, [pc, #504]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d05b      	beq.n	8003354 <HAL_RCC_OscConfig+0x108>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d157      	bne.n	8003354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e242      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d106      	bne.n	80032c0 <HAL_RCC_OscConfig+0x74>
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a75      	ldr	r2, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e01d      	b.n	80032fc <HAL_RCC_OscConfig+0xb0>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032c8:	d10c      	bne.n	80032e4 <HAL_RCC_OscConfig+0x98>
 80032ca:	4b70      	ldr	r3, [pc, #448]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6f      	ldr	r2, [pc, #444]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6c      	ldr	r2, [pc, #432]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	e00b      	b.n	80032fc <HAL_RCC_OscConfig+0xb0>
 80032e4:	4b69      	ldr	r3, [pc, #420]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a68      	ldr	r2, [pc, #416]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b66      	ldr	r3, [pc, #408]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a65      	ldr	r2, [pc, #404]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d013      	beq.n	800332c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe fc48 	bl	8001b98 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800330c:	f7fe fc44 	bl	8001b98 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e207      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331e:	4b5b      	ldr	r3, [pc, #364]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0xc0>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fc34 	bl	8001b98 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003334:	f7fe fc30 	bl	8001b98 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b64      	cmp	r3, #100	; 0x64
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e1f3      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003346:	4b51      	ldr	r3, [pc, #324]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0xe8>
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d063      	beq.n	800342a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003362:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800336e:	4b47      	ldr	r3, [pc, #284]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003376:	2b08      	cmp	r3, #8
 8003378:	d11c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b44      	ldr	r3, [pc, #272]	; (800348c <HAL_RCC_OscConfig+0x240>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d116      	bne.n	80033b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003386:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_RCC_OscConfig+0x152>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e1c7      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4937      	ldr	r1, [pc, #220]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033b2:	e03a      	b.n	800342a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d020      	beq.n	80033fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_RCC_OscConfig+0x244>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fe fbe9 	bl	8001b98 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033ca:	f7fe fbe5 	bl	8001b98 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1a8      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f0      	beq.n	80033ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e8:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4925      	ldr	r1, [pc, #148]	; (800348c <HAL_RCC_OscConfig+0x240>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <HAL_RCC_OscConfig+0x244>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003404:	f7fe fbc8 	bl	8001b98 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340c:	f7fe fbc4 	bl	8001b98 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e187      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800341e:	4b1b      	ldr	r3, [pc, #108]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d036      	beq.n	80034a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_RCC_OscConfig+0x248>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fe fba8 	bl	8001b98 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800344c:	f7fe fba4 	bl	8001b98 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e167      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_RCC_OscConfig+0x240>)
 8003460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x200>
 800346a:	e01b      	b.n	80034a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_OscConfig+0x248>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fe fb91 	bl	8001b98 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003478:	e00e      	b.n	8003498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800347a:	f7fe fb8d 	bl	8001b98 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d907      	bls.n	8003498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e150      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
 800348c:	40023800 	.word	0x40023800
 8003490:	42470000 	.word	0x42470000
 8003494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003498:	4b88      	ldr	r3, [pc, #544]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 800349a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ea      	bne.n	800347a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 8097 	beq.w	80035e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b6:	4b81      	ldr	r3, [pc, #516]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10f      	bne.n	80034e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	4b7d      	ldr	r3, [pc, #500]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	4a7c      	ldr	r2, [pc, #496]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80034cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d0:	6413      	str	r3, [r2, #64]	; 0x40
 80034d2:	4b7a      	ldr	r3, [pc, #488]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034de:	2301      	movs	r3, #1
 80034e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e2:	4b77      	ldr	r3, [pc, #476]	; (80036c0 <HAL_RCC_OscConfig+0x474>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d118      	bne.n	8003520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ee:	4b74      	ldr	r3, [pc, #464]	; (80036c0 <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a73      	ldr	r2, [pc, #460]	; (80036c0 <HAL_RCC_OscConfig+0x474>)
 80034f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034fa:	f7fe fb4d 	bl	8001b98 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003502:	f7fe fb49 	bl	8001b98 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e10c      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCC_OscConfig+0x474>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0f0      	beq.n	8003502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x2ea>
 8003528:	4b64      	ldr	r3, [pc, #400]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 800352a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352c:	4a63      	ldr	r2, [pc, #396]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6713      	str	r3, [r2, #112]	; 0x70
 8003534:	e01c      	b.n	8003570 <HAL_RCC_OscConfig+0x324>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x30c>
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	4a5e      	ldr	r2, [pc, #376]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003544:	f043 0304 	orr.w	r3, r3, #4
 8003548:	6713      	str	r3, [r2, #112]	; 0x70
 800354a:	4b5c      	ldr	r3, [pc, #368]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a5b      	ldr	r2, [pc, #364]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0x324>
 8003558:	4b58      	ldr	r3, [pc, #352]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 800355a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355c:	4a57      	ldr	r2, [pc, #348]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	6713      	str	r3, [r2, #112]	; 0x70
 8003564:	4b55      	ldr	r3, [pc, #340]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a54      	ldr	r2, [pc, #336]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0304 	bic.w	r3, r3, #4
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d015      	beq.n	80035a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003578:	f7fe fb0e 	bl	8001b98 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800357e:	e00a      	b.n	8003596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003580:	f7fe fb0a 	bl	8001b98 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f241 3288 	movw	r2, #5000	; 0x1388
 800358e:	4293      	cmp	r3, r2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0cb      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	4b49      	ldr	r3, [pc, #292]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0ee      	beq.n	8003580 <HAL_RCC_OscConfig+0x334>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fe faf8 	bl	8001b98 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ac:	f7fe faf4 	bl	8001b98 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0b5      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c2:	4b3e      	ldr	r3, [pc, #248]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ee      	bne.n	80035ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d4:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4a38      	ldr	r2, [pc, #224]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80035da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a1 	beq.w	800372c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035ea:	4b34      	ldr	r3, [pc, #208]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d05c      	beq.n	80036b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d141      	bne.n	8003682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fe:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_RCC_OscConfig+0x478>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fac8 	bl	8001b98 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360c:	f7fe fac4 	bl	8001b98 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e087      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	3b01      	subs	r3, #1
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	491b      	ldr	r1, [pc, #108]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x478>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fe fa9d 	bl	8001b98 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003662:	f7fe fa99 	bl	8001b98 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e05c      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x416>
 8003680:	e054      	b.n	800372c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_RCC_OscConfig+0x478>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe fa86 	bl	8001b98 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003690:	f7fe fa82 	bl	8001b98 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e045      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_OscConfig+0x470>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x444>
 80036ae:	e03d      	b.n	800372c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e038      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40007000 	.word	0x40007000
 80036c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x4ec>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d028      	beq.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d121      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d11a      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d107      	bne.n	8003728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800

0800373c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0cc      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003750:	4b68      	ldr	r3, [pc, #416]	; (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d90c      	bls.n	8003778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b65      	ldr	r3, [pc, #404]	; (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b63      	ldr	r3, [pc, #396]	; (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0b8      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d005      	beq.n	800379c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003790:	4b59      	ldr	r3, [pc, #356]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a58      	ldr	r2, [pc, #352]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a8:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4a52      	ldr	r2, [pc, #328]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b4:	4b50      	ldr	r3, [pc, #320]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	494d      	ldr	r1, [pc, #308]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d044      	beq.n	800385c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d107      	bne.n	80037ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037da:	4b47      	ldr	r3, [pc, #284]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d119      	bne.n	800381a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e07f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d003      	beq.n	80037fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fa:	4b3f      	ldr	r3, [pc, #252]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e06f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380a:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e067      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800381a:	4b37      	ldr	r3, [pc, #220]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f023 0203 	bic.w	r2, r3, #3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	4934      	ldr	r1, [pc, #208]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	4313      	orrs	r3, r2
 800382a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800382c:	f7fe f9b4 	bl	8001b98 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003832:	e00a      	b.n	800384a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003834:	f7fe f9b0 	bl	8001b98 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003842:	4293      	cmp	r3, r2
 8003844:	d901      	bls.n	800384a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e04f      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384a:	4b2b      	ldr	r3, [pc, #172]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 020c 	and.w	r2, r3, #12
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	429a      	cmp	r2, r3
 800385a:	d1eb      	bne.n	8003834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d20c      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e032      	b.n	80038ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003890:	4b19      	ldr	r3, [pc, #100]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	4916      	ldr	r1, [pc, #88]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d009      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ae:	4b12      	ldr	r3, [pc, #72]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	490e      	ldr	r1, [pc, #56]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038c2:	f000 f821 	bl	8003908 <HAL_RCC_GetSysClockFreq>
 80038c6:	4602      	mov	r2, r0
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	490a      	ldr	r1, [pc, #40]	; (80038fc <HAL_RCC_ClockConfig+0x1c0>)
 80038d4:	5ccb      	ldrb	r3, [r1, r3]
 80038d6:	fa22 f303 	lsr.w	r3, r2, r3
 80038da:	4a09      	ldr	r2, [pc, #36]	; (8003900 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1c8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe f914 	bl	8001b10 <HAL_InitTick>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023c00 	.word	0x40023c00
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08006dc4 	.word	0x08006dc4
 8003900:	2000000c 	.word	0x2000000c
 8003904:	20000010 	.word	0x20000010

08003908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800390c:	b094      	sub	sp, #80	; 0x50
 800390e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	647b      	str	r3, [r7, #68]	; 0x44
 8003914:	2300      	movs	r3, #0
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	2300      	movs	r3, #0
 800391a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003920:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	2b08      	cmp	r3, #8
 800392a:	d00d      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x40>
 800392c:	2b08      	cmp	r3, #8
 800392e:	f200 80e1 	bhi.w	8003af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x34>
 8003936:	2b04      	cmp	r3, #4
 8003938:	d003      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x3a>
 800393a:	e0db      	b.n	8003af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800393c:	4b73      	ldr	r3, [pc, #460]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800393e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003940:	e0db      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003942:	4b73      	ldr	r3, [pc, #460]	; (8003b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8003944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003946:	e0d8      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003948:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003950:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003952:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d063      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800395e:	4b6a      	ldr	r3, [pc, #424]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	099b      	lsrs	r3, r3, #6
 8003964:	2200      	movs	r2, #0
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
 8003968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
 8003972:	2300      	movs	r3, #0
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
 8003976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800397a:	4622      	mov	r2, r4
 800397c:	462b      	mov	r3, r5
 800397e:	f04f 0000 	mov.w	r0, #0
 8003982:	f04f 0100 	mov.w	r1, #0
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800398c:	0150      	lsls	r0, r2, #5
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4621      	mov	r1, r4
 8003994:	1a51      	subs	r1, r2, r1
 8003996:	6139      	str	r1, [r7, #16]
 8003998:	4629      	mov	r1, r5
 800399a:	eb63 0301 	sbc.w	r3, r3, r1
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039ac:	4659      	mov	r1, fp
 80039ae:	018b      	lsls	r3, r1, #6
 80039b0:	4651      	mov	r1, sl
 80039b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039b6:	4651      	mov	r1, sl
 80039b8:	018a      	lsls	r2, r1, #6
 80039ba:	4651      	mov	r1, sl
 80039bc:	ebb2 0801 	subs.w	r8, r2, r1
 80039c0:	4659      	mov	r1, fp
 80039c2:	eb63 0901 	sbc.w	r9, r3, r1
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039da:	4690      	mov	r8, r2
 80039dc:	4699      	mov	r9, r3
 80039de:	4623      	mov	r3, r4
 80039e0:	eb18 0303 	adds.w	r3, r8, r3
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	462b      	mov	r3, r5
 80039e8:	eb49 0303 	adc.w	r3, r9, r3
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039fa:	4629      	mov	r1, r5
 80039fc:	024b      	lsls	r3, r1, #9
 80039fe:	4621      	mov	r1, r4
 8003a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a04:	4621      	mov	r1, r4
 8003a06:	024a      	lsls	r2, r1, #9
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0e:	2200      	movs	r2, #0
 8003a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a18:	f7fc fbf0 	bl	80001fc <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4613      	mov	r3, r2
 8003a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a24:	e058      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	099b      	lsrs	r3, r3, #6
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	4611      	mov	r1, r2
 8003a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a36:	623b      	str	r3, [r7, #32]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a40:	4642      	mov	r2, r8
 8003a42:	464b      	mov	r3, r9
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f04f 0100 	mov.w	r1, #0
 8003a4c:	0159      	lsls	r1, r3, #5
 8003a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a52:	0150      	lsls	r0, r2, #5
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a5e:	4649      	mov	r1, r9
 8003a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a78:	ebb2 040a 	subs.w	r4, r2, sl
 8003a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	00eb      	lsls	r3, r5, #3
 8003a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a8e:	00e2      	lsls	r2, r4, #3
 8003a90:	4614      	mov	r4, r2
 8003a92:	461d      	mov	r5, r3
 8003a94:	4643      	mov	r3, r8
 8003a96:	18e3      	adds	r3, r4, r3
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	464b      	mov	r3, r9
 8003a9c:	eb45 0303 	adc.w	r3, r5, r3
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aae:	4629      	mov	r1, r5
 8003ab0:	028b      	lsls	r3, r1, #10
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab8:	4621      	mov	r1, r4
 8003aba:	028a      	lsls	r2, r1, #10
 8003abc:	4610      	mov	r0, r2
 8003abe:	4619      	mov	r1, r3
 8003ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	61fa      	str	r2, [r7, #28]
 8003ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003acc:	f7fc fb96 	bl	80001fc <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	0c1b      	lsrs	r3, r3, #16
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003af2:	e002      	b.n	8003afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8003af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3750      	adds	r7, #80	; 0x50
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b06:	bf00      	nop
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	007a1200 	.word	0x007a1200

08003b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	2000000c 	.word	0x2000000c

08003b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b30:	f7ff fff0 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	0a9b      	lsrs	r3, r3, #10
 8003b3c:	f003 0307 	and.w	r3, r3, #7
 8003b40:	4903      	ldr	r1, [pc, #12]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b42:	5ccb      	ldrb	r3, [r1, r3]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08006dd4 	.word	0x08006dd4

08003b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b58:	f7ff ffdc 	bl	8003b14 <HAL_RCC_GetHCLKFreq>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	0b5b      	lsrs	r3, r3, #13
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	4903      	ldr	r1, [pc, #12]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6a:	5ccb      	ldrb	r3, [r1, r3]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40023800 	.word	0x40023800
 8003b78:	08006dd4 	.word	0x08006dd4

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e041      	b.n	8003c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fcdc 	bl	8001560 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fe54 	bl	8004868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e04e      	b.n	8003cd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a23      	ldr	r2, [pc, #140]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d01d      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d018      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d013      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <HAL_TIM_Base_Start_IT+0xd0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00e      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1b      	ldr	r2, [pc, #108]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d004      	beq.n	8003c9c <HAL_TIM_Base_Start_IT+0x80>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d111      	bne.n	8003cc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d010      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cbe:	e007      	b.n	8003cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40010400 	.word	0x40010400
 8003cf4:	40014000 	.word	0x40014000
 8003cf8:	40001800 	.word	0x40001800

08003cfc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6a1a      	ldr	r2, [r3, #32]
 8003d1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10f      	bne.n	8003d44 <HAL_TIM_Base_Stop_IT+0x48>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	f240 4344 	movw	r3, #1092	; 0x444
 8003d2e:	4013      	ands	r3, r2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <HAL_TIM_Base_Stop_IT+0x48>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e041      	b.n	8003df0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f839 	bl	8003df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 fd65 	bl	8004868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_TIM_PWM_Start+0x24>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e022      	b.n	8003e76 <HAL_TIM_PWM_Start+0x6a>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d109      	bne.n	8003e4a <HAL_TIM_PWM_Start+0x3e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	bf14      	ite	ne
 8003e42:	2301      	movne	r3, #1
 8003e44:	2300      	moveq	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	e015      	b.n	8003e76 <HAL_TIM_PWM_Start+0x6a>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d109      	bne.n	8003e64 <HAL_TIM_PWM_Start+0x58>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	bf14      	ite	ne
 8003e5c:	2301      	movne	r3, #1
 8003e5e:	2300      	moveq	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	e008      	b.n	8003e76 <HAL_TIM_PWM_Start+0x6a>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e07c      	b.n	8003f78 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0x82>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e8c:	e013      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xaa>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0x92>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e9c:	e00b      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xaa>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b08      	cmp	r3, #8
 8003ea2:	d104      	bne.n	8003eae <HAL_TIM_PWM_Start+0xa2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eac:	e003      	b.n	8003eb6 <HAL_TIM_PWM_Start+0xaa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	6839      	ldr	r1, [r7, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 ffc8 	bl	8004e54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	; (8003f80 <HAL_TIM_PWM_Start+0x174>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d004      	beq.n	8003ed8 <HAL_TIM_PWM_Start+0xcc>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <HAL_TIM_PWM_Start+0x178>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <HAL_TIM_PWM_Start+0xd0>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <HAL_TIM_PWM_Start+0xd2>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d007      	beq.n	8003ef2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <HAL_TIM_PWM_Start+0x174>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d022      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x136>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f04:	d01d      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x136>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <HAL_TIM_PWM_Start+0x17c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d018      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x136>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1d      	ldr	r2, [pc, #116]	; (8003f8c <HAL_TIM_PWM_Start+0x180>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x136>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_TIM_PWM_Start+0x184>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00e      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x136>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <HAL_TIM_PWM_Start+0x178>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d009      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x136>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_TIM_PWM_Start+0x188>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_TIM_PWM_Start+0x136>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <HAL_TIM_PWM_Start+0x18c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d111      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b06      	cmp	r3, #6
 8003f52:	d010      	beq.n	8003f76 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f64:	e007      	b.n	8003f76 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40010400 	.word	0x40010400
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40001800 	.word	0x40001800

08003f9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	6839      	ldr	r1, [r7, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 ff50 	bl	8004e54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <HAL_TIM_PWM_Stop+0xd8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_PWM_Stop+0x2c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <HAL_TIM_PWM_Stop+0xdc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIM_PWM_Stop+0x30>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_TIM_PWM_Stop+0x32>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d017      	beq.n	8004002 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a1a      	ldr	r2, [r3, #32]
 8003fd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fdc:	4013      	ands	r3, r2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10f      	bne.n	8004002 <HAL_TIM_PWM_Stop+0x66>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	f240 4344 	movw	r3, #1092	; 0x444
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <HAL_TIM_PWM_Stop+0x66>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6a1a      	ldr	r2, [r3, #32]
 8004008:	f241 1311 	movw	r3, #4369	; 0x1111
 800400c:	4013      	ands	r3, r2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10f      	bne.n	8004032 <HAL_TIM_PWM_Stop+0x96>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	f240 4344 	movw	r3, #1092	; 0x444
 800401c:	4013      	ands	r3, r2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d107      	bne.n	8004032 <HAL_TIM_PWM_Stop+0x96>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <HAL_TIM_PWM_Stop+0xa6>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004040:	e013      	b.n	800406a <HAL_TIM_PWM_Stop+0xce>
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b04      	cmp	r3, #4
 8004046:	d104      	bne.n	8004052 <HAL_TIM_PWM_Stop+0xb6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004050:	e00b      	b.n	800406a <HAL_TIM_PWM_Stop+0xce>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b08      	cmp	r3, #8
 8004056:	d104      	bne.n	8004062 <HAL_TIM_PWM_Stop+0xc6>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004060:	e003      	b.n	800406a <HAL_TIM_PWM_Stop+0xce>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40010000 	.word	0x40010000
 8004078:	40010400 	.word	0x40010400

0800407c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e097      	b.n	80041c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d106      	bne.n	80040aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7fd fa83 	bl	80015b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c0:	f023 0307 	bic.w	r3, r3, #7
 80040c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f000 fbc9 	bl	8004868 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	4313      	orrs	r3, r2
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800411c:	f023 030c 	bic.w	r3, r3, #12
 8004120:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68da      	ldr	r2, [r3, #12]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	021b      	lsls	r3, r3, #8
 8004138:	4313      	orrs	r3, r2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	011a      	lsls	r2, r3, #4
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	031b      	lsls	r3, r3, #12
 800414c:	4313      	orrs	r3, r2
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	4313      	orrs	r3, r2
 8004152:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800415a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	4313      	orrs	r3, r2
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d110      	bne.n	800421a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d102      	bne.n	8004204 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041fe:	7b7b      	ldrb	r3, [r7, #13]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d001      	beq.n	8004208 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e089      	b.n	800431c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004218:	e031      	b.n	800427e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d110      	bne.n	8004242 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004220:	7bbb      	ldrb	r3, [r7, #14]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004226:	7b3b      	ldrb	r3, [r7, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e075      	b.n	800431c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004240:	e01d      	b.n	800427e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d108      	bne.n	800425a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004248:	7bbb      	ldrb	r3, [r7, #14]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800424e:	7b7b      	ldrb	r3, [r7, #13]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d102      	bne.n	800425a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004254:	7b3b      	ldrb	r3, [r7, #12]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d001      	beq.n	800425e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e05e      	b.n	800431c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b04      	cmp	r3, #4
 8004288:	d010      	beq.n	80042ac <HAL_TIM_Encoder_Start_IT+0xe4>
 800428a:	e01f      	b.n	80042cc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2201      	movs	r2, #1
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fddd 	bl	8004e54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0202 	orr.w	r2, r2, #2
 80042a8:	60da      	str	r2, [r3, #12]
      break;
 80042aa:	e02e      	b.n	800430a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2201      	movs	r2, #1
 80042b2:	2104      	movs	r1, #4
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fdcd 	bl	8004e54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f042 0204 	orr.w	r2, r2, #4
 80042c8:	60da      	str	r2, [r3, #12]
      break;
 80042ca:	e01e      	b.n	800430a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2201      	movs	r2, #1
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fdbd 	bl	8004e54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2201      	movs	r2, #1
 80042e0:	2104      	movs	r1, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fdb6 	bl	8004e54 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0202 	orr.w	r2, r2, #2
 80042f6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f042 0204 	orr.w	r2, r2, #4
 8004306:	60da      	str	r2, [r3, #12]
      break;
 8004308:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0201 	orr.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d020      	beq.n	8004388 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01b      	beq.n	8004388 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0202 	mvn.w	r2, #2
 8004358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d003      	beq.n	8004376 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fa5b 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 8004374:	e005      	b.n	8004382 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa4d 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fa5e 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b00      	cmp	r3, #0
 8004390:	d020      	beq.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f003 0304 	and.w	r3, r3, #4
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0204 	mvn.w	r2, #4
 80043a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa35 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 80043c0:	e005      	b.n	80043ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa27 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fa38 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d020      	beq.n	8004420 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01b      	beq.n	8004420 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0208 	mvn.w	r2, #8
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2204      	movs	r2, #4
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa0f 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa01 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa12 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f003 0310 	and.w	r3, r3, #16
 8004426:	2b00      	cmp	r3, #0
 8004428:	d020      	beq.n	800446c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01b      	beq.n	800446c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0210 	mvn.w	r2, #16
 800443c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2208      	movs	r2, #8
 8004442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9e9 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 8004458:	e005      	b.n	8004466 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9db 	bl	8004816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f9ec 	bl	800483e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00c      	beq.n	8004490 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d007      	beq.n	8004490 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0201 	mvn.w	r2, #1
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc ff00 	bl	8001290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00c      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fdce 	bl	8005050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00c      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f9bd 	bl	8004852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0220 	mvn.w	r2, #32
 80044f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fda0 	bl	800503c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800451e:	2302      	movs	r3, #2
 8004520:	e0ae      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	f200 809f 	bhi.w	8004670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004532:	a201      	add	r2, pc, #4	; (adr r2, 8004538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004538:	0800456d 	.word	0x0800456d
 800453c:	08004671 	.word	0x08004671
 8004540:	08004671 	.word	0x08004671
 8004544:	08004671 	.word	0x08004671
 8004548:	080045ad 	.word	0x080045ad
 800454c:	08004671 	.word	0x08004671
 8004550:	08004671 	.word	0x08004671
 8004554:	08004671 	.word	0x08004671
 8004558:	080045ef 	.word	0x080045ef
 800455c:	08004671 	.word	0x08004671
 8004560:	08004671 	.word	0x08004671
 8004564:	08004671 	.word	0x08004671
 8004568:	0800462f 	.word	0x0800462f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fa24 	bl	80049c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699a      	ldr	r2, [r3, #24]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0208 	orr.w	r2, r2, #8
 8004586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6999      	ldr	r1, [r3, #24]
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	619a      	str	r2, [r3, #24]
      break;
 80045aa:	e064      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fa74 	bl	8004aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699a      	ldr	r2, [r3, #24]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6999      	ldr	r1, [r3, #24]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	021a      	lsls	r2, r3, #8
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	619a      	str	r2, [r3, #24]
      break;
 80045ec:	e043      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68b9      	ldr	r1, [r7, #8]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fac9 	bl	8004b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0208 	orr.w	r2, r2, #8
 8004608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0204 	bic.w	r2, r2, #4
 8004618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69d9      	ldr	r1, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	61da      	str	r2, [r3, #28]
      break;
 800462c:	e023      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fb1d 	bl	8004c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	69da      	ldr	r2, [r3, #28]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	021a      	lsls	r2, r3, #8
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	61da      	str	r2, [r3, #28]
      break;
 800466e:	e002      	b.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
      break;
 8004674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800467e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_ConfigClockSource+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0b4      	b.n	800480e <HAL_TIM_ConfigClockSource+0x186>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046dc:	d03e      	beq.n	800475c <HAL_TIM_ConfigClockSource+0xd4>
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e2:	f200 8087 	bhi.w	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	f000 8086 	beq.w	80047fa <HAL_TIM_ConfigClockSource+0x172>
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d87f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046f4:	2b70      	cmp	r3, #112	; 0x70
 80046f6:	d01a      	beq.n	800472e <HAL_TIM_ConfigClockSource+0xa6>
 80046f8:	2b70      	cmp	r3, #112	; 0x70
 80046fa:	d87b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 80046fc:	2b60      	cmp	r3, #96	; 0x60
 80046fe:	d050      	beq.n	80047a2 <HAL_TIM_ConfigClockSource+0x11a>
 8004700:	2b60      	cmp	r3, #96	; 0x60
 8004702:	d877      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004704:	2b50      	cmp	r3, #80	; 0x50
 8004706:	d03c      	beq.n	8004782 <HAL_TIM_ConfigClockSource+0xfa>
 8004708:	2b50      	cmp	r3, #80	; 0x50
 800470a:	d873      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800470c:	2b40      	cmp	r3, #64	; 0x40
 800470e:	d058      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x13a>
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d86f      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004714:	2b30      	cmp	r3, #48	; 0x30
 8004716:	d064      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d86b      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 800471c:	2b20      	cmp	r3, #32
 800471e:	d060      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d867      	bhi.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05c      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 8004728:	2b10      	cmp	r3, #16
 800472a:	d05a      	beq.n	80047e2 <HAL_TIM_ConfigClockSource+0x15a>
 800472c:	e062      	b.n	80047f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800473e:	f000 fb69 	bl	8004e14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	609a      	str	r2, [r3, #8]
      break;
 800475a:	e04f      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800476c:	f000 fb52 	bl	8004e14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800477e:	609a      	str	r2, [r3, #8]
      break;
 8004780:	e03c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478e:	461a      	mov	r2, r3
 8004790:	f000 fac6 	bl	8004d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2150      	movs	r1, #80	; 0x50
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fb1f 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 80047a0:	e02c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ae:	461a      	mov	r2, r3
 80047b0:	f000 fae5 	bl	8004d7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2160      	movs	r1, #96	; 0x60
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fb0f 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 80047c0:	e01c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ce:	461a      	mov	r2, r3
 80047d0:	f000 faa6 	bl	8004d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2140      	movs	r1, #64	; 0x40
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 faff 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 80047e0:	e00c      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f000 faf6 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 80047f2:	e003      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
      break;
 80047f8:	e000      	b.n	80047fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a46      	ldr	r2, [pc, #280]	; (8004994 <TIM_Base_SetConfig+0x12c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004886:	d00f      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a43      	ldr	r2, [pc, #268]	; (8004998 <TIM_Base_SetConfig+0x130>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00b      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a42      	ldr	r2, [pc, #264]	; (800499c <TIM_Base_SetConfig+0x134>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d007      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a41      	ldr	r2, [pc, #260]	; (80049a0 <TIM_Base_SetConfig+0x138>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d003      	beq.n	80048a8 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <TIM_Base_SetConfig+0x13c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a35      	ldr	r2, [pc, #212]	; (8004994 <TIM_Base_SetConfig+0x12c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d02b      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c8:	d027      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a32      	ldr	r2, [pc, #200]	; (8004998 <TIM_Base_SetConfig+0x130>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d023      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a31      	ldr	r2, [pc, #196]	; (800499c <TIM_Base_SetConfig+0x134>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01f      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a30      	ldr	r2, [pc, #192]	; (80049a0 <TIM_Base_SetConfig+0x138>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01b      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <TIM_Base_SetConfig+0x13c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d017      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2e      	ldr	r2, [pc, #184]	; (80049a8 <TIM_Base_SetConfig+0x140>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2d      	ldr	r2, [pc, #180]	; (80049ac <TIM_Base_SetConfig+0x144>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00f      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2c      	ldr	r2, [pc, #176]	; (80049b0 <TIM_Base_SetConfig+0x148>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00b      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <TIM_Base_SetConfig+0x14c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <TIM_Base_SetConfig+0x150>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d003      	beq.n	800491a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a29      	ldr	r2, [pc, #164]	; (80049bc <TIM_Base_SetConfig+0x154>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d108      	bne.n	800492c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a10      	ldr	r2, [pc, #64]	; (8004994 <TIM_Base_SetConfig+0x12c>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d003      	beq.n	8004960 <TIM_Base_SetConfig+0xf8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a12      	ldr	r2, [pc, #72]	; (80049a4 <TIM_Base_SetConfig+0x13c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d103      	bne.n	8004968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b01      	cmp	r3, #1
 8004978:	d105      	bne.n	8004986 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f023 0201 	bic.w	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	611a      	str	r2, [r3, #16]
  }
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40010400 	.word	0x40010400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40014400 	.word	0x40014400
 80049b0:	40014800 	.word	0x40014800
 80049b4:	40001800 	.word	0x40001800
 80049b8:	40001c00 	.word	0x40001c00
 80049bc:	40002000 	.word	0x40002000

080049c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	f023 0201 	bic.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f023 0302 	bic.w	r3, r3, #2
 8004a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <TIM_OC1_SetConfig+0xd8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d003      	beq.n	8004a24 <TIM_OC1_SetConfig+0x64>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <TIM_OC1_SetConfig+0xdc>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d10c      	bne.n	8004a3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f023 0308 	bic.w	r3, r3, #8
 8004a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f023 0304 	bic.w	r3, r3, #4
 8004a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <TIM_OC1_SetConfig+0xd8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_OC1_SetConfig+0x8e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a14      	ldr	r2, [pc, #80]	; (8004a9c <TIM_OC1_SetConfig+0xdc>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d111      	bne.n	8004a72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	621a      	str	r2, [r3, #32]
}
 8004a8c:	bf00      	nop
 8004a8e:	371c      	adds	r7, #28
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40010000 	.word	0x40010000
 8004a9c:	40010400 	.word	0x40010400

08004aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f023 0210 	bic.w	r2, r3, #16
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f023 0320 	bic.w	r3, r3, #32
 8004aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <TIM_OC2_SetConfig+0xe4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_OC2_SetConfig+0x68>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <TIM_OC2_SetConfig+0xe8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d10d      	bne.n	8004b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <TIM_OC2_SetConfig+0xe4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC2_SetConfig+0x94>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a16      	ldr	r2, [pc, #88]	; (8004b88 <TIM_OC2_SetConfig+0xe8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d113      	bne.n	8004b5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	621a      	str	r2, [r3, #32]
}
 8004b76:	bf00      	nop
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40010400 	.word	0x40010400

08004b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0303 	bic.w	r3, r3, #3
 8004bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a21      	ldr	r2, [pc, #132]	; (8004c6c <TIM_OC3_SetConfig+0xe0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_OC3_SetConfig+0x66>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a20      	ldr	r2, [pc, #128]	; (8004c70 <TIM_OC3_SetConfig+0xe4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10d      	bne.n	8004c0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a16      	ldr	r2, [pc, #88]	; (8004c6c <TIM_OC3_SetConfig+0xe0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_OC3_SetConfig+0x92>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <TIM_OC3_SetConfig+0xe4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d113      	bne.n	8004c46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	011b      	lsls	r3, r3, #4
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	621a      	str	r2, [r3, #32]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40010400 	.word	0x40010400

08004c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	031b      	lsls	r3, r3, #12
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <TIM_OC4_SetConfig+0xa4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_OC4_SetConfig+0x68>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <TIM_OC4_SetConfig+0xa8>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d109      	bne.n	8004cf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40010400 	.word	0x40010400

08004d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0201 	bic.w	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 030a 	bic.w	r3, r3, #10
 8004d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 0210 	bic.w	r2, r3, #16
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f043 0307 	orr.w	r3, r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	609a      	str	r2, [r3, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2201      	movs	r2, #1
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a1a      	ldr	r2, [r3, #32]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	401a      	ands	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a1a      	ldr	r2, [r3, #32]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	6879      	ldr	r1, [r7, #4]
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	621a      	str	r2, [r3, #32]
}
 8004e92:	bf00      	nop
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d101      	bne.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	e05a      	b.n	8004f6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d022      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f04:	d01d      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1d      	ldr	r2, [pc, #116]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d018      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d013      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00e      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d009      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d004      	beq.n	8004f42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a15      	ldr	r2, [pc, #84]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d10c      	bne.n	8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800
 8004f88:	40000c00 	.word	0x40000c00
 8004f8c:	40010400 	.word	0x40010400
 8004f90:	40014000 	.word	0x40014000
 8004f94:	40001800 	.word	0x40001800

08004f98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e03d      	b.n	8005030 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	4313      	orrs	r3, r2
 800500e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e04d      	b.n	8005112 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d111      	bne.n	80050a6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fc90 	bl	80059b0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <HAL_UART_Init+0xb8>)
 800509c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2224      	movs	r2, #36	; 0x24
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 f8ac 	bl	800621c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2220      	movs	r2, #32
 80050fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	080016c5 	.word	0x080016c5

08005120 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8005120:	b480      	push	{r7}
 8005122:	b087      	sub	sp, #28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	460b      	mov	r3, r1
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d107      	bne.n	8005148 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513c:	f043 0220 	orr.w	r2, r3, #32
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e07c      	b.n	8005242 <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b20      	cmp	r3, #32
 8005152:	d150      	bne.n	80051f6 <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8005154:	7afb      	ldrb	r3, [r7, #11]
 8005156:	2b0c      	cmp	r3, #12
 8005158:	d844      	bhi.n	80051e4 <HAL_UART_RegisterCallback+0xc4>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <HAL_UART_RegisterCallback+0x40>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005195 	.word	0x08005195
 8005164:	0800519d 	.word	0x0800519d
 8005168:	080051a5 	.word	0x080051a5
 800516c:	080051ad 	.word	0x080051ad
 8005170:	080051b5 	.word	0x080051b5
 8005174:	080051bd 	.word	0x080051bd
 8005178:	080051c5 	.word	0x080051c5
 800517c:	080051cd 	.word	0x080051cd
 8005180:	080051e5 	.word	0x080051e5
 8005184:	080051e5 	.word	0x080051e5
 8005188:	080051e5 	.word	0x080051e5
 800518c:	080051d5 	.word	0x080051d5
 8005190:	080051dd 	.word	0x080051dd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800519a:	e051      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80051a2:	e04d      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80051aa:	e049      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80051b2:	e045      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80051ba:	e041      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80051c2:	e03d      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80051ca:	e039      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80051d2:	e035      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80051da:	e031      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80051e2:	e02d      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	f043 0220 	orr.w	r2, r3, #32
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
        break;
 80051f4:	e024      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d116      	bne.n	8005230 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	2b0b      	cmp	r3, #11
 8005206:	d002      	beq.n	800520e <HAL_UART_RegisterCallback+0xee>
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d004      	beq.n	8005216 <HAL_UART_RegisterCallback+0xf6>
 800520c:	e007      	b.n	800521e <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005214:	e014      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800521c:	e010      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
        break;
 800522e:	e007      	b.n	8005240 <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d112      	bne.n	8005290 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_Receive_IT+0x26>
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e00b      	b.n	8005292 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	461a      	mov	r2, r3
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fd2a 	bl	8005ce0 <UART_Start_Receive_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	e000      	b.n	8005292 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08c      	sub	sp, #48	; 0x30
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d156      	bne.n	8005364 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_UART_Transmit_DMA+0x26>
 80052bc:	88fb      	ldrh	r3, [r7, #6]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e04f      	b.n	8005366 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2221      	movs	r2, #33	; 0x21
 80052e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	4a21      	ldr	r2, [pc, #132]	; (8005370 <HAL_UART_Transmit_DMA+0xd4>)
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	4a20      	ldr	r2, [pc, #128]	; (8005374 <HAL_UART_Transmit_DMA+0xd8>)
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	4a1f      	ldr	r2, [pc, #124]	; (8005378 <HAL_UART_Transmit_DMA+0xdc>)
 80052fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	2200      	movs	r2, #0
 8005304:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005306:	f107 0308 	add.w	r3, r7, #8
 800530a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3304      	adds	r3, #4
 800531a:	461a      	mov	r2, r3
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	f7fc fe2b 	bl	8001f78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800532a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3314      	adds	r3, #20
 8005332:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	617b      	str	r3, [r7, #20]
   return(result);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3314      	adds	r3, #20
 800534a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800534c:	627a      	str	r2, [r7, #36]	; 0x24
 800534e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6a39      	ldr	r1, [r7, #32]
 8005352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	61fb      	str	r3, [r7, #28]
   return(result);
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e5      	bne.n	800532c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	e000      	b.n	8005366 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005364:	2302      	movs	r3, #2
  }
}
 8005366:	4618      	mov	r0, r3
 8005368:	3730      	adds	r7, #48	; 0x30
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	08005a21 	.word	0x08005a21
 8005374:	08005abd 	.word	0x08005abd
 8005378:	08005c4b 	.word	0x08005c4b

0800537c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b20      	cmp	r3, #32
 8005394:	d112      	bne.n	80053bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <HAL_UART_Receive_DMA+0x26>
 800539c:	88fb      	ldrh	r3, [r7, #6]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e00b      	b.n	80053be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	461a      	mov	r2, r3
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fcce 	bl	8005d54 <UART_Start_Receive_DMA>
 80053b8:	4603      	mov	r3, r0
 80053ba:	e000      	b.n	80053be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
	...

080053c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b0ba      	sub	sp, #232	; 0xe8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10f      	bne.n	800542e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_UART_IRQHandler+0x66>
 800541a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fe37 	bl	800609a <UART_Receive_IT>
      return;
 800542c:	e260      	b.n	80058f0 <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800542e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80e1 	beq.w	80055fa <HAL_UART_IRQHandler+0x232>
 8005438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d106      	bne.n	8005452 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80d4 	beq.w	80055fa <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_UART_IRQHandler+0xae>
 800545e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546e:	f043 0201 	orr.w	r2, r3, #1
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_UART_IRQHandler+0xd2>
 8005482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	f043 0202 	orr.w	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800549a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00b      	beq.n	80054be <HAL_UART_IRQHandler+0xf6>
 80054a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	f043 0204 	orr.w	r2, r3, #4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c2:	f003 0308 	and.w	r3, r3, #8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d011      	beq.n	80054ee <HAL_UART_IRQHandler+0x126>
 80054ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e6:	f043 0208 	orr.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 81f7 	beq.w	80058e6 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d008      	beq.n	8005516 <HAL_UART_IRQHandler+0x14e>
 8005504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fdc2 	bl	800609a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <HAL_UART_IRQHandler+0x17a>
 800553a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d051      	beq.n	80055e6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fcc8 	bl	8005ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d142      	bne.n	80055dc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800556c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3314      	adds	r3, #20
 800557e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005582:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800558e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005592:	e841 2300 	strex	r3, r2, [r1]
 8005596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800559a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1d9      	bne.n	8005556 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d013      	beq.n	80055d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	4a80      	ldr	r2, [pc, #512]	; (80057b0 <HAL_UART_IRQHandler+0x3e8>)
 80055b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fc fda6 	bl	8002108 <HAL_DMA_Abort_IT>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d019      	beq.n	80055f6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055cc:	4610      	mov	r0, r2
 80055ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d0:	e011      	b.n	80055f6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055da:	e00c      	b.n	80055f6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	e007      	b.n	80055f6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80055f4:	e177      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f6:	bf00      	nop
    return;
 80055f8:	e175      	b.n	80058e6 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	2b01      	cmp	r3, #1
 8005600:	f040 8151 	bne.w	80058a6 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 814a 	beq.w	80058a6 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8143 	beq.w	80058a6 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	f040 80b7 	bne.w	80057b4 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005652:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 8147 	beq.w	80058ea <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005664:	429a      	cmp	r2, r3
 8005666:	f080 8140 	bcs.w	80058ea <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005670:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567c:	f000 8088 	beq.w	8005790 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800568e:	e853 3f00 	ldrex	r3, [r3]
 8005692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005696:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800569a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800569e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	330c      	adds	r3, #12
 80056a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056bc:	e841 2300 	strex	r3, r2, [r1]
 80056c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1d9      	bne.n	8005680 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056de:	f023 0301 	bic.w	r3, r3, #1
 80056e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3314      	adds	r3, #20
 80056ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e1      	bne.n	80056cc <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800571a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800571e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3314      	adds	r3, #20
 8005728:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800572c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800572e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005732:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800573a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e3      	bne.n	8005708 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800575e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005760:	f023 0310 	bic.w	r3, r3, #16
 8005764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005772:	65ba      	str	r2, [r7, #88]	; 0x58
 8005774:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005778:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e3      	bne.n	800574e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	4618      	mov	r0, r3
 800578c:	f7fc fc4c 	bl	8002028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80057a2:	b292      	uxth	r2, r2
 80057a4:	1a8a      	subs	r2, r1, r2
 80057a6:	b292      	uxth	r2, r2
 80057a8:	4611      	mov	r1, r2
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ae:	e09c      	b.n	80058ea <HAL_UART_IRQHandler+0x522>
 80057b0:	08005f9f 	.word	0x08005f9f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 808f 	beq.w	80058ee <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 80057d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 808a 	beq.w	80058ee <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057fe:	647a      	str	r2, [r7, #68]	; 0x44
 8005800:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800580c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e3      	bne.n	80057da <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	623b      	str	r3, [r7, #32]
   return(result);
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	f023 0301 	bic.w	r3, r3, #1
 8005828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3314      	adds	r3, #20
 8005832:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005836:	633a      	str	r2, [r7, #48]	; 0x30
 8005838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800583c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e3      	bne.n	8005812 <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	60fb      	str	r3, [r7, #12]
   return(result);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0310 	bic.w	r3, r3, #16
 800586e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800587c:	61fa      	str	r2, [r7, #28]
 800587e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	69b9      	ldr	r1, [r7, #24]
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	617b      	str	r3, [r7, #20]
   return(result);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e3      	bne.n	8005858 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800589a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800589e:	4611      	mov	r1, r2
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058a4:	e023      	b.n	80058ee <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_UART_IRQHandler+0x4fe>
 80058b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fb82 	bl	8005fc8 <UART_Transmit_IT>
    return;
 80058c4:	e014      	b.n	80058f0 <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00e      	beq.n	80058f0 <HAL_UART_IRQHandler+0x528>
 80058d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fbc2 	bl	8006068 <UART_EndTransmit_IT>
    return;
 80058e4:	e004      	b.n	80058f0 <HAL_UART_IRQHandler+0x528>
    return;
 80058e6:	bf00      	nop
 80058e8:	e002      	b.n	80058f0 <HAL_UART_IRQHandler+0x528>
      return;
 80058ea:	bf00      	nop
 80058ec:	e000      	b.n	80058f0 <HAL_UART_IRQHandler+0x528>
      return;
 80058ee:	bf00      	nop
  }
}
 80058f0:	37e8      	adds	r7, #232	; 0xe8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop

080058f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a10      	ldr	r2, [pc, #64]	; (80059fc <UART_InitCallbacksToDefault+0x4c>)
 80059bc:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <UART_InitCallbacksToDefault+0x50>)
 80059c2:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a0f      	ldr	r2, [pc, #60]	; (8005a04 <UART_InitCallbacksToDefault+0x54>)
 80059c8:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a0e      	ldr	r2, [pc, #56]	; (8005a08 <UART_InitCallbacksToDefault+0x58>)
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a0e      	ldr	r2, [pc, #56]	; (8005a0c <UART_InitCallbacksToDefault+0x5c>)
 80059d4:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <UART_InitCallbacksToDefault+0x60>)
 80059da:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a0d      	ldr	r2, [pc, #52]	; (8005a14 <UART_InitCallbacksToDefault+0x64>)
 80059e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a0c      	ldr	r2, [pc, #48]	; (8005a18 <UART_InitCallbacksToDefault+0x68>)
 80059e6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <UART_InitCallbacksToDefault+0x6c>)
 80059ec:	66da      	str	r2, [r3, #108]	; 0x6c

}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	0800590d 	.word	0x0800590d
 8005a00:	080058f9 	.word	0x080058f9
 8005a04:	08005935 	.word	0x08005935
 8005a08:	08005921 	.word	0x08005921
 8005a0c:	08005949 	.word	0x08005949
 8005a10:	0800595d 	.word	0x0800595d
 8005a14:	08005971 	.word	0x08005971
 8005a18:	08005985 	.word	0x08005985
 8005a1c:	08005999 	.word	0x08005999

08005a20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b090      	sub	sp, #64	; 0x40
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d137      	bne.n	8005aac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a3e:	2200      	movs	r2, #0
 8005a40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	3314      	adds	r3, #20
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	623b      	str	r3, [r7, #32]
   return(result);
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	3314      	adds	r3, #20
 8005a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a62:	633a      	str	r2, [r7, #48]	; 0x30
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6a:	e841 2300 	strex	r3, r2, [r1]
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1e5      	bne.n	8005a42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	330c      	adds	r3, #12
 8005a7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a96:	61fa      	str	r2, [r7, #28]
 8005a98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	69b9      	ldr	r1, [r7, #24]
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	617b      	str	r3, [r7, #20]
   return(result);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1e5      	bne.n	8005a76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005aaa:	e003      	b.n	8005ab4 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8005aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ab2:	4798      	blx	r3
}
 8005ab4:	bf00      	nop
 8005ab6:	3740      	adds	r7, #64	; 0x40
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b09c      	sub	sp, #112	; 0x70
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d172      	bne.n	8005bdc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af8:	2200      	movs	r2, #0
 8005afa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3314      	adds	r3, #20
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	667b      	str	r3, [r7, #100]	; 0x64
 8005b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3314      	adds	r3, #20
 8005b4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b50:	647a      	str	r2, [r7, #68]	; 0x44
 8005b52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e5      	bne.n	8005b30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	623b      	str	r3, [r7, #32]
   return(result);
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005b84:	633a      	str	r2, [r7, #48]	; 0x30
 8005b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d119      	bne.n	8005bdc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0310 	bic.w	r3, r3, #16
 8005bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bc8:	61fa      	str	r2, [r7, #28]
 8005bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	69b9      	ldr	r1, [r7, #24]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e5      	bne.n	8005ba8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	2200      	movs	r2, #0
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d107      	bne.n	8005bfa <UART_DMAReceiveCplt+0x120>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bf0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005bf6:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bf8:	e003      	b.n	8005c02 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8005bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c00:	4798      	blx	r3
}
 8005c02:	bf00      	nop
 8005c04:	3770      	adds	r7, #112	; 0x70
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d109      	bne.n	8005c3a <UART_DMARxHalfCplt+0x30>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005c2e:	0852      	lsrs	r2, r2, #1
 8005c30:	b292      	uxth	r2, r2
 8005c32:	4611      	mov	r1, r2
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c38:	e003      	b.n	8005c42 <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	4798      	blx	r3
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b80      	cmp	r3, #128	; 0x80
 8005c68:	bf0c      	ite	eq
 8005c6a:	2301      	moveq	r3, #1
 8005c6c:	2300      	movne	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b21      	cmp	r3, #33	; 0x21
 8005c7c:	d108      	bne.n	8005c90 <UART_DMAError+0x46>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	2200      	movs	r2, #0
 8005c88:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c8a:	68b8      	ldr	r0, [r7, #8]
 8005c8c:	f000 f8fc 	bl	8005e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	bf0c      	ite	eq
 8005c9e:	2301      	moveq	r3, #1
 8005ca0:	2300      	movne	r3, #0
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b22      	cmp	r3, #34	; 0x22
 8005cb0:	d108      	bne.n	8005cc4 <UART_DMAError+0x7a>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005cbe:	68b8      	ldr	r0, [r7, #8]
 8005cc0:	f000 f90a 	bl	8005ed8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc8:	f043 0210 	orr.w	r2, r3, #16
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	68b8      	ldr	r0, [r7, #8]
 8005cd6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	4613      	mov	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	88fa      	ldrh	r2, [r7, #6]
 8005cf8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2222      	movs	r2, #34	; 0x22
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0201 	orr.w	r2, r2, #1
 8005d34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0220 	orr.w	r2, r2, #32
 8005d44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b098      	sub	sp, #96	; 0x60
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2222      	movs	r2, #34	; 0x22
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d80:	4a3e      	ldr	r2, [pc, #248]	; (8005e7c <UART_Start_Receive_DMA+0x128>)
 8005d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d88:	4a3d      	ldr	r2, [pc, #244]	; (8005e80 <UART_Start_Receive_DMA+0x12c>)
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d90:	4a3c      	ldr	r2, [pc, #240]	; (8005e84 <UART_Start_Receive_DMA+0x130>)
 8005d92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d98:	2200      	movs	r2, #0
 8005d9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005d9c:	f107 0308 	add.w	r3, r7, #8
 8005da0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3304      	adds	r3, #4
 8005dac:	4619      	mov	r1, r3
 8005dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	88fb      	ldrh	r3, [r7, #6]
 8005db4:	f7fc f8e0 	bl	8001f78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005db8:	2300      	movs	r3, #0
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d019      	beq.n	8005e0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dec:	65bb      	str	r3, [r7, #88]	; 0x58
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005df6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005df8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dfe:	e841 2300 	strex	r3, r2, [r1]
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1e5      	bne.n	8005dd6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	3314      	adds	r3, #20
 8005e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	657b      	str	r3, [r7, #84]	; 0x54
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3314      	adds	r3, #20
 8005e28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e5      	bne.n	8005e0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3314      	adds	r3, #20
 8005e44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e54:	653b      	str	r3, [r7, #80]	; 0x50
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3314      	adds	r3, #20
 8005e5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005e5e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e62:	6a39      	ldr	r1, [r7, #32]
 8005e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e5      	bne.n	8005e3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3760      	adds	r7, #96	; 0x60
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	08005adb 	.word	0x08005adb
 8005e80:	08005c0b 	.word	0x08005c0b
 8005e84:	08005c4b 	.word	0x08005c4b

08005e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b089      	sub	sp, #36	; 0x24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	61ba      	str	r2, [r7, #24]
 8005eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6979      	ldr	r1, [r7, #20]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e5      	bne.n	8005e90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005ecc:	bf00      	nop
 8005ece:	3724      	adds	r7, #36	; 0x24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b095      	sub	sp, #84	; 0x54
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	e853 3f00 	ldrex	r3, [r3]
 8005eee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f00:	643a      	str	r2, [r7, #64]	; 0x40
 8005f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f08:	e841 2300 	strex	r3, r2, [r1]
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e5      	bne.n	8005ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3314      	adds	r3, #20
 8005f1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	e853 3f00 	ldrex	r3, [r3]
 8005f22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f023 0301 	bic.w	r3, r3, #1
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3314      	adds	r3, #20
 8005f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f3c:	e841 2300 	strex	r3, r2, [r1]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1e5      	bne.n	8005f14 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d119      	bne.n	8005f84 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	330c      	adds	r3, #12
 8005f56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f023 0310 	bic.w	r3, r3, #16
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f70:	61ba      	str	r2, [r7, #24]
 8005f72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6979      	ldr	r1, [r7, #20]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e5      	bne.n	8005f50 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f92:	bf00      	nop
 8005f94:	3754      	adds	r7, #84	; 0x54
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b084      	sub	sp, #16
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b21      	cmp	r3, #33	; 0x21
 8005fda:	d13e      	bne.n	800605a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe4:	d114      	bne.n	8006010 <UART_Transmit_IT+0x48>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d110      	bne.n	8006010 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006002:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	1c9a      	adds	r2, r3, #2
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	621a      	str	r2, [r3, #32]
 800600e:	e008      	b.n	8006022 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	1c59      	adds	r1, r3, #1
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	6211      	str	r1, [r2, #32]
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29b      	uxth	r3, r3
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	4619      	mov	r1, r3
 8006030:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10f      	bne.n	8006056 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006044:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006054:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	e000      	b.n	800605c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800605a:	2302      	movs	r3, #2
  }
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800607e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2220      	movs	r2, #32
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b08c      	sub	sp, #48	; 0x30
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b22      	cmp	r3, #34	; 0x22
 80060ac:	f040 80b0 	bne.w	8006210 <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d117      	bne.n	80060ea <UART_Receive_IT+0x50>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d113      	bne.n	80060ea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060d8:	b29a      	uxth	r2, r3
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e2:	1c9a      	adds	r2, r3, #2
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	629a      	str	r2, [r3, #40]	; 0x28
 80060e8:	e026      	b.n	8006138 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fc:	d007      	beq.n	800610e <UART_Receive_IT+0x74>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <UART_Receive_IT+0x82>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e008      	b.n	800612e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006128:	b2da      	uxtb	r2, r3
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29b      	uxth	r3, r3
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	4619      	mov	r1, r3
 8006146:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006148:	2b00      	cmp	r3, #0
 800614a:	d15f      	bne.n	800620c <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 0220 	bic.w	r2, r2, #32
 800615a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800616a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	2b01      	cmp	r3, #1
 8006190:	d136      	bne.n	8006200 <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	613b      	str	r3, [r7, #16]
   return(result);
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f023 0310 	bic.w	r3, r3, #16
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b8:	623a      	str	r2, [r7, #32]
 80061ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	69f9      	ldr	r1, [r7, #28]
 80061be:	6a3a      	ldr	r2, [r7, #32]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d10a      	bne.n	80061f0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80061f8:	4611      	mov	r1, r2
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
 80061fe:	e003      	b.n	8006208 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	e002      	b.n	8006212 <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	e000      	b.n	8006212 <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8006210:	2302      	movs	r3, #2
  }
}
 8006212:	4618      	mov	r0, r3
 8006214:	3730      	adds	r7, #48	; 0x30
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800621c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006220:	b0c0      	sub	sp, #256	; 0x100
 8006222:	af00      	add	r7, sp, #0
 8006224:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	68d9      	ldr	r1, [r3, #12]
 800623a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	ea40 0301 	orr.w	r3, r0, r1
 8006244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	431a      	orrs	r2, r3
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	431a      	orrs	r2, r3
 800625c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006274:	f021 010c 	bic.w	r1, r1, #12
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006282:	430b      	orrs	r3, r1
 8006284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006296:	6999      	ldr	r1, [r3, #24]
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	ea40 0301 	orr.w	r3, r0, r1
 80062a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	4b8f      	ldr	r3, [pc, #572]	; (80064e8 <UART_SetConfig+0x2cc>)
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d005      	beq.n	80062bc <UART_SetConfig+0xa0>
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	4b8d      	ldr	r3, [pc, #564]	; (80064ec <UART_SetConfig+0x2d0>)
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d104      	bne.n	80062c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062bc:	f7fd fc4a 	bl	8003b54 <HAL_RCC_GetPCLK2Freq>
 80062c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062c4:	e003      	b.n	80062ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062c6:	f7fd fc31 	bl	8003b2c <HAL_RCC_GetPCLK1Freq>
 80062ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d8:	f040 810c 	bne.w	80064f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e0:	2200      	movs	r2, #0
 80062e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062ee:	4622      	mov	r2, r4
 80062f0:	462b      	mov	r3, r5
 80062f2:	1891      	adds	r1, r2, r2
 80062f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80062f6:	415b      	adcs	r3, r3
 80062f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062fe:	4621      	mov	r1, r4
 8006300:	eb12 0801 	adds.w	r8, r2, r1
 8006304:	4629      	mov	r1, r5
 8006306:	eb43 0901 	adc.w	r9, r3, r1
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800631a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800631e:	4690      	mov	r8, r2
 8006320:	4699      	mov	r9, r3
 8006322:	4623      	mov	r3, r4
 8006324:	eb18 0303 	adds.w	r3, r8, r3
 8006328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800632c:	462b      	mov	r3, r5
 800632e:	eb49 0303 	adc.w	r3, r9, r3
 8006332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006342:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800634a:	460b      	mov	r3, r1
 800634c:	18db      	adds	r3, r3, r3
 800634e:	653b      	str	r3, [r7, #80]	; 0x50
 8006350:	4613      	mov	r3, r2
 8006352:	eb42 0303 	adc.w	r3, r2, r3
 8006356:	657b      	str	r3, [r7, #84]	; 0x54
 8006358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800635c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006360:	f7f9 ff4c 	bl	80001fc <__aeabi_uldivmod>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4b61      	ldr	r3, [pc, #388]	; (80064f0 <UART_SetConfig+0x2d4>)
 800636a:	fba3 2302 	umull	r2, r3, r3, r2
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	011c      	lsls	r4, r3, #4
 8006372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006376:	2200      	movs	r2, #0
 8006378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800637c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006384:	4642      	mov	r2, r8
 8006386:	464b      	mov	r3, r9
 8006388:	1891      	adds	r1, r2, r2
 800638a:	64b9      	str	r1, [r7, #72]	; 0x48
 800638c:	415b      	adcs	r3, r3
 800638e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006394:	4641      	mov	r1, r8
 8006396:	eb12 0a01 	adds.w	sl, r2, r1
 800639a:	4649      	mov	r1, r9
 800639c:	eb43 0b01 	adc.w	fp, r3, r1
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063b4:	4692      	mov	sl, r2
 80063b6:	469b      	mov	fp, r3
 80063b8:	4643      	mov	r3, r8
 80063ba:	eb1a 0303 	adds.w	r3, sl, r3
 80063be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063c2:	464b      	mov	r3, r9
 80063c4:	eb4b 0303 	adc.w	r3, fp, r3
 80063c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063e0:	460b      	mov	r3, r1
 80063e2:	18db      	adds	r3, r3, r3
 80063e4:	643b      	str	r3, [r7, #64]	; 0x40
 80063e6:	4613      	mov	r3, r2
 80063e8:	eb42 0303 	adc.w	r3, r2, r3
 80063ec:	647b      	str	r3, [r7, #68]	; 0x44
 80063ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063f6:	f7f9 ff01 	bl	80001fc <__aeabi_uldivmod>
 80063fa:	4602      	mov	r2, r0
 80063fc:	460b      	mov	r3, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <UART_SetConfig+0x2d4>)
 8006402:	fba3 2301 	umull	r2, r3, r3, r1
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	2264      	movs	r2, #100	; 0x64
 800640a:	fb02 f303 	mul.w	r3, r2, r3
 800640e:	1acb      	subs	r3, r1, r3
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006416:	4b36      	ldr	r3, [pc, #216]	; (80064f0 <UART_SetConfig+0x2d4>)
 8006418:	fba3 2302 	umull	r2, r3, r3, r2
 800641c:	095b      	lsrs	r3, r3, #5
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006424:	441c      	add	r4, r3
 8006426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006430:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006438:	4642      	mov	r2, r8
 800643a:	464b      	mov	r3, r9
 800643c:	1891      	adds	r1, r2, r2
 800643e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006440:	415b      	adcs	r3, r3
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006448:	4641      	mov	r1, r8
 800644a:	1851      	adds	r1, r2, r1
 800644c:	6339      	str	r1, [r7, #48]	; 0x30
 800644e:	4649      	mov	r1, r9
 8006450:	414b      	adcs	r3, r1
 8006452:	637b      	str	r3, [r7, #52]	; 0x34
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006460:	4659      	mov	r1, fp
 8006462:	00cb      	lsls	r3, r1, #3
 8006464:	4651      	mov	r1, sl
 8006466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646a:	4651      	mov	r1, sl
 800646c:	00ca      	lsls	r2, r1, #3
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	4603      	mov	r3, r0
 8006474:	4642      	mov	r2, r8
 8006476:	189b      	adds	r3, r3, r2
 8006478:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800647c:	464b      	mov	r3, r9
 800647e:	460a      	mov	r2, r1
 8006480:	eb42 0303 	adc.w	r3, r2, r3
 8006484:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006494:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800649c:	460b      	mov	r3, r1
 800649e:	18db      	adds	r3, r3, r3
 80064a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064a2:	4613      	mov	r3, r2
 80064a4:	eb42 0303 	adc.w	r3, r2, r3
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064b2:	f7f9 fea3 	bl	80001fc <__aeabi_uldivmod>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <UART_SetConfig+0x2d4>)
 80064bc:	fba3 1302 	umull	r1, r3, r3, r2
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	2164      	movs	r1, #100	; 0x64
 80064c4:	fb01 f303 	mul.w	r3, r1, r3
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	3332      	adds	r3, #50	; 0x32
 80064ce:	4a08      	ldr	r2, [pc, #32]	; (80064f0 <UART_SetConfig+0x2d4>)
 80064d0:	fba2 2303 	umull	r2, r3, r2, r3
 80064d4:	095b      	lsrs	r3, r3, #5
 80064d6:	f003 0207 	and.w	r2, r3, #7
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4422      	add	r2, r4
 80064e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064e4:	e106      	b.n	80066f4 <UART_SetConfig+0x4d8>
 80064e6:	bf00      	nop
 80064e8:	40011000 	.word	0x40011000
 80064ec:	40011400 	.word	0x40011400
 80064f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064f8:	2200      	movs	r2, #0
 80064fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006506:	4642      	mov	r2, r8
 8006508:	464b      	mov	r3, r9
 800650a:	1891      	adds	r1, r2, r2
 800650c:	6239      	str	r1, [r7, #32]
 800650e:	415b      	adcs	r3, r3
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006516:	4641      	mov	r1, r8
 8006518:	1854      	adds	r4, r2, r1
 800651a:	4649      	mov	r1, r9
 800651c:	eb43 0501 	adc.w	r5, r3, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	00eb      	lsls	r3, r5, #3
 800652a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800652e:	00e2      	lsls	r2, r4, #3
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	4643      	mov	r3, r8
 8006536:	18e3      	adds	r3, r4, r3
 8006538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800653c:	464b      	mov	r3, r9
 800653e:	eb45 0303 	adc.w	r3, r5, r3
 8006542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006562:	4629      	mov	r1, r5
 8006564:	008b      	lsls	r3, r1, #2
 8006566:	4621      	mov	r1, r4
 8006568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800656c:	4621      	mov	r1, r4
 800656e:	008a      	lsls	r2, r1, #2
 8006570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006574:	f7f9 fe42 	bl	80001fc <__aeabi_uldivmod>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4b60      	ldr	r3, [pc, #384]	; (8006700 <UART_SetConfig+0x4e4>)
 800657e:	fba3 2302 	umull	r2, r3, r3, r2
 8006582:	095b      	lsrs	r3, r3, #5
 8006584:	011c      	lsls	r4, r3, #4
 8006586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800658a:	2200      	movs	r2, #0
 800658c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006598:	4642      	mov	r2, r8
 800659a:	464b      	mov	r3, r9
 800659c:	1891      	adds	r1, r2, r2
 800659e:	61b9      	str	r1, [r7, #24]
 80065a0:	415b      	adcs	r3, r3
 80065a2:	61fb      	str	r3, [r7, #28]
 80065a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065a8:	4641      	mov	r1, r8
 80065aa:	1851      	adds	r1, r2, r1
 80065ac:	6139      	str	r1, [r7, #16]
 80065ae:	4649      	mov	r1, r9
 80065b0:	414b      	adcs	r3, r1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	f04f 0200 	mov.w	r2, #0
 80065b8:	f04f 0300 	mov.w	r3, #0
 80065bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065c0:	4659      	mov	r1, fp
 80065c2:	00cb      	lsls	r3, r1, #3
 80065c4:	4651      	mov	r1, sl
 80065c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065ca:	4651      	mov	r1, sl
 80065cc:	00ca      	lsls	r2, r1, #3
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	4642      	mov	r2, r8
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065dc:	464b      	mov	r3, r9
 80065de:	460a      	mov	r2, r1
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80065f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006600:	4649      	mov	r1, r9
 8006602:	008b      	lsls	r3, r1, #2
 8006604:	4641      	mov	r1, r8
 8006606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800660a:	4641      	mov	r1, r8
 800660c:	008a      	lsls	r2, r1, #2
 800660e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006612:	f7f9 fdf3 	bl	80001fc <__aeabi_uldivmod>
 8006616:	4602      	mov	r2, r0
 8006618:	460b      	mov	r3, r1
 800661a:	4611      	mov	r1, r2
 800661c:	4b38      	ldr	r3, [pc, #224]	; (8006700 <UART_SetConfig+0x4e4>)
 800661e:	fba3 2301 	umull	r2, r3, r3, r1
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	2264      	movs	r2, #100	; 0x64
 8006626:	fb02 f303 	mul.w	r3, r2, r3
 800662a:	1acb      	subs	r3, r1, r3
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	3332      	adds	r3, #50	; 0x32
 8006630:	4a33      	ldr	r2, [pc, #204]	; (8006700 <UART_SetConfig+0x4e4>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800663c:	441c      	add	r4, r3
 800663e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006642:	2200      	movs	r2, #0
 8006644:	673b      	str	r3, [r7, #112]	; 0x70
 8006646:	677a      	str	r2, [r7, #116]	; 0x74
 8006648:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	1891      	adds	r1, r2, r2
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	415b      	adcs	r3, r3
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800665c:	4641      	mov	r1, r8
 800665e:	1851      	adds	r1, r2, r1
 8006660:	6039      	str	r1, [r7, #0]
 8006662:	4649      	mov	r1, r9
 8006664:	414b      	adcs	r3, r1
 8006666:	607b      	str	r3, [r7, #4]
 8006668:	f04f 0200 	mov.w	r2, #0
 800666c:	f04f 0300 	mov.w	r3, #0
 8006670:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006674:	4659      	mov	r1, fp
 8006676:	00cb      	lsls	r3, r1, #3
 8006678:	4651      	mov	r1, sl
 800667a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800667e:	4651      	mov	r1, sl
 8006680:	00ca      	lsls	r2, r1, #3
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	4603      	mov	r3, r0
 8006688:	4642      	mov	r2, r8
 800668a:	189b      	adds	r3, r3, r2
 800668c:	66bb      	str	r3, [r7, #104]	; 0x68
 800668e:	464b      	mov	r3, r9
 8006690:	460a      	mov	r2, r1
 8006692:	eb42 0303 	adc.w	r3, r2, r3
 8006696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	663b      	str	r3, [r7, #96]	; 0x60
 80066a2:	667a      	str	r2, [r7, #100]	; 0x64
 80066a4:	f04f 0200 	mov.w	r2, #0
 80066a8:	f04f 0300 	mov.w	r3, #0
 80066ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066b0:	4649      	mov	r1, r9
 80066b2:	008b      	lsls	r3, r1, #2
 80066b4:	4641      	mov	r1, r8
 80066b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ba:	4641      	mov	r1, r8
 80066bc:	008a      	lsls	r2, r1, #2
 80066be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066c2:	f7f9 fd9b 	bl	80001fc <__aeabi_uldivmod>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <UART_SetConfig+0x4e4>)
 80066cc:	fba3 1302 	umull	r1, r3, r3, r2
 80066d0:	095b      	lsrs	r3, r3, #5
 80066d2:	2164      	movs	r1, #100	; 0x64
 80066d4:	fb01 f303 	mul.w	r3, r1, r3
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	3332      	adds	r3, #50	; 0x32
 80066de:	4a08      	ldr	r2, [pc, #32]	; (8006700 <UART_SetConfig+0x4e4>)
 80066e0:	fba2 2303 	umull	r2, r3, r2, r3
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	f003 020f 	and.w	r2, r3, #15
 80066ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4422      	add	r2, r4
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066fa:	46bd      	mov	sp, r7
 80066fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006700:	51eb851f 	.word	0x51eb851f

08006704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006704:	b084      	sub	sp, #16
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	f107 001c 	add.w	r0, r7, #28
 8006712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006716:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800671a:	2b01      	cmp	r3, #1
 800671c:	d123      	bne.n	8006766 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006746:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800674a:	2b01      	cmp	r3, #1
 800674c:	d105      	bne.n	800675a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 faa0 	bl	8006ca0 <USB_CoreReset>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
 8006764:	e01b      	b.n	800679e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa94 	bl	8006ca0 <USB_CoreReset>
 8006778:	4603      	mov	r3, r0
 800677a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800677c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006788:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
 8006790:	e005      	b.n	800679e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800679e:	7fbb      	ldrb	r3, [r7, #30]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d10b      	bne.n	80067bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f043 0206 	orr.w	r2, r3, #6
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f043 0220 	orr.w	r2, r3, #32
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3710      	adds	r7, #16
 80067c2:	46bd      	mov	sp, r7
 80067c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c8:	b004      	add	sp, #16
 80067ca:	4770      	bx	lr

080067cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 0201 	bic.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d115      	bne.n	800683c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800681c:	200a      	movs	r0, #10
 800681e:	f7fb f9c7 	bl	8001bb0 <HAL_Delay>
      ms += 10U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	330a      	adds	r3, #10
 8006826:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 fa2b 	bl	8006c84 <USB_GetMode>
 800682e:	4603      	mov	r3, r0
 8006830:	2b01      	cmp	r3, #1
 8006832:	d01e      	beq.n	8006872 <USB_SetCurrentMode+0x84>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2bc7      	cmp	r3, #199	; 0xc7
 8006838:	d9f0      	bls.n	800681c <USB_SetCurrentMode+0x2e>
 800683a:	e01a      	b.n	8006872 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d115      	bne.n	800686e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800684e:	200a      	movs	r0, #10
 8006850:	f7fb f9ae 	bl	8001bb0 <HAL_Delay>
      ms += 10U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	330a      	adds	r3, #10
 8006858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa12 	bl	8006c84 <USB_GetMode>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <USB_SetCurrentMode+0x84>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2bc7      	cmp	r3, #199	; 0xc7
 800686a:	d9f0      	bls.n	800684e <USB_SetCurrentMode+0x60>
 800686c:	e001      	b.n	8006872 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e005      	b.n	800687e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2bc8      	cmp	r3, #200	; 0xc8
 8006876:	d101      	bne.n	800687c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e000      	b.n	800687e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006888:	b084      	sub	sp, #16
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	613b      	str	r3, [r7, #16]
 80068a6:	e009      	b.n	80068bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	3340      	adds	r3, #64	; 0x40
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	2200      	movs	r2, #0
 80068b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3301      	adds	r3, #1
 80068ba:	613b      	str	r3, [r7, #16]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b0e      	cmp	r3, #14
 80068c0:	d9f2      	bls.n	80068a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d11c      	bne.n	8006904 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d8:	f043 0302 	orr.w	r3, r3, #2
 80068dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
 8006902:	e00b      	b.n	800691c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006922:	461a      	mov	r2, r3
 8006924:	2300      	movs	r3, #0
 8006926:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006928:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10d      	bne.n	800694c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006938:	2100      	movs	r1, #0
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f968 	bl	8006c10 <USB_SetDevSpeed>
 8006940:	e008      	b.n	8006954 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006942:	2101      	movs	r1, #1
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f963 	bl	8006c10 <USB_SetDevSpeed>
 800694a:	e003      	b.n	8006954 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800694c:	2103      	movs	r1, #3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f95e 	bl	8006c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006954:	2110      	movs	r1, #16
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f8fa 	bl	8006b50 <USB_FlushTxFifo>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f924 	bl	8006bb4 <USB_FlushRxFifo>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	461a      	mov	r2, r3
 800697e:	2300      	movs	r3, #0
 8006980:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006988:	461a      	mov	r2, r3
 800698a:	2300      	movs	r3, #0
 800698c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006994:	461a      	mov	r2, r3
 8006996:	2300      	movs	r3, #0
 8006998:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	e043      	b.n	8006a28 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b6:	d118      	bne.n	80069ea <USB_DevInit+0x162>
    {
      if (i == 0U)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ca:	461a      	mov	r2, r3
 80069cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e013      	b.n	80069fc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069e0:	461a      	mov	r2, r3
 80069e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	e008      	b.n	80069fc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f6:	461a      	mov	r2, r3
 80069f8:	2300      	movs	r3, #0
 80069fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	3301      	adds	r3, #1
 8006a26:	613b      	str	r3, [r7, #16]
 8006a28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d3b5      	bcc.n	80069a0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a34:	2300      	movs	r3, #0
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	e043      	b.n	8006ac2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a50:	d118      	bne.n	8006a84 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a64:	461a      	mov	r2, r3
 8006a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	e013      	b.n	8006a96 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e008      	b.n	8006a96 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	2300      	movs	r3, #0
 8006a94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d3b5      	bcc.n	8006a3a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006aee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006af0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d105      	bne.n	8006b04 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f043 0210 	orr.w	r2, r3, #16
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699a      	ldr	r2, [r3, #24]
 8006b08:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <USB_DevInit+0x2c4>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b10:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f043 0208 	orr.w	r2, r3, #8
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d107      	bne.n	8006b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b34:	f043 0304 	orr.w	r3, r3, #4
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b48:	b004      	add	sp, #16
 8006b4a:	4770      	bx	lr
 8006b4c:	803c3800 	.word	0x803c3800

08006b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3301      	adds	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b6a:	d901      	bls.n	8006b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e01b      	b.n	8006ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	daf2      	bge.n	8006b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	019b      	lsls	r3, r3, #6
 8006b80:	f043 0220 	orr.w	r2, r3, #32
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006b94:	d901      	bls.n	8006b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e006      	b.n	8006ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d0f0      	beq.n	8006b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006bcc:	d901      	bls.n	8006bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e018      	b.n	8006c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	daf2      	bge.n	8006bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2210      	movs	r2, #16
 8006be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	3301      	adds	r3, #1
 8006be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006bf0:	d901      	bls.n	8006bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e006      	b.n	8006c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f003 0310 	and.w	r3, r3, #16
 8006bfe:	2b10      	cmp	r3, #16
 8006c00:	d0f0      	beq.n	8006be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	78fb      	ldrb	r3, [r7, #3]
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c30:	4313      	orrs	r3, r2
 8006c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c70:	f043 0302 	orr.w	r3, r3, #2
 8006c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	f003 0301 	and.w	r3, r3, #1
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006cb8:	d901      	bls.n	8006cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e01b      	b.n	8006cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	daf2      	bge.n	8006cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f043 0201 	orr.w	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006ce2:	d901      	bls.n	8006ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e006      	b.n	8006cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d0f0      	beq.n	8006cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <memset>:
 8006d02:	4402      	add	r2, r0
 8006d04:	4603      	mov	r3, r0
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d100      	bne.n	8006d0c <memset+0xa>
 8006d0a:	4770      	bx	lr
 8006d0c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d10:	e7f9      	b.n	8006d06 <memset+0x4>
	...

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4d0d      	ldr	r5, [pc, #52]	; (8006d4c <__libc_init_array+0x38>)
 8006d18:	4c0d      	ldr	r4, [pc, #52]	; (8006d50 <__libc_init_array+0x3c>)
 8006d1a:	1b64      	subs	r4, r4, r5
 8006d1c:	10a4      	asrs	r4, r4, #2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	4d0b      	ldr	r5, [pc, #44]	; (8006d54 <__libc_init_array+0x40>)
 8006d26:	4c0c      	ldr	r4, [pc, #48]	; (8006d58 <__libc_init_array+0x44>)
 8006d28:	f000 f826 	bl	8006d78 <_init>
 8006d2c:	1b64      	subs	r4, r4, r5
 8006d2e:	10a4      	asrs	r4, r4, #2
 8006d30:	2600      	movs	r6, #0
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	08006dec 	.word	0x08006dec
 8006d50:	08006dec 	.word	0x08006dec
 8006d54:	08006dec 	.word	0x08006dec
 8006d58:	08006df0 	.word	0x08006df0

08006d5c <memcpy>:
 8006d5c:	440a      	add	r2, r1
 8006d5e:	4291      	cmp	r1, r2
 8006d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d64:	d100      	bne.n	8006d68 <memcpy+0xc>
 8006d66:	4770      	bx	lr
 8006d68:	b510      	push	{r4, lr}
 8006d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d72:	4291      	cmp	r1, r2
 8006d74:	d1f9      	bne.n	8006d6a <memcpy+0xe>
 8006d76:	bd10      	pop	{r4, pc}

08006d78 <_init>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr

08006d84 <_fini>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr
