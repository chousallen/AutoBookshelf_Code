
testUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b84  08004b84  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b8c  08004b8c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000a70  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a80  20000a80  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f645  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000020e7  00000000  00000000  0002f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c18  00000000  00000000  000317b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000955  00000000  00000000  000323c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023eac  00000000  00000000  00032d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000db53  00000000  00000000  00056bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000da138  00000000  00000000  0006471c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000332c  00000000  00000000  0013e854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00141b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004b4c 	.word	0x08004b4c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08004b4c 	.word	0x08004b4c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <BT_Config>:
uint8_t TX_CPLT, RX_CPLT;
UART_HandleTypeDef *huart;


void BT_Config(UART_HandleTypeDef *_huart, uint8_t _message_len)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
 80004f0:	460b      	mov	r3, r1
 80004f2:	70fb      	strb	r3, [r7, #3]
	huart = _huart;
 80004f4:	4a05      	ldr	r2, [pc, #20]	; (800050c <BT_Config+0x24>)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6013      	str	r3, [r2, #0]
	MES_LEN = _message_len;
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <BT_Config+0x28>)
 80004fc:	78fb      	ldrb	r3, [r7, #3]
 80004fe:	7013      	strb	r3, [r2, #0]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	20000234 	.word	0x20000234
 8000510:	2000002c 	.word	0x2000002c

08000514 <BT_Start_Receive>:

void BT_Start_Receive()
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart, rx_buff, MES_LEN);
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <BT_Start_Receive+0x1c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <BT_Start_Receive+0x20>)
 800051e:	7812      	ldrb	r2, [r2, #0]
 8000520:	b292      	uxth	r2, r2
 8000522:	4905      	ldr	r1, [pc, #20]	; (8000538 <BT_Start_Receive+0x24>)
 8000524:	4618      	mov	r0, r3
 8000526:	f002 fec7 	bl	80032b8 <HAL_UART_Receive_DMA>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000234 	.word	0x20000234
 8000534:	2000002c 	.word	0x2000002c
 8000538:	20000130 	.word	0x20000130

0800053c <BT_Transmit>:

void BT_Transmit(uint8_t *_tx_buff)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	memcpy(tx_buff, _tx_buff, MES_LEN);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <BT_Transmit+0x38>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	6879      	ldr	r1, [r7, #4]
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <BT_Transmit+0x3c>)
 800054e:	f004 faef 	bl	8004b30 <memcpy>
	HAL_UART_Transmit_DMA(huart, tx_buff, MES_LEN);
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <BT_Transmit+0x40>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <BT_Transmit+0x38>)
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	b292      	uxth	r2, r2
 800055c:	4906      	ldr	r1, [pc, #24]	; (8000578 <BT_Transmit+0x3c>)
 800055e:	4618      	mov	r0, r3
 8000560:	f002 fe3a 	bl	80031d8 <HAL_UART_Transmit_DMA>
	TX_CPLT = 0;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <BT_Transmit+0x44>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000030 	.word	0x20000030
 800057c:	20000234 	.word	0x20000234
 8000580:	20000230 	.word	0x20000230

08000584 <BT_Tx_Cplt>:

void BT_Tx_Cplt()
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	TX_CPLT = 1;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <BT_Tx_Cplt+0x14>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	20000230 	.word	0x20000230

0800059c <BT_Rx_Cplt>:

const uint8_t* BT_Rx_Cplt()
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart, rx_buff, MES_LEN);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <BT_Rx_Cplt+0x1c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <BT_Rx_Cplt+0x20>)
 80005a6:	7812      	ldrb	r2, [r2, #0]
 80005a8:	b292      	uxth	r2, r2
 80005aa:	4905      	ldr	r1, [pc, #20]	; (80005c0 <BT_Rx_Cplt+0x24>)
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fe83 	bl	80032b8 <HAL_UART_Receive_DMA>
	return rx_buff;
 80005b2:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <BT_Rx_Cplt+0x24>)
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000234 	.word	0x20000234
 80005bc:	2000002c 	.word	0x2000002c
 80005c0:	20000130 	.word	0x20000130

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fd43 	bl	8001054 <HAL_Init>

  /* USER CODE BEGIN Init */
  for(int i=0; i<MESSAGE_LENGTH; i++)
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	e007      	b.n	80005e4 <main+0x20>
  {
	  transmit[i] = 0x2A;
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <main+0x60>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	222a      	movs	r2, #42	; 0x2a
 80005dc:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<MESSAGE_LENGTH; i++)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3301      	adds	r3, #1
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b0f      	cmp	r3, #15
 80005e8:	ddf4      	ble.n	80005d4 <main+0x10>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f821 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 f957 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f2:	f000 f92d 	bl	8000850 <MX_DMA_Init>
  MX_ETH_Init();
 80005f6:	f000 f885 	bl	8000704 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fa:	f000 f8fb 	bl	80007f4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f8cf 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  BT_Config(bt_huart, MESSAGE_LENGTH);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <main+0x64>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2110      	movs	r1, #16
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ff6d 	bl	80004e8 <BT_Config>
  BT_Start_Receive();
 800060e:	f7ff ff81 	bl	8000514 <BT_Start_Receive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	4805      	ldr	r0, [pc, #20]	; (800062c <main+0x68>)
 8000616:	f001 ffb4 	bl	8002582 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 800061a:	20c8      	movs	r0, #200	; 0xc8
 800061c:	f000 fd8c 	bl	8001138 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000620:	e7f7      	b.n	8000612 <main+0x4e>
 8000622:	bf00      	nop
 8000624:	20000a5c 	.word	0x20000a5c
 8000628:	20000000 	.word	0x20000000
 800062c:	40020400 	.word	0x40020400

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f004 fa49 	bl	8004ad6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xcc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xcc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xcc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xd0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a21      	ldr	r2, [pc, #132]	; (8000700 <SystemClock_Config+0xd0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <SystemClock_Config+0xd0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000690:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a4:	23a8      	movs	r3, #168	; 0xa8
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f002 f8a7 	bl	8002808 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c0:	f000 fa1a 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	230f      	movs	r3, #15
 80006c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c8:	2302      	movs	r3, #2
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 fb08 	bl	8002cf8 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ee:	f000 fa03 	bl	8000af8 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_ETH_Init+0x84>)
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <MX_ETH_Init+0x88>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_ETH_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_ETH_Init+0x8c>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ETH_Init+0x8c>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ETH_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_ETH_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_ETH_Init+0x84>)
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_ETH_Init+0x8c>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ETH_Init+0x84>)
 800073a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800073e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ETH_Init+0x84>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <MX_ETH_Init+0x90>)
 8000744:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_ETH_Init+0x84>)
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_ETH_Init+0x94>)
 800074a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ETH_Init+0x84>)
 800074e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000752:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_ETH_Init+0x84>)
 8000756:	f001 fa27 	bl	8001ba8 <HAL_ETH_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f9ca 	bl	8000af8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000764:	2238      	movs	r2, #56	; 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_ETH_Init+0x98>)
 800076a:	f004 f9b4 	bl	8004ad6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_ETH_Init+0x98>)
 8000770:	2221      	movs	r2, #33	; 0x21
 8000772:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_ETH_Init+0x98>)
 8000776:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800077a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_ETH_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200003b0 	.word	0x200003b0
 800078c:	40028000 	.word	0x40028000
 8000790:	20000a74 	.word	0x20000a74
 8000794:	20000310 	.word	0x20000310
 8000798:	20000270 	.word	0x20000270
 800079c:	20000238 	.word	0x20000238

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f002 fcae 	bl	8003138 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f989 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	20000460 	.word	0x20000460
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000802:	2204      	movs	r2, #4
 8000804:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000808:	2202      	movs	r2, #2
 800080a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000814:	2202      	movs	r2, #2
 8000816:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800081a:	2201      	movs	r2, #1
 800081c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800082c:	2201      	movs	r2, #1
 800082e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000838:	f001 fed6 	bl	80025e8 <HAL_PCD_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f959 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000568 	.word	0x20000568

08000850 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_DMA_Init+0x4c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <MX_DMA_Init+0x4c>)
 8000860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_DMA_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2010      	movs	r0, #16
 8000878:	f000 fd5d 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800087c:	2010      	movs	r0, #16
 800087e:	f000 fd76 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2011      	movs	r0, #17
 8000888:	f000 fd55 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800088c:	2011      	movs	r0, #17
 800088e:	f000 fd6e 	bl	800136e <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4b58      	ldr	r3, [pc, #352]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a57      	ldr	r2, [pc, #348]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b55      	ldr	r3, [pc, #340]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b51      	ldr	r3, [pc, #324]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a50      	ldr	r2, [pc, #320]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b4e      	ldr	r3, [pc, #312]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a49      	ldr	r2, [pc, #292]	; (8000a1c <MX_GPIO_Init+0x17c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b47      	ldr	r3, [pc, #284]	; (8000a1c <MX_GPIO_Init+0x17c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <MX_GPIO_Init+0x17c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a42      	ldr	r2, [pc, #264]	; (8000a1c <MX_GPIO_Init+0x17c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b40      	ldr	r3, [pc, #256]	; (8000a1c <MX_GPIO_Init+0x17c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <MX_GPIO_Init+0x17c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a3b      	ldr	r2, [pc, #236]	; (8000a1c <MX_GPIO_Init+0x17c>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b39      	ldr	r3, [pc, #228]	; (8000a1c <MX_GPIO_Init+0x17c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <MX_GPIO_Init+0x17c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a34      	ldr	r2, [pc, #208]	; (8000a1c <MX_GPIO_Init+0x17c>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <MX_GPIO_Init+0x17c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	f244 0181 	movw	r1, #16513	; 0x4081
 8000964:	482e      	ldr	r0, [pc, #184]	; (8000a20 <MX_GPIO_Init+0x180>)
 8000966:	f001 fdf3 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	482d      	ldr	r0, [pc, #180]	; (8000a24 <MX_GPIO_Init+0x184>)
 8000970:	f001 fdee 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000980:	2302      	movs	r3, #2
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4827      	ldr	r0, [pc, #156]	; (8000a28 <MX_GPIO_Init+0x188>)
 800098c:	f001 fc34 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000990:	f244 0381 	movw	r3, #16513	; 0x4081
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	481d      	ldr	r0, [pc, #116]	; (8000a20 <MX_GPIO_Init+0x180>)
 80009aa:	f001 fc25 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009c0:	2307      	movs	r3, #7
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4818      	ldr	r0, [pc, #96]	; (8000a2c <MX_GPIO_Init+0x18c>)
 80009cc:	f001 fc14 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d0:	2340      	movs	r3, #64	; 0x40
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_GPIO_Init+0x184>)
 80009e8:	f001 fc06 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_GPIO_Init+0x184>)
 8000a00:	f001 fbfa 	bl	80021f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2028      	movs	r0, #40	; 0x28
 8000a0a:	f000 fc94 	bl	8001336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a0e:	2028      	movs	r0, #40	; 0x28
 8000a10:	f000 fcad 	bl	800136e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a14:	bf00      	nop
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000a3a:	88fb      	ldrh	r3, [r7, #6]
 8000a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a40:	d107      	bne.n	8000a52 <HAL_GPIO_EXTI_Callback+0x22>
	{
		BT_Transmit(transmit);
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a44:	f7ff fd7a 	bl	800053c <BT_Transmit>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a4e:	f001 fd7f 	bl	8002550 <HAL_GPIO_WritePin>
	}
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000a5c 	.word	0x20000a5c
 8000a60:	40020400 	.word	0x40020400

08000a64 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(huart == bt_huart)
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_UART_TxCpltCallback+0x34>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d10b      	bne.n	8000a8e <HAL_UART_TxCpltCallback+0x2a>
	{
		uartTxIT++;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_UART_TxCpltCallback+0x38>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_UART_TxCpltCallback+0x38>)
 8000a7e:	6013      	str	r3, [r2, #0]
		BT_Tx_Cplt();
 8000a80:	f7ff fd80 	bl	8000584 <BT_Tx_Cplt>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2101      	movs	r1, #1
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_UART_TxCpltCallback+0x3c>)
 8000a8a:	f001 fd61 	bl	8002550 <HAL_GPIO_WritePin>
	}
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000a70 	.word	0x20000a70
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(huart == bt_huart)
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <HAL_UART_RxCpltCallback+0x44>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d114      	bne.n	8000ae0 <HAL_UART_RxCpltCallback+0x3c>
  {
	  uartRxIT++;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_UART_RxCpltCallback+0x48>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <HAL_UART_RxCpltCallback+0x48>)
 8000abe:	6013      	str	r3, [r2, #0]
	  const uint8_t *tmp;
	  tmp = BT_Rx_Cplt();
 8000ac0:	f7ff fd6c 	bl	800059c <BT_Rx_Cplt>
 8000ac4:	60f8      	str	r0, [r7, #12]
	  memcpy(receive, tmp, MESSAGE_LENGTH);
 8000ac6:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <HAL_UART_RxCpltCallback+0x4c>)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4614      	mov	r4, r2
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	6859      	ldr	r1, [r3, #4]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ada:	4806      	ldr	r0, [pc, #24]	; (8000af4 <HAL_UART_RxCpltCallback+0x50>)
 8000adc:	f001 fd51 	bl	8002582 <HAL_GPIO_TogglePin>
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000a6c 	.word	0x20000a6c
 8000af0:	20000a4c 	.word	0x20000a4c
 8000af4:	40020400 	.word	0x40020400

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a55      	ldr	r2, [pc, #340]	; (8000cc8 <HAL_ETH_MspInit+0x174>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	f040 80a4 	bne.w	8000cc0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
 8000b7c:	4b53      	ldr	r3, [pc, #332]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a52      	ldr	r2, [pc, #328]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000b82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b90:	623b      	str	r3, [r7, #32]
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
 8000b98:	4b4c      	ldr	r3, [pc, #304]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b49      	ldr	r3, [pc, #292]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bac:	61fb      	str	r3, [r7, #28]
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	4b45      	ldr	r3, [pc, #276]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	4a44      	ldr	r2, [pc, #272]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc0:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	4b3e      	ldr	r3, [pc, #248]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	4a3d      	ldr	r2, [pc, #244]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6313      	str	r3, [r2, #48]	; 0x30
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf8:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c30:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <HAL_ETH_MspInit+0x178>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c3c:	2332      	movs	r3, #50	; 0x32
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <HAL_ETH_MspInit+0x17c>)
 8000c58:	f001 face 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c5c:	2386      	movs	r3, #134	; 0x86
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	4817      	ldr	r0, [pc, #92]	; (8000cd4 <HAL_ETH_MspInit+0x180>)
 8000c78:	f001 fabe 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	480f      	ldr	r0, [pc, #60]	; (8000cd8 <HAL_ETH_MspInit+0x184>)
 8000c9a:	f001 faad 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4808      	ldr	r0, [pc, #32]	; (8000cdc <HAL_ETH_MspInit+0x188>)
 8000cbc:	f001 fa9c 	bl	80021f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40028000 	.word	0x40028000
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	40021800 	.word	0x40021800

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a5a      	ldr	r2, [pc, #360]	; (8000e68 <HAL_UART_MspInit+0x188>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	f040 80ae 	bne.w	8000e60 <HAL_UART_MspInit+0x180>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	4b58      	ldr	r3, [pc, #352]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a57      	ldr	r2, [pc, #348]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	4b51      	ldr	r3, [pc, #324]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a50      	ldr	r2, [pc, #320]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d2a:	f043 0301 	orr.w	r3, r3, #1
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d30:	4b4e      	ldr	r3, [pc, #312]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a49      	ldr	r2, [pc, #292]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <HAL_UART_MspInit+0x18c>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	483f      	ldr	r0, [pc, #252]	; (8000e70 <HAL_UART_MspInit+0x190>)
 8000d74:	f001 fa40 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d78:	2320      	movs	r3, #32
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4838      	ldr	r0, [pc, #224]	; (8000e74 <HAL_UART_MspInit+0x194>)
 8000d94:	f001 fa30 	bl	80021f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d98:	4b37      	ldr	r3, [pc, #220]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000d9a:	4a38      	ldr	r2, [pc, #224]	; (8000e7c <HAL_UART_MspInit+0x19c>)
 8000d9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da6:	4b34      	ldr	r3, [pc, #208]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000da8:	2240      	movs	r2, #64	; 0x40
 8000daa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd2:	4b29      	ldr	r3, [pc, #164]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dd8:	4827      	ldr	r0, [pc, #156]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dda:	f000 fae3 	bl	80013a4 <HAL_DMA_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8000de4:	f7ff fe88 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
 8000dee:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <HAL_UART_MspInit+0x198>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000df6:	4a23      	ldr	r2, [pc, #140]	; (8000e84 <HAL_UART_MspInit+0x1a4>)
 8000df8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000dfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e00:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e02:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e34:	4812      	ldr	r0, [pc, #72]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e36:	f000 fab5 	bl	80013a4 <HAL_DMA_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8000e40:	f7ff fe5a 	bl	8000af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e48:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e4a:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_UART_MspInit+0x1a0>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2100      	movs	r1, #0
 8000e54:	2026      	movs	r0, #38	; 0x26
 8000e56:	f000 fa6e 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e5a:	2026      	movs	r0, #38	; 0x26
 8000e5c:	f000 fa87 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40004400 	.word	0x40004400
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020c00 	.word	0x40020c00
 8000e78:	200004a8 	.word	0x200004a8
 8000e7c:	400260a0 	.word	0x400260a0
 8000e80:	20000508 	.word	0x20000508
 8000e84:	40026088 	.word	0x40026088

08000e88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea8:	d13f      	bne.n	8000f2a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ec6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed8:	230a      	movs	r3, #10
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4815      	ldr	r0, [pc, #84]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000ee4:	f001 f988 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <HAL_PCD_MspInit+0xb0>)
 8000efe:	f001 f97b 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_PCD_MspInit+0xac>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f40:	e7fe      	b.n	8000f40 <NMI_Handler+0x4>

08000f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <HardFault_Handler+0x4>

08000f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <MemManage_Handler+0x4>

08000f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f88:	f000 f8b6 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA1_Stream5_IRQHandler+0x10>)
 8000f96:	f000 fb9d 	bl	80016d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000508 	.word	0x20000508

08000fa4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Stream6_IRQHandler+0x10>)
 8000faa:	f000 fb93 	bl	80016d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200004a8 	.word	0x200004a8

08000fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <USART2_IRQHandler+0x10>)
 8000fbe:	f002 f9a1 	bl	8003304 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000460 	.word	0x20000460

08000fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fd4:	f001 faf0 	bl	80025b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001004:	f7ff ffea 	bl	8000fdc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800102e:	f003 fd5b 	bl	8004ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fac7 	bl	80005c4 <main>
  bx  lr    
 8001036:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001038:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001044:	08004b94 	.word	0x08004b94
  ldr r2, =_sbss
 8001048:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800104c:	20000a80 	.word	0x20000a80

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_Init+0x40>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <HAL_Init+0x40>)
 800105e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001062:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_Init+0x40>)
 800106a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x40>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x40>)
 8001076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 f94f 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	2000      	movs	r0, #0
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fd3c 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f967 	bl	800138a <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 f92f 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000004 	.word	0x20000004
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000008 	.word	0x20000008

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000000c 	.word	0x2000000c
 800111c:	20000a7c 	.word	0x20000a7c

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000a7c 	.word	0x20000a7c

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d005      	beq.n	800115e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_Delay+0x44>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4413      	add	r3, r2
 800115c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115e:	bf00      	nop
 8001160:	f7ff ffde 	bl	8001120 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f7      	bhi.n	8001160 <HAL_Delay+0x28>
  {
  }
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b2:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	60d3      	str	r3, [r2, #12]
}
 80011b8:	bf00      	nop
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	db0b      	blt.n	800120e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	f003 021f 	and.w	r2, r3, #31
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <__NVIC_EnableIRQ+0x38>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	2001      	movs	r0, #1
 8001206:	fa00 f202 	lsl.w	r2, r0, r2
 800120a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000e100 	.word	0xe000e100

08001220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	6039      	str	r1, [r7, #0]
 800122a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db0a      	blt.n	800124a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	490c      	ldr	r1, [pc, #48]	; (800126c <__NVIC_SetPriority+0x4c>)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	0112      	lsls	r2, r2, #4
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	440b      	add	r3, r1
 8001244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001248:	e00a      	b.n	8001260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <__NVIC_SetPriority+0x50>)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	3b04      	subs	r3, #4
 8001258:	0112      	lsls	r2, r2, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	440b      	add	r3, r1
 800125e:	761a      	strb	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000e100 	.word	0xe000e100
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001274:	b480      	push	{r7}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f1c3 0307 	rsb	r3, r3, #7
 800128e:	2b04      	cmp	r3, #4
 8001290:	bf28      	it	cs
 8001292:	2304      	movcs	r3, #4
 8001294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3304      	adds	r3, #4
 800129a:	2b06      	cmp	r3, #6
 800129c:	d902      	bls.n	80012a4 <NVIC_EncodePriority+0x30>
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3b03      	subs	r3, #3
 80012a2:	e000      	b.n	80012a6 <NVIC_EncodePriority+0x32>
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	f04f 32ff 	mov.w	r2, #4294967295
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012bc:	f04f 31ff 	mov.w	r1, #4294967295
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	43d9      	mvns	r1, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	4313      	orrs	r3, r2
         );
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff8e 	bl	8001220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff29 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff3e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff8e 	bl	8001274 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5d 	bl	8001220 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff31 	bl	80011e4 <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff feb6 	bl	8001120 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e099      	b.n	80014f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0201 	bic.w	r2, r2, #1
 80013de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e0:	e00f      	b.n	8001402 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e2:	f7ff fe9d 	bl	8001120 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d908      	bls.n	8001402 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2220      	movs	r2, #32
 80013f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e078      	b.n	80014f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e8      	bne.n	80013e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_DMA_Init+0x158>)
 800141c:	4013      	ands	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800142e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001446:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	2b04      	cmp	r3, #4
 800145a:	d107      	bne.n	800146c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4313      	orrs	r3, r2
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f023 0307 	bic.w	r3, r3, #7
 8001482:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	4313      	orrs	r3, r2
 800148c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	2b04      	cmp	r3, #4
 8001494:	d117      	bne.n	80014c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4313      	orrs	r3, r2
 800149e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00e      	beq.n	80014c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fb01 	bl	8001ab0 <DMA_CheckFifoParam>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d008      	beq.n	80014c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014c2:	2301      	movs	r3, #1
 80014c4:	e016      	b.n	80014f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fab8 	bl	8001a44 <DMA_CalcBaseAndBitshift>
 80014d4:	4603      	mov	r3, r0
 80014d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	223f      	movs	r2, #63	; 0x3f
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	f010803f 	.word	0xf010803f

08001500 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_DMA_Start_IT+0x26>
 8001522:	2302      	movs	r3, #2
 8001524:	e040      	b.n	80015a8 <HAL_DMA_Start_IT+0xa8>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d12f      	bne.n	800159a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2202      	movs	r2, #2
 800153e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 fa4a 	bl	80019e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	223f      	movs	r2, #63	; 0x3f
 800155a:	409a      	lsls	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0216 	orr.w	r2, r2, #22
 800156e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0208 	orr.w	r2, r2, #8
 8001586:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	e005      	b.n	80015a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
 80015a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015be:	f7ff fdaf 	bl	8001120 <HAL_GetTick>
 80015c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d008      	beq.n	80015e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2280      	movs	r2, #128	; 0x80
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e052      	b.n	8001688 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0216 	bic.w	r2, r2, #22
 80015f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001600:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d103      	bne.n	8001612 <HAL_DMA_Abort+0x62>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	2b00      	cmp	r3, #0
 8001610:	d007      	beq.n	8001622 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0208 	bic.w	r2, r2, #8
 8001620:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001632:	e013      	b.n	800165c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001634:	f7ff fd74 	bl	8001120 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b05      	cmp	r3, #5
 8001640:	d90c      	bls.n	800165c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2220      	movs	r2, #32
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2203      	movs	r2, #3
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e015      	b.n	8001688 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e4      	bne.n	8001634 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166e:	223f      	movs	r2, #63	; 0x3f
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d004      	beq.n	80016ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00c      	b.n	80016c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2205      	movs	r2, #5
 80016b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016e0:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_DMA_IRQHandler+0x248>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a8e      	ldr	r2, [pc, #568]	; (8001920 <HAL_DMA_IRQHandler+0x24c>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0a9b      	lsrs	r3, r3, #10
 80016ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2208      	movs	r2, #8
 8001700:	409a      	lsls	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01a      	beq.n	8001740 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0204 	bic.w	r2, r2, #4
 8001726:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800172c:	2208      	movs	r2, #8
 800172e:	409a      	lsls	r2, r3
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001744:	2201      	movs	r2, #1
 8001746:	409a      	lsls	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d012      	beq.n	8001776 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001762:	2201      	movs	r2, #1
 8001764:	409a      	lsls	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176e:	f043 0202 	orr.w	r2, r3, #2
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177a:	2204      	movs	r2, #4
 800177c:	409a      	lsls	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d012      	beq.n	80017ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00b      	beq.n	80017ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001798:	2204      	movs	r2, #4
 800179a:	409a      	lsls	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	2210      	movs	r2, #16
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d043      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d03c      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ce:	2210      	movs	r2, #16
 80017d0:	409a      	lsls	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d024      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
 8001802:	e01f      	b.n	8001844 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001808:	2b00      	cmp	r3, #0
 800180a:	d01b      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
 8001814:	e016      	b.n	8001844 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0208 	bic.w	r2, r2, #8
 8001832:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2220      	movs	r2, #32
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 808f 	beq.w	8001974 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 8087 	beq.w	8001974 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2220      	movs	r2, #32
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b05      	cmp	r3, #5
 800187c:	d136      	bne.n	80018ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f022 0216 	bic.w	r2, r2, #22
 800188c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800189c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d103      	bne.n	80018ae <HAL_DMA_IRQHandler+0x1da>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0208 	bic.w	r2, r2, #8
 80018bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c2:	223f      	movs	r2, #63	; 0x3f
 80018c4:	409a      	lsls	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d07e      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	4798      	blx	r3
        }
        return;
 80018ea:	e079      	b.n	80019e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d01d      	beq.n	8001936 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10d      	bne.n	8001924 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190c:	2b00      	cmp	r3, #0
 800190e:	d031      	beq.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	4798      	blx	r3
 8001918:	e02c      	b.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
 800191a:	bf00      	nop
 800191c:	20000004 	.word	0x20000004
 8001920:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d023      	beq.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
 8001934:	e01e      	b.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10f      	bne.n	8001964 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0210 	bic.w	r2, r2, #16
 8001952:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	2b00      	cmp	r3, #0
 800197a:	d032      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d022      	beq.n	80019ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2205      	movs	r2, #5
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d307      	bcc.n	80019bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f2      	bne.n	80019a0 <HAL_DMA_IRQHandler+0x2cc>
 80019ba:	e000      	b.n	80019be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
 80019de:	e000      	b.n	80019e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019e0:	bf00      	nop
    }
  }
}
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b40      	cmp	r3, #64	; 0x40
 8001a14:	d108      	bne.n	8001a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a26:	e007      	b.n	8001a38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	60da      	str	r2, [r3, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3b10      	subs	r3, #16
 8001a54:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	091b      	lsrs	r3, r3, #4
 8001a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <DMA_CalcBaseAndBitshift+0x68>)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d909      	bls.n	8001a86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	1d1a      	adds	r2, r3, #4
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	659a      	str	r2, [r3, #88]	; 0x58
 8001a84:	e007      	b.n	8001a96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a8e:	f023 0303 	bic.w	r3, r3, #3
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	aaaaaaab 	.word	0xaaaaaaab
 8001aac:	08004b7c 	.word	0x08004b7c

08001ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d11f      	bne.n	8001b0a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b03      	cmp	r3, #3
 8001ace:	d856      	bhi.n	8001b7e <DMA_CheckFifoParam+0xce>
 8001ad0:	a201      	add	r2, pc, #4	; (adr r2, 8001ad8 <DMA_CheckFifoParam+0x28>)
 8001ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad6:	bf00      	nop
 8001ad8:	08001ae9 	.word	0x08001ae9
 8001adc:	08001afb 	.word	0x08001afb
 8001ae0:	08001ae9 	.word	0x08001ae9
 8001ae4:	08001b7f 	.word	0x08001b7f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d046      	beq.n	8001b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af8:	e043      	b.n	8001b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b02:	d140      	bne.n	8001b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b08:	e03d      	b.n	8001b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b12:	d121      	bne.n	8001b58 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d837      	bhi.n	8001b8a <DMA_CheckFifoParam+0xda>
 8001b1a:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <DMA_CheckFifoParam+0x70>)
 8001b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b20:	08001b31 	.word	0x08001b31
 8001b24:	08001b37 	.word	0x08001b37
 8001b28:	08001b31 	.word	0x08001b31
 8001b2c:	08001b49 	.word	0x08001b49
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
      break;
 8001b34:	e030      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d025      	beq.n	8001b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b46:	e022      	b.n	8001b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b50:	d11f      	bne.n	8001b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b56:	e01c      	b.n	8001b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d903      	bls.n	8001b66 <DMA_CheckFifoParam+0xb6>
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d003      	beq.n	8001b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b64:	e018      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
      break;
 8001b6a:	e015      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00e      	beq.n	8001b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b7c:	e00b      	b.n	8001b96 <DMA_CheckFifoParam+0xe6>
      break;
 8001b7e:	bf00      	nop
 8001b80:	e00a      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b82:	bf00      	nop
 8001b84:	e008      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b86:	bf00      	nop
 8001b88:	e006      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8a:	bf00      	nop
 8001b8c:	e004      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b8e:	bf00      	nop
 8001b90:	e002      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b92:	bf00      	nop
 8001b94:	e000      	b.n	8001b98 <DMA_CheckFifoParam+0xe8>
      break;
 8001b96:	bf00      	nop
    }
  } 
  
  return status; 
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop

08001ba8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e06c      	b.n	8001c94 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d106      	bne.n	8001bd2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2223      	movs	r2, #35	; 0x23
 8001bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7fe ffc1 	bl	8000b54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <HAL_ETH_Init+0xf4>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a30      	ldr	r2, [pc, #192]	; (8001c9c <HAL_ETH_Init+0xf4>)
 8001bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b2e      	ldr	r3, [pc, #184]	; (8001c9c <HAL_ETH_Init+0xf4>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_ETH_Init+0xf8>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_ETH_Init+0xf8>)
 8001bf4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bf8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_ETH_Init+0xf8>)
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	4927      	ldr	r1, [pc, #156]	; (8001ca0 <HAL_ETH_Init+0xf8>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_ETH_Init+0xf8>)
 8001c0a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c24:	f7ff fa7c 	bl	8001120 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c2a:	e011      	b.n	8001c50 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c2c:	f7ff fa78 	bl	8001120 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c3a:	d909      	bls.n	8001c50 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	22e0      	movs	r2, #224	; 0xe0
 8001c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e021      	b.n	8001c94 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e4      	bne.n	8001c2c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f958 	bl	8001f18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f9ff 	bl	800206c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 fa55 	bl	800211e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f9bd 	bl	8001ffc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40013800 	.word	0x40013800

08001ca4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <ETH_SetMACConfig+0x15c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	7c1b      	ldrb	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <ETH_SetMACConfig+0x28>
 8001cc6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cca:	e000      	b.n	8001cce <ETH_SetMACConfig+0x2a>
 8001ccc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	7c5b      	ldrb	r3, [r3, #17]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <ETH_SetMACConfig+0x38>
 8001cd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001cda:	e000      	b.n	8001cde <ETH_SetMACConfig+0x3a>
 8001cdc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cde:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ce4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	7fdb      	ldrb	r3, [r3, #31]
 8001cea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cf2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	7f92      	ldrb	r2, [r2, #30]
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	d102      	bne.n	8001d02 <ETH_SetMACConfig+0x5e>
 8001cfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d00:	e000      	b.n	8001d04 <ETH_SetMACConfig+0x60>
 8001d02:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	7f1b      	ldrb	r3, [r3, #28]
 8001d0a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d0c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d12:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d22:	2a00      	cmp	r2, #0
 8001d24:	d102      	bne.n	8001d2c <ETH_SetMACConfig+0x88>
 8001d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d2a:	e000      	b.n	8001d2e <ETH_SetMACConfig+0x8a>
 8001d2c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d2e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	7bdb      	ldrb	r3, [r3, #15]
 8001d34:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d36:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d3c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d44:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d46:	4313      	orrs	r3, r2
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff f9ea 	bl	8001138 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d101      	bne.n	8001d92 <ETH_SetMACConfig+0xee>
 8001d8e:	2280      	movs	r2, #128	; 0x80
 8001d90:	e000      	b.n	8001d94 <ETH_SetMACConfig+0xf0>
 8001d92:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d94:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001da2:	2a01      	cmp	r2, #1
 8001da4:	d101      	bne.n	8001daa <ETH_SetMACConfig+0x106>
 8001da6:	2208      	movs	r2, #8
 8001da8:	e000      	b.n	8001dac <ETH_SetMACConfig+0x108>
 8001daa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001dac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001db4:	2a01      	cmp	r2, #1
 8001db6:	d101      	bne.n	8001dbc <ETH_SetMACConfig+0x118>
 8001db8:	2204      	movs	r2, #4
 8001dba:	e000      	b.n	8001dbe <ETH_SetMACConfig+0x11a>
 8001dbc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001dc6:	2a01      	cmp	r2, #1
 8001dc8:	d101      	bne.n	8001dce <ETH_SetMACConfig+0x12a>
 8001dca:	2202      	movs	r2, #2
 8001dcc:	e000      	b.n	8001dd0 <ETH_SetMACConfig+0x12c>
 8001dce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff f9a5 	bl	8001138 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	ff20810f 	.word	0xff20810f

08001e04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <ETH_SetDMAConfig+0x110>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7b1b      	ldrb	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d102      	bne.n	8001e30 <ETH_SetDMAConfig+0x2c>
 8001e2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e2e:	e000      	b.n	8001e32 <ETH_SetDMAConfig+0x2e>
 8001e30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	7b5b      	ldrb	r3, [r3, #13]
 8001e36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	7f52      	ldrb	r2, [r2, #29]
 8001e3e:	2a00      	cmp	r2, #0
 8001e40:	d102      	bne.n	8001e48 <ETH_SetDMAConfig+0x44>
 8001e42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e46:	e000      	b.n	8001e4a <ETH_SetDMAConfig+0x46>
 8001e48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	7b9b      	ldrb	r3, [r3, #14]
 8001e50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	7f1b      	ldrb	r3, [r3, #28]
 8001e5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7f9b      	ldrb	r3, [r3, #30]
 8001e66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff f94c 	bl	8001138 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	791b      	ldrb	r3, [r3, #4]
 8001eb2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eb8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ebe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ec4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ecc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001ece:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ed6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001edc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff f91d 	bl	8001138 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	f8de3f23 	.word	0xf8de3f23

08001f18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0a6      	sub	sp, #152	; 0x98
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f54:	2300      	movs	r3, #0
 8001f56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fe86 	bl	8001ca4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fcc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001fce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	4619      	mov	r1, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff08 	bl	8001e04 <ETH_SetDMAConfig>
}
 8001ff4:	bf00      	nop
 8001ff6:	3798      	adds	r7, #152	; 0x98
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3305      	adds	r3, #5
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	3204      	adds	r2, #4
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <ETH_MACAddressConfig+0x68>)
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3303      	adds	r3, #3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	061a      	lsls	r2, r3, #24
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3302      	adds	r3, #2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3301      	adds	r3, #1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	4313      	orrs	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <ETH_MACAddressConfig+0x6c>)
 800204e:	4413      	add	r3, r2
 8002050:	461a      	mov	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	6013      	str	r3, [r2, #0]
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40028040 	.word	0x40028040
 8002068:	40028044 	.word	0x40028044

0800206c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	e03e      	b.n	80020f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2200      	movs	r2, #0
 8002096:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	3206      	adds	r2, #6
 80020ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d80c      	bhi.n	80020dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68d9      	ldr	r1, [r3, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	60da      	str	r2, [r3, #12]
 80020da:	e004      	b.n	80020e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	461a      	mov	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3301      	adds	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d9bd      	bls.n	800207a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002110:	611a      	str	r2, [r3, #16]
}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e046      	b.n	80021ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6919      	ldr	r1, [r3, #16]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002168:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002170:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800217e:	68b9      	ldr	r1, [r7, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	3212      	adds	r2, #18
 8002186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d80c      	bhi.n	80021aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6919      	ldr	r1, [r3, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	e004      	b.n	80021b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d9b5      	bls.n	800212c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ea:	60da      	str	r2, [r3, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	; 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e177      	b.n	8002504 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 8166 	bne.w	80024fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d005      	beq.n	800224a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	2b02      	cmp	r3, #2
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80c0 	beq.w	80024fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_GPIO_Init+0x324>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a65      	ldr	r2, [pc, #404]	; (800251c <HAL_GPIO_Init+0x324>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_GPIO_Init+0x324>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a61      	ldr	r2, [pc, #388]	; (8002520 <HAL_GPIO_Init+0x328>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a58      	ldr	r2, [pc, #352]	; (8002524 <HAL_GPIO_Init+0x32c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d037      	beq.n	8002436 <HAL_GPIO_Init+0x23e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a57      	ldr	r2, [pc, #348]	; (8002528 <HAL_GPIO_Init+0x330>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_GPIO_Init+0x23a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a56      	ldr	r2, [pc, #344]	; (800252c <HAL_GPIO_Init+0x334>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_GPIO_Init+0x236>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a55      	ldr	r2, [pc, #340]	; (8002530 <HAL_GPIO_Init+0x338>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x232>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a54      	ldr	r2, [pc, #336]	; (8002534 <HAL_GPIO_Init+0x33c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x22e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a53      	ldr	r2, [pc, #332]	; (8002538 <HAL_GPIO_Init+0x340>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x22a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a52      	ldr	r2, [pc, #328]	; (800253c <HAL_GPIO_Init+0x344>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x226>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_GPIO_Init+0x348>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x222>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_GPIO_Init+0x34c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x21e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4f      	ldr	r2, [pc, #316]	; (8002548 <HAL_GPIO_Init+0x350>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x21a>
 800240e:	2309      	movs	r3, #9
 8002410:	e012      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002412:	230a      	movs	r3, #10
 8002414:	e010      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002416:	2308      	movs	r3, #8
 8002418:	e00e      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800241a:	2307      	movs	r3, #7
 800241c:	e00c      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800241e:	2306      	movs	r3, #6
 8002420:	e00a      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002422:	2305      	movs	r3, #5
 8002424:	e008      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002426:	2304      	movs	r3, #4
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800242a:	2303      	movs	r3, #3
 800242c:	e004      	b.n	8002438 <HAL_GPIO_Init+0x240>
 800242e:	2302      	movs	r3, #2
 8002430:	e002      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x240>
 8002436:	2300      	movs	r3, #0
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f002 0203 	and.w	r2, r2, #3
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	4093      	lsls	r3, r2
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002448:	4935      	ldr	r1, [pc, #212]	; (8002520 <HAL_GPIO_Init+0x328>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	3302      	adds	r3, #2
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_GPIO_Init+0x354>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800247a:	4a34      	ldr	r2, [pc, #208]	; (800254c <HAL_GPIO_Init+0x354>)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002480:	4b32      	ldr	r3, [pc, #200]	; (800254c <HAL_GPIO_Init+0x354>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024a4:	4a29      	ldr	r2, [pc, #164]	; (800254c <HAL_GPIO_Init+0x354>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <HAL_GPIO_Init+0x354>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024ce:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_GPIO_Init+0x354>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <HAL_GPIO_Init+0x354>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f8:	4a14      	ldr	r2, [pc, #80]	; (800254c <HAL_GPIO_Init+0x354>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3301      	adds	r3, #1
 8002502:	61fb      	str	r3, [r7, #28]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	f67f ae84 	bls.w	8002214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3724      	adds	r7, #36	; 0x24
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40013800 	.word	0x40013800
 8002524:	40020000 	.word	0x40020000
 8002528:	40020400 	.word	0x40020400
 800252c:	40020800 	.word	0x40020800
 8002530:	40020c00 	.word	0x40020c00
 8002534:	40021000 	.word	0x40021000
 8002538:	40021400 	.word	0x40021400
 800253c:	40021800 	.word	0x40021800
 8002540:	40021c00 	.word	0x40021c00
 8002544:	40022000 	.word	0x40022000
 8002548:	40022400 	.word	0x40022400
 800254c:	40013c00 	.word	0x40013c00

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
 800255c:	4613      	mov	r3, r2
 800255e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002560:	787b      	ldrb	r3, [r7, #1]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002566:	887a      	ldrh	r2, [r7, #2]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800256c:	e003      	b.n	8002576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	041a      	lsls	r2, r3, #16
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	619a      	str	r2, [r3, #24]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002594:	887a      	ldrh	r2, [r7, #2]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4013      	ands	r3, r2
 800259a:	041a      	lsls	r2, r3, #16
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43d9      	mvns	r1, r3
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	400b      	ands	r3, r1
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	619a      	str	r2, [r3, #24]
}
 80025aa:	bf00      	nop
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025c2:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d006      	beq.n	80025dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fa2a 	bl	8000a30 <HAL_GPIO_EXTI_Callback>
  }
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e101      	b.n	80027fe <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d106      	bne.n	800261a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fe fc37 	bl	8000e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2203      	movs	r2, #3
 800261e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002628:	d102      	bne.n	8002630 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f001 ffb3 	bl	80045a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7c1a      	ldrb	r2, [r3, #16]
 8002642:	f88d 2000 	strb.w	r2, [sp]
 8002646:	3304      	adds	r3, #4
 8002648:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264a:	f001 ff45 	bl	80044d8 <USB_CoreInit>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0ce      	b.n	80027fe <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f001 ffab 	bl	80045c2 <USB_SetCurrentMode>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0bf      	b.n	80027fe <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e04a      	b.n	800271a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3315      	adds	r3, #21
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3314      	adds	r3, #20
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	b298      	uxth	r0, r3
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	332e      	adds	r3, #46	; 0x2e
 80026c0:	4602      	mov	r2, r0
 80026c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	3318      	adds	r3, #24
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	331c      	adds	r3, #28
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	3320      	adds	r3, #32
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	3324      	adds	r3, #36	; 0x24
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3301      	adds	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3af      	bcc.n	8002684 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002724:	2300      	movs	r3, #0
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e044      	b.n	80027b4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	f203 2355 	addw	r3, r3, #597	; 0x255
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	3301      	adds	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	791b      	ldrb	r3, [r3, #4]
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3b5      	bcc.n	800272a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7c1a      	ldrb	r2, [r3, #16]
 80027c6:	f88d 2000 	strb.w	r2, [sp]
 80027ca:	3304      	adds	r3, #4
 80027cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ce:	f001 ff45 	bl	800465c <USB_DevInit>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e00c      	b.n	80027fe <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f002 f90d 	bl	8004a16 <USB_DevDisconnect>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e267      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d075      	beq.n	8002912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d00c      	beq.n	800284c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002832:	4b85      	ldr	r3, [pc, #532]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283a:	2b08      	cmp	r3, #8
 800283c:	d112      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b82      	ldr	r3, [pc, #520]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284a:	d10b      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d05b      	beq.n	8002910 <HAL_RCC_OscConfig+0x108>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d157      	bne.n	8002910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e242      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286c:	d106      	bne.n	800287c <HAL_RCC_OscConfig+0x74>
 800286e:	4b76      	ldr	r3, [pc, #472]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a75      	ldr	r2, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0x98>
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b6d      	ldr	r3, [pc, #436]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6c      	ldr	r2, [pc, #432]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xb0>
 80028a0:	4b69      	ldr	r3, [pc, #420]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a68      	ldr	r2, [pc, #416]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fe fc2e 	bl	8001120 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fe fc2a 	bl	8001120 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e207      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b5b      	ldr	r3, [pc, #364]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xc0>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fe fc1a 	bl	8001120 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe fc16 	bl	8001120 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1f3      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0xe8>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800291e:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b44      	ldr	r3, [pc, #272]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b41      	ldr	r3, [pc, #260]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1c7      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4937      	ldr	r1, [pc, #220]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b34      	ldr	r3, [pc, #208]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fbcf 	bl	8001120 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002986:	f7fe fbcb 	bl	8001120 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e1a8      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4925      	ldr	r1, [pc, #148]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b24      	ldr	r3, [pc, #144]	; (8002a4c <HAL_RCC_OscConfig+0x244>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe fbae 	bl	8001120 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fe fbaa 	bl	8001120 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e187      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d036      	beq.n	8002a60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d016      	beq.n	8002a28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7fe fb8e 	bl	8001120 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fb8a 	bl	8001120 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e167      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x200>
 8002a26:	e01b      	b.n	8002a60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_OscConfig+0x248>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fb77 	bl	8001120 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a34:	e00e      	b.n	8002a54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7fe fb73 	bl	8001120 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d907      	bls.n	8002a54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e150      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	42470000 	.word	0x42470000
 8002a50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	4b88      	ldr	r3, [pc, #544]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ea      	bne.n	8002a36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8097 	beq.w	8002b9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a72:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10f      	bne.n	8002a9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	4b7d      	ldr	r3, [pc, #500]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	4a7c      	ldr	r2, [pc, #496]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a8e:	4b7a      	ldr	r3, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d118      	bne.n	8002adc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aaa:	4b74      	ldr	r3, [pc, #464]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a73      	ldr	r2, [pc, #460]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fb33 	bl	8001120 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe fb2f 	bl	8001120 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e10c      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_OscConfig+0x474>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d106      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2ea>
 8002ae4:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x30c>
 8002afa:	4b5f      	ldr	r3, [pc, #380]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afe:	4a5e      	ldr	r2, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	6713      	str	r3, [r2, #112]	; 0x70
 8002b06:	4b5c      	ldr	r3, [pc, #368]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0a:	4a5b      	ldr	r2, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6713      	str	r3, [r2, #112]	; 0x70
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x324>
 8002b14:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a57      	ldr	r2, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b20:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b24:	4a54      	ldr	r2, [pc, #336]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b26:	f023 0304 	bic.w	r3, r3, #4
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b34:	f7fe faf4 	bl	8001120 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3c:	f7fe faf0 	bl	8001120 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e0cb      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d0ee      	beq.n	8002b3c <HAL_RCC_OscConfig+0x334>
 8002b5e:	e014      	b.n	8002b8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe fade 	bl	8001120 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fada 	bl	8001120 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0b5      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ee      	bne.n	8002b68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	4a38      	ldr	r2, [pc, #224]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f000 80a1 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ba6:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 030c 	and.w	r3, r3, #12
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d05c      	beq.n	8002c6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d141      	bne.n	8002c3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bba:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe faae 	bl	8001120 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc8:	f7fe faaa 	bl	8001120 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e087      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f0      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69da      	ldr	r2, [r3, #28]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	491b      	ldr	r1, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe fa83 	bl	8001120 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe fa7f 	bl	8001120 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e05c      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c30:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCC_OscConfig+0x416>
 8002c3c:	e054      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3e:	4b10      	ldr	r3, [pc, #64]	; (8002c80 <HAL_RCC_OscConfig+0x478>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7fe fa6c 	bl	8001120 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fa68 	bl	8001120 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e045      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_OscConfig+0x470>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x444>
 8002c6a:	e03d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e038      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_RCC_OscConfig+0x4ec>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d028      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d121      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d11a      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d111      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 030f 	and.w	r3, r3, #15
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d90c      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0b8      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d4c:	4b59      	ldr	r3, [pc, #356]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a58      	ldr	r2, [pc, #352]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b50      	ldr	r3, [pc, #320]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	494d      	ldr	r1, [pc, #308]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d044      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d119      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e07f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d003      	beq.n	8002db6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db6:	4b3f      	ldr	r3, [pc, #252]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e06f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e067      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f023 0203 	bic.w	r2, r3, #3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4934      	ldr	r1, [pc, #208]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002de8:	f7fe f99a 	bl	8001120 <HAL_GetTick>
 8002dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df0:	f7fe f996 	bl	8001120 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e04f      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e06:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 020c 	and.w	r2, r3, #12
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d1eb      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e18:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d20c      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e032      	b.n	8002ea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4916      	ldr	r1, [pc, #88]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	490e      	ldr	r1, [pc, #56]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e7e:	f000 f821 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e82:	4602      	mov	r2, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	490a      	ldr	r1, [pc, #40]	; (8002eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe f8fa 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023c00 	.word	0x40023c00
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08004b64 	.word	0x08004b64
 8002ebc:	20000004 	.word	0x20000004
 8002ec0:	20000008 	.word	0x20000008

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b094      	sub	sp, #80	; 0x50
 8002eca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d00d      	beq.n	8002f04 <HAL_RCC_GetSysClockFreq+0x40>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	f200 80e1 	bhi.w	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ef6:	e0db      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002efc:	e0db      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efe:	4b73      	ldr	r3, [pc, #460]	; (80030cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002f00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f02:	e0d8      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f04:	4b6f      	ldr	r3, [pc, #444]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d063      	beq.n	8002fe2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	2200      	movs	r2, #0
 8002f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f2e:	2300      	movs	r3, #0
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
 8002f32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f36:	4622      	mov	r2, r4
 8002f38:	462b      	mov	r3, r5
 8002f3a:	f04f 0000 	mov.w	r0, #0
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	0159      	lsls	r1, r3, #5
 8002f44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f48:	0150      	lsls	r0, r2, #5
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4621      	mov	r1, r4
 8002f50:	1a51      	subs	r1, r2, r1
 8002f52:	6139      	str	r1, [r7, #16]
 8002f54:	4629      	mov	r1, r5
 8002f56:	eb63 0301 	sbc.w	r3, r3, r1
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f68:	4659      	mov	r1, fp
 8002f6a:	018b      	lsls	r3, r1, #6
 8002f6c:	4651      	mov	r1, sl
 8002f6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f72:	4651      	mov	r1, sl
 8002f74:	018a      	lsls	r2, r1, #6
 8002f76:	4651      	mov	r1, sl
 8002f78:	ebb2 0801 	subs.w	r8, r2, r1
 8002f7c:	4659      	mov	r1, fp
 8002f7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f96:	4690      	mov	r8, r2
 8002f98:	4699      	mov	r9, r3
 8002f9a:	4623      	mov	r3, r4
 8002f9c:	eb18 0303 	adds.w	r3, r8, r3
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	eb49 0303 	adc.w	r3, r9, r3
 8002fa8:	60fb      	str	r3, [r7, #12]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	024b      	lsls	r3, r1, #9
 8002fba:	4621      	mov	r1, r4
 8002fbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	024a      	lsls	r2, r1, #9
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fca:	2200      	movs	r2, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd4:	f7fd f90a 	bl	80001ec <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe0:	e058      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b38      	ldr	r3, [pc, #224]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	2200      	movs	r2, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	4611      	mov	r1, r2
 8002fee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	f04f 0000 	mov.w	r0, #0
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	0159      	lsls	r1, r3, #5
 800300a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800300e:	0150      	lsls	r0, r2, #5
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4641      	mov	r1, r8
 8003016:	ebb2 0a01 	subs.w	sl, r2, r1
 800301a:	4649      	mov	r1, r9
 800301c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800302c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003030:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003034:	ebb2 040a 	subs.w	r4, r2, sl
 8003038:	eb63 050b 	sbc.w	r5, r3, fp
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	00eb      	lsls	r3, r5, #3
 8003046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800304a:	00e2      	lsls	r2, r4, #3
 800304c:	4614      	mov	r4, r2
 800304e:	461d      	mov	r5, r3
 8003050:	4643      	mov	r3, r8
 8003052:	18e3      	adds	r3, r4, r3
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	464b      	mov	r3, r9
 8003058:	eb45 0303 	adc.w	r3, r5, r3
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800306a:	4629      	mov	r1, r5
 800306c:	028b      	lsls	r3, r1, #10
 800306e:	4621      	mov	r1, r4
 8003070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003074:	4621      	mov	r1, r4
 8003076:	028a      	lsls	r2, r1, #10
 8003078:	4610      	mov	r0, r2
 800307a:	4619      	mov	r1, r3
 800307c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307e:	2200      	movs	r2, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	61fa      	str	r2, [r7, #28]
 8003084:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003088:	f7fd f8b0 	bl	80001ec <__aeabi_uldivmod>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4613      	mov	r3, r2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	3301      	adds	r3, #1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3750      	adds	r7, #80	; 0x50
 80030bc:	46bd      	mov	sp, r7
 80030be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	007a1200 	.word	0x007a1200

080030d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030d6:	681b      	ldr	r3, [r3, #0]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030ec:	f7ff fff0 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b05      	ldr	r3, [pc, #20]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	0a9b      	lsrs	r3, r3, #10
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40023800 	.word	0x40023800
 800310c:	08004b74 	.word	0x08004b74

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003114:	f7ff ffdc 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	; (8003130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0b5b      	lsrs	r3, r3, #13
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08004b74 	.word	0x08004b74

08003138 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e042      	b.n	80031d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d106      	bne.n	8003164 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fd fdbe 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2224      	movs	r2, #36	; 0x24
 8003168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 ff37 	bl	8003ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003190:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68da      	ldr	r2, [r3, #12]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b20      	cmp	r3, #32
 80031f0:	d156      	bne.n	80032a0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <HAL_UART_Transmit_DMA+0x26>
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e04f      	b.n	80032a2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	88fa      	ldrh	r2, [r7, #6]
 800320c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2221      	movs	r2, #33	; 0x21
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4a21      	ldr	r2, [pc, #132]	; (80032ac <HAL_UART_Transmit_DMA+0xd4>)
 8003228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_UART_Transmit_DMA+0xd8>)
 8003230:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	4a1f      	ldr	r2, [pc, #124]	; (80032b4 <HAL_UART_Transmit_DMA+0xdc>)
 8003238:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	2200      	movs	r2, #0
 8003240:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003242:	f107 0308 	add.w	r3, r7, #8
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3304      	adds	r3, #4
 8003256:	461a      	mov	r2, r3
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	f7fe f951 	bl	8001500 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003266:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3314      	adds	r3, #20
 800326e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	617b      	str	r3, [r7, #20]
   return(result);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3314      	adds	r3, #20
 8003286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003288:	627a      	str	r2, [r7, #36]	; 0x24
 800328a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	6a39      	ldr	r1, [r7, #32]
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	61fb      	str	r3, [r7, #28]
   return(result);
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e000      	b.n	80032a2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3730      	adds	r7, #48	; 0x30
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	0800387d 	.word	0x0800387d
 80032b0:	08003917 	.word	0x08003917
 80032b4:	08003a9b 	.word	0x08003a9b

080032b8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d112      	bne.n	80032f8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_UART_Receive_DMA+0x26>
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e00b      	b.n	80032fa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032e8:	88fb      	ldrh	r3, [r7, #6]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fc1e 	bl	8003b30 <UART_Start_Receive_DMA>
 80032f4:	4603      	mov	r3, r0
 80032f6:	e000      	b.n	80032fa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b0ba      	sub	sp, #232	; 0xe8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003330:	2300      	movs	r3, #0
 8003332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003342:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fd85 	bl	8003e72 <UART_Receive_IT>
      return;
 8003368:	e25b      	b.n	8003822 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800336a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80de 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
 8003374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003384:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80d1 	beq.w	8003530 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00b      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
 800339a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f043 0201 	orr.w	r2, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
 80033be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f043 0202 	orr.w	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
 80033e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f043 0204 	orr.w	r2, r3, #4
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d011      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
 8003406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f043 0208 	orr.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 81f2 	beq.w	8003818 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fd10 	bl	8003e72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b40      	cmp	r3, #64	; 0x40
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <HAL_UART_IRQHandler+0x17a>
 8003476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d04f      	beq.n	800351e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fc18 	bl	8003cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b40      	cmp	r3, #64	; 0x40
 8003490:	d141      	bne.n	8003516 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1d9      	bne.n	8003492 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d013      	beq.n	800350e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	4a7e      	ldr	r2, [pc, #504]	; (80036e4 <HAL_UART_IRQHandler+0x3e0>)
 80034ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f8cc 	bl	8001690 <HAL_DMA_Abort_IT>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003508:	4610      	mov	r0, r2
 800350a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	e00e      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f99e 	bl	8003850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003514:	e00a      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f99a 	bl	8003850 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	e006      	b.n	800352c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f996 	bl	8003850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800352a:	e175      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	bf00      	nop
    return;
 800352e:	e173      	b.n	8003818 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	2b01      	cmp	r3, #1
 8003536:	f040 814f 	bne.w	80037d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800353a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353e:	f003 0310 	and.w	r3, r3, #16
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8148 	beq.w	80037d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8141 	beq.w	80037d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b40      	cmp	r3, #64	; 0x40
 8003578:	f040 80b6 	bne.w	80036e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003588:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8145 	beq.w	800381c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003596:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800359a:	429a      	cmp	r2, r3
 800359c:	f080 813e 	bcs.w	800381c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b2:	f000 8088 	beq.w	80036c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	330c      	adds	r3, #12
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035c4:	e853 3f00 	ldrex	r3, [r3]
 80035c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1d9      	bne.n	80035b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3314      	adds	r3, #20
 8003608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360c:	e853 3f00 	ldrex	r3, [r3]
 8003610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3314      	adds	r3, #20
 8003622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800362a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800362e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e1      	bne.n	8003602 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3314      	adds	r3, #20
 8003644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003648:	e853 3f00 	ldrex	r3, [r3]
 800364c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800364e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3314      	adds	r3, #20
 800365e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003662:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e3      	bne.n	800363e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	330c      	adds	r3, #12
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368e:	e853 3f00 	ldrex	r3, [r3]
 8003692:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003696:	f023 0310 	bic.w	r3, r3, #16
 800369a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80036aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e3      	bne.n	8003684 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd ff75 	bl	80015b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4619      	mov	r1, r3
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8c1 	bl	8003864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036e2:	e09b      	b.n	800381c <HAL_UART_IRQHandler+0x518>
 80036e4:	08003d7b 	.word	0x08003d7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 808e 	beq.w	8003820 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8089 	beq.w	8003820 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003732:	647a      	str	r2, [r7, #68]	; 0x44
 8003734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e3      	bne.n	800370e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3314      	adds	r3, #20
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	623b      	str	r3, [r7, #32]
   return(result);
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3314      	adds	r3, #20
 8003766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800376a:	633a      	str	r2, [r7, #48]	; 0x30
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e3      	bne.n	8003746 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	60fb      	str	r3, [r7, #12]
   return(result);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0310 	bic.w	r3, r3, #16
 80037a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037b0:	61fa      	str	r2, [r7, #28]
 80037b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	69b9      	ldr	r1, [r7, #24]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	617b      	str	r3, [r7, #20]
   return(result);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e3      	bne.n	800378c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f847 	bl	8003864 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037d6:	e023      	b.n	8003820 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <HAL_UART_IRQHandler+0x4f4>
 80037e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fad6 	bl	8003da2 <UART_Transmit_IT>
    return;
 80037f6:	e014      	b.n	8003822 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <HAL_UART_IRQHandler+0x51e>
 8003804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fb16 	bl	8003e42 <UART_EndTransmit_IT>
    return;
 8003816:	e004      	b.n	8003822 <HAL_UART_IRQHandler+0x51e>
    return;
 8003818:	bf00      	nop
 800381a:	e002      	b.n	8003822 <HAL_UART_IRQHandler+0x51e>
      return;
 800381c:	bf00      	nop
 800381e:	e000      	b.n	8003822 <HAL_UART_IRQHandler+0x51e>
      return;
 8003820:	bf00      	nop
  }
}
 8003822:	37e8      	adds	r7, #232	; 0xe8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b090      	sub	sp, #64	; 0x40
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003888:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d137      	bne.n	8003908 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389a:	2200      	movs	r2, #0
 800389c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800389e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3314      	adds	r3, #20
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	623b      	str	r3, [r7, #32]
   return(result);
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3314      	adds	r3, #20
 80038bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038be:	633a      	str	r2, [r7, #48]	; 0x30
 80038c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e5      	bne.n	800389e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	330c      	adds	r3, #12
 80038f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f2:	61fa      	str	r2, [r7, #28]
 80038f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	69b9      	ldr	r1, [r7, #24]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003906:	e002      	b.n	800390e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003908:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800390a:	f7fd f8ab 	bl	8000a64 <HAL_UART_TxCpltCallback>
}
 800390e:	bf00      	nop
 8003910:	3740      	adds	r7, #64	; 0x40
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff ff7f 	bl	8003828 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b09c      	sub	sp, #112	; 0x70
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d172      	bne.n	8003a34 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800394e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003950:	2200      	movs	r2, #0
 8003952:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	330c      	adds	r3, #12
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003966:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800396a:	66bb      	str	r3, [r7, #104]	; 0x68
 800396c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003974:	65ba      	str	r2, [r7, #88]	; 0x58
 8003976:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800397a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e5      	bne.n	8003954 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3314      	adds	r3, #20
 800398e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	667b      	str	r3, [r7, #100]	; 0x64
 80039a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3314      	adds	r3, #20
 80039a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039a8:	647a      	str	r2, [r7, #68]	; 0x44
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	3314      	adds	r3, #20
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	e853 3f00 	ldrex	r3, [r3]
 80039ca:	623b      	str	r3, [r7, #32]
   return(result);
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d2:	663b      	str	r3, [r7, #96]	; 0x60
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039dc:	633a      	str	r2, [r7, #48]	; 0x30
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e4:	e841 2300 	strex	r3, r2, [r1]
 80039e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e5      	bne.n	80039bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d119      	bne.n	8003a34 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a20:	61fa      	str	r2, [r7, #28]
 8003a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e5      	bne.n	8003a00 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	2200      	movs	r2, #0
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d106      	bne.n	8003a50 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a46:	4619      	mov	r1, r3
 8003a48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a4a:	f7ff ff0b 	bl	8003864 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a4e:	e002      	b.n	8003a56 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003a50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a52:	f7fd f827 	bl	8000aa4 <HAL_UART_RxCpltCallback>
}
 8003a56:	bf00      	nop
 8003a58:	3770      	adds	r7, #112	; 0x70
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff feed 	bl	8003864 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a8a:	e002      	b.n	8003a92 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff fed5 	bl	800383c <HAL_UART_RxHalfCpltCallback>
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b80      	cmp	r3, #128	; 0x80
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b21      	cmp	r3, #33	; 0x21
 8003acc:	d108      	bne.n	8003ae0 <UART_DMAError+0x46>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d005      	beq.n	8003ae0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ada:	68b8      	ldr	r0, [r7, #8]
 8003adc:	f000 f8c2 	bl	8003c64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	bf0c      	ite	eq
 8003aee:	2301      	moveq	r3, #1
 8003af0:	2300      	movne	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b22      	cmp	r3, #34	; 0x22
 8003b00:	d108      	bne.n	8003b14 <UART_DMAError+0x7a>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b0e:	68b8      	ldr	r0, [r7, #8]
 8003b10:	f000 f8d0 	bl	8003cb4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f043 0210 	orr.w	r2, r3, #16
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b20:	68b8      	ldr	r0, [r7, #8]
 8003b22:	f7ff fe95 	bl	8003850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b098      	sub	sp, #96	; 0x60
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2222      	movs	r2, #34	; 0x22
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	4a3e      	ldr	r2, [pc, #248]	; (8003c58 <UART_Start_Receive_DMA+0x128>)
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	4a3d      	ldr	r2, [pc, #244]	; (8003c5c <UART_Start_Receive_DMA+0x12c>)
 8003b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <UART_Start_Receive_DMA+0x130>)
 8003b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	2200      	movs	r2, #0
 8003b76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	f7fd fcb6 	bl	8001500 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d019      	beq.n	8003be6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	330c      	adds	r3, #12
 8003bb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bd2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003bd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003bd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3314      	adds	r3, #20
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c06:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0e:	e841 2300 	strex	r3, r2, [r1]
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1e5      	bne.n	8003be6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	3314      	adds	r3, #20
 8003c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	617b      	str	r3, [r7, #20]
   return(result);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3314      	adds	r3, #20
 8003c38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003c3a:	627a      	str	r2, [r7, #36]	; 0x24
 8003c3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6a39      	ldr	r1, [r7, #32]
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3760      	adds	r7, #96	; 0x60
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	08003933 	.word	0x08003933
 8003c5c:	08003a5f 	.word	0x08003a5f
 8003c60:	08003a9b 	.word	0x08003a9b

08003c64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	61ba      	str	r2, [r7, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6979      	ldr	r1, [r7, #20]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	613b      	str	r3, [r7, #16]
   return(result);
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003ca8:	bf00      	nop
 8003caa:	3724      	adds	r7, #36	; 0x24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b095      	sub	sp, #84	; 0x54
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	330c      	adds	r3, #12
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	e853 3f00 	ldrex	r3, [r3]
 8003cca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cdc:	643a      	str	r2, [r7, #64]	; 0x40
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce4:	e841 2300 	strex	r3, r2, [r1]
 8003ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1e5      	bne.n	8003cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3314      	adds	r3, #20
 8003d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e5      	bne.n	8003cf0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d119      	bne.n	8003d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	330c      	adds	r3, #12
 8003d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	e853 3f00 	ldrex	r3, [r3]
 8003d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0310 	bic.w	r3, r3, #16
 8003d42:	647b      	str	r3, [r7, #68]	; 0x44
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	330c      	adds	r3, #12
 8003d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d4c:	61ba      	str	r2, [r7, #24]
 8003d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d50:	6979      	ldr	r1, [r7, #20]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	e841 2300 	strex	r3, r2, [r1]
 8003d58:	613b      	str	r3, [r7, #16]
   return(result);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1e5      	bne.n	8003d2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d6e:	bf00      	nop
 8003d70:	3754      	adds	r7, #84	; 0x54
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7ff fd5b 	bl	8003850 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b21      	cmp	r3, #33	; 0x21
 8003db4:	d13e      	bne.n	8003e34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dbe:	d114      	bne.n	8003dea <UART_Transmit_IT+0x48>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d110      	bne.n	8003dea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ddc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	1c9a      	adds	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]
 8003de8:	e008      	b.n	8003dfc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6211      	str	r1, [r2, #32]
 8003df4:	781a      	ldrb	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4619      	mov	r1, r3
 8003e0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10f      	bne.n	8003e30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fc fdfe 	bl	8000a64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b08c      	sub	sp, #48	; 0x30
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b22      	cmp	r3, #34	; 0x22
 8003e84:	f040 80ae 	bne.w	8003fe4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e90:	d117      	bne.n	8003ec2 <UART_Receive_IT+0x50>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d113      	bne.n	8003ec2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	1c9a      	adds	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec0:	e026      	b.n	8003f10 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d007      	beq.n	8003ee6 <UART_Receive_IT+0x74>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <UART_Receive_IT+0x82>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e008      	b.n	8003f06 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f04:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d15d      	bne.n	8003fe0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0220 	bic.w	r2, r2, #32
 8003f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695a      	ldr	r2, [r3, #20]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0201 	bic.w	r2, r2, #1
 8003f52:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d135      	bne.n	8003fd6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f023 0310 	bic.w	r3, r3, #16
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	623a      	str	r2, [r7, #32]
 8003f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	69f9      	ldr	r1, [r7, #28]
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e5      	bne.n	8003f70 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d10a      	bne.n	8003fc8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fc48 	bl	8003864 <HAL_UARTEx_RxEventCallback>
 8003fd4:	e002      	b.n	8003fdc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc fd64 	bl	8000aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e002      	b.n	8003fe6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3730      	adds	r7, #48	; 0x30
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b0c0      	sub	sp, #256	; 0x100
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400c:	68d9      	ldr	r1, [r3, #12]
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	ea40 0301 	orr.w	r3, r0, r1
 8004018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	431a      	orrs	r2, r3
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	431a      	orrs	r2, r3
 8004030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004048:	f021 010c 	bic.w	r1, r1, #12
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004056:	430b      	orrs	r3, r1
 8004058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800406a:	6999      	ldr	r1, [r3, #24]
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	ea40 0301 	orr.w	r3, r0, r1
 8004076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b8f      	ldr	r3, [pc, #572]	; (80042bc <UART_SetConfig+0x2cc>)
 8004080:	429a      	cmp	r2, r3
 8004082:	d005      	beq.n	8004090 <UART_SetConfig+0xa0>
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4b8d      	ldr	r3, [pc, #564]	; (80042c0 <UART_SetConfig+0x2d0>)
 800408c:	429a      	cmp	r2, r3
 800408e:	d104      	bne.n	800409a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004090:	f7ff f83e 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 8004094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004098:	e003      	b.n	80040a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800409a:	f7ff f825 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 800409e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ac:	f040 810c 	bne.w	80042c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040b4:	2200      	movs	r2, #0
 80040b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040c2:	4622      	mov	r2, r4
 80040c4:	462b      	mov	r3, r5
 80040c6:	1891      	adds	r1, r2, r2
 80040c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80040ca:	415b      	adcs	r3, r3
 80040cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80040d2:	4621      	mov	r1, r4
 80040d4:	eb12 0801 	adds.w	r8, r2, r1
 80040d8:	4629      	mov	r1, r5
 80040da:	eb43 0901 	adc.w	r9, r3, r1
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040f2:	4690      	mov	r8, r2
 80040f4:	4699      	mov	r9, r3
 80040f6:	4623      	mov	r3, r4
 80040f8:	eb18 0303 	adds.w	r3, r8, r3
 80040fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004100:	462b      	mov	r3, r5
 8004102:	eb49 0303 	adc.w	r3, r9, r3
 8004106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800411a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800411e:	460b      	mov	r3, r1
 8004120:	18db      	adds	r3, r3, r3
 8004122:	653b      	str	r3, [r7, #80]	; 0x50
 8004124:	4613      	mov	r3, r2
 8004126:	eb42 0303 	adc.w	r3, r2, r3
 800412a:	657b      	str	r3, [r7, #84]	; 0x54
 800412c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004134:	f7fc f85a 	bl	80001ec <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4b61      	ldr	r3, [pc, #388]	; (80042c4 <UART_SetConfig+0x2d4>)
 800413e:	fba3 2302 	umull	r2, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	011c      	lsls	r4, r3, #4
 8004146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004158:	4642      	mov	r2, r8
 800415a:	464b      	mov	r3, r9
 800415c:	1891      	adds	r1, r2, r2
 800415e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004160:	415b      	adcs	r3, r3
 8004162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004168:	4641      	mov	r1, r8
 800416a:	eb12 0a01 	adds.w	sl, r2, r1
 800416e:	4649      	mov	r1, r9
 8004170:	eb43 0b01 	adc.w	fp, r3, r1
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004188:	4692      	mov	sl, r2
 800418a:	469b      	mov	fp, r3
 800418c:	4643      	mov	r3, r8
 800418e:	eb1a 0303 	adds.w	r3, sl, r3
 8004192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004196:	464b      	mov	r3, r9
 8004198:	eb4b 0303 	adc.w	r3, fp, r3
 800419c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041b4:	460b      	mov	r3, r1
 80041b6:	18db      	adds	r3, r3, r3
 80041b8:	643b      	str	r3, [r7, #64]	; 0x40
 80041ba:	4613      	mov	r3, r2
 80041bc:	eb42 0303 	adc.w	r3, r2, r3
 80041c0:	647b      	str	r3, [r7, #68]	; 0x44
 80041c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041ca:	f7fc f80f 	bl	80001ec <__aeabi_uldivmod>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4611      	mov	r1, r2
 80041d4:	4b3b      	ldr	r3, [pc, #236]	; (80042c4 <UART_SetConfig+0x2d4>)
 80041d6:	fba3 2301 	umull	r2, r3, r3, r1
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	2264      	movs	r2, #100	; 0x64
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	1acb      	subs	r3, r1, r3
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80041ea:	4b36      	ldr	r3, [pc, #216]	; (80042c4 <UART_SetConfig+0x2d4>)
 80041ec:	fba3 2302 	umull	r2, r3, r3, r2
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041f8:	441c      	add	r4, r3
 80041fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	1891      	adds	r1, r2, r2
 8004212:	63b9      	str	r1, [r7, #56]	; 0x38
 8004214:	415b      	adcs	r3, r3
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800421c:	4641      	mov	r1, r8
 800421e:	1851      	adds	r1, r2, r1
 8004220:	6339      	str	r1, [r7, #48]	; 0x30
 8004222:	4649      	mov	r1, r9
 8004224:	414b      	adcs	r3, r1
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004234:	4659      	mov	r1, fp
 8004236:	00cb      	lsls	r3, r1, #3
 8004238:	4651      	mov	r1, sl
 800423a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423e:	4651      	mov	r1, sl
 8004240:	00ca      	lsls	r2, r1, #3
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	4603      	mov	r3, r0
 8004248:	4642      	mov	r2, r8
 800424a:	189b      	adds	r3, r3, r2
 800424c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004250:	464b      	mov	r3, r9
 8004252:	460a      	mov	r2, r1
 8004254:	eb42 0303 	adc.w	r3, r2, r3
 8004258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800426c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004270:	460b      	mov	r3, r1
 8004272:	18db      	adds	r3, r3, r3
 8004274:	62bb      	str	r3, [r7, #40]	; 0x28
 8004276:	4613      	mov	r3, r2
 8004278:	eb42 0303 	adc.w	r3, r2, r3
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004286:	f7fb ffb1 	bl	80001ec <__aeabi_uldivmod>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <UART_SetConfig+0x2d4>)
 8004290:	fba3 1302 	umull	r1, r3, r3, r2
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	2164      	movs	r1, #100	; 0x64
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	3332      	adds	r3, #50	; 0x32
 80042a2:	4a08      	ldr	r2, [pc, #32]	; (80042c4 <UART_SetConfig+0x2d4>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	095b      	lsrs	r3, r3, #5
 80042aa:	f003 0207 	and.w	r2, r3, #7
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4422      	add	r2, r4
 80042b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042b8:	e106      	b.n	80044c8 <UART_SetConfig+0x4d8>
 80042ba:	bf00      	nop
 80042bc:	40011000 	.word	0x40011000
 80042c0:	40011400 	.word	0x40011400
 80042c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042cc:	2200      	movs	r2, #0
 80042ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80042d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80042da:	4642      	mov	r2, r8
 80042dc:	464b      	mov	r3, r9
 80042de:	1891      	adds	r1, r2, r2
 80042e0:	6239      	str	r1, [r7, #32]
 80042e2:	415b      	adcs	r3, r3
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
 80042e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80042ea:	4641      	mov	r1, r8
 80042ec:	1854      	adds	r4, r2, r1
 80042ee:	4649      	mov	r1, r9
 80042f0:	eb43 0501 	adc.w	r5, r3, r1
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	00eb      	lsls	r3, r5, #3
 80042fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004302:	00e2      	lsls	r2, r4, #3
 8004304:	4614      	mov	r4, r2
 8004306:	461d      	mov	r5, r3
 8004308:	4643      	mov	r3, r8
 800430a:	18e3      	adds	r3, r4, r3
 800430c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004310:	464b      	mov	r3, r9
 8004312:	eb45 0303 	adc.w	r3, r5, r3
 8004316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004336:	4629      	mov	r1, r5
 8004338:	008b      	lsls	r3, r1, #2
 800433a:	4621      	mov	r1, r4
 800433c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004340:	4621      	mov	r1, r4
 8004342:	008a      	lsls	r2, r1, #2
 8004344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004348:	f7fb ff50 	bl	80001ec <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b60      	ldr	r3, [pc, #384]	; (80044d4 <UART_SetConfig+0x4e4>)
 8004352:	fba3 2302 	umull	r2, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	011c      	lsls	r4, r3, #4
 800435a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	61b9      	str	r1, [r7, #24]
 8004374:	415b      	adcs	r3, r3
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800437c:	4641      	mov	r1, r8
 800437e:	1851      	adds	r1, r2, r1
 8004380:	6139      	str	r1, [r7, #16]
 8004382:	4649      	mov	r1, r9
 8004384:	414b      	adcs	r3, r1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004394:	4659      	mov	r1, fp
 8004396:	00cb      	lsls	r3, r1, #3
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439e:	4651      	mov	r1, sl
 80043a0:	00ca      	lsls	r2, r1, #3
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	4642      	mov	r2, r8
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043b0:	464b      	mov	r3, r9
 80043b2:	460a      	mov	r2, r1
 80043b4:	eb42 0303 	adc.w	r3, r2, r3
 80043b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80043d4:	4649      	mov	r1, r9
 80043d6:	008b      	lsls	r3, r1, #2
 80043d8:	4641      	mov	r1, r8
 80043da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043de:	4641      	mov	r1, r8
 80043e0:	008a      	lsls	r2, r1, #2
 80043e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80043e6:	f7fb ff01 	bl	80001ec <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	4b38      	ldr	r3, [pc, #224]	; (80044d4 <UART_SetConfig+0x4e4>)
 80043f2:	fba3 2301 	umull	r2, r3, r3, r1
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2264      	movs	r2, #100	; 0x64
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	1acb      	subs	r3, r1, r3
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	3332      	adds	r3, #50	; 0x32
 8004404:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <UART_SetConfig+0x4e4>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004410:	441c      	add	r4, r3
 8004412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004416:	2200      	movs	r2, #0
 8004418:	673b      	str	r3, [r7, #112]	; 0x70
 800441a:	677a      	str	r2, [r7, #116]	; 0x74
 800441c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	415b      	adcs	r3, r3
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	6039      	str	r1, [r7, #0]
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68
 8004462:	464b      	mov	r3, r9
 8004464:	460a      	mov	r2, r1
 8004466:	eb42 0303 	adc.w	r3, r2, r3
 800446a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800446c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	663b      	str	r3, [r7, #96]	; 0x60
 8004476:	667a      	str	r2, [r7, #100]	; 0x64
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004484:	4649      	mov	r1, r9
 8004486:	008b      	lsls	r3, r1, #2
 8004488:	4641      	mov	r1, r8
 800448a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800448e:	4641      	mov	r1, r8
 8004490:	008a      	lsls	r2, r1, #2
 8004492:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004496:	f7fb fea9 	bl	80001ec <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4b0d      	ldr	r3, [pc, #52]	; (80044d4 <UART_SetConfig+0x4e4>)
 80044a0:	fba3 1302 	umull	r1, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	2164      	movs	r1, #100	; 0x64
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	3332      	adds	r3, #50	; 0x32
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <UART_SetConfig+0x4e4>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	f003 020f 	and.w	r2, r3, #15
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4422      	add	r2, r4
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	bf00      	nop
 80044ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044ce:	46bd      	mov	sp, r7
 80044d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d4:	51eb851f 	.word	0x51eb851f

080044d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d8:	b084      	sub	sp, #16
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	f107 001c 	add.w	r0, r7, #28
 80044e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d123      	bne.n	800453a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800451a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 faa0 	bl	8004a74 <USB_CoreReset>
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e01b      	b.n	8004572 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa94 	bl	8004a74 <USB_CoreReset>
 800454c:	4603      	mov	r3, r0
 800454e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004550:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004554:	2b00      	cmp	r3, #0
 8004556:	d106      	bne.n	8004566 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	639a      	str	r2, [r3, #56]	; 0x38
 8004564:	e005      	b.n	8004572 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004572:	7fbb      	ldrb	r3, [r7, #30]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d10b      	bne.n	8004590 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f043 0206 	orr.w	r2, r3, #6
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f043 0220 	orr.w	r2, r3, #32
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800459c:	b004      	add	sp, #16
 800459e:	4770      	bx	lr

080045a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f023 0201 	bic.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d115      	bne.n	8004610 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045f0:	200a      	movs	r0, #10
 80045f2:	f7fc fda1 	bl	8001138 <HAL_Delay>
      ms += 10U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	330a      	adds	r3, #10
 80045fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fa2b 	bl	8004a58 <USB_GetMode>
 8004602:	4603      	mov	r3, r0
 8004604:	2b01      	cmp	r3, #1
 8004606:	d01e      	beq.n	8004646 <USB_SetCurrentMode+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2bc7      	cmp	r3, #199	; 0xc7
 800460c:	d9f0      	bls.n	80045f0 <USB_SetCurrentMode+0x2e>
 800460e:	e01a      	b.n	8004646 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d115      	bne.n	8004642 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004622:	200a      	movs	r0, #10
 8004624:	f7fc fd88 	bl	8001138 <HAL_Delay>
      ms += 10U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	330a      	adds	r3, #10
 800462c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa12 	bl	8004a58 <USB_GetMode>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <USB_SetCurrentMode+0x84>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2bc7      	cmp	r3, #199	; 0xc7
 800463e:	d9f0      	bls.n	8004622 <USB_SetCurrentMode+0x60>
 8004640:	e001      	b.n	8004646 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e005      	b.n	8004652 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2bc8      	cmp	r3, #200	; 0xc8
 800464a:	d101      	bne.n	8004650 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800465c:	b084      	sub	sp, #16
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800466a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	e009      	b.n	8004690 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	3340      	adds	r3, #64	; 0x40
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	3301      	adds	r3, #1
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b0e      	cmp	r3, #14
 8004694:	d9f2      	bls.n	800467c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004696:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800469a:	2b00      	cmp	r3, #0
 800469c:	d11c      	bne.n	80046d8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ac:	f043 0302 	orr.w	r3, r3, #2
 80046b0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
 80046d6:	e00b      	b.n	80046f0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046f6:	461a      	mov	r2, r3
 80046f8:	2300      	movs	r3, #0
 80046fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046fc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8004700:	2b01      	cmp	r3, #1
 8004702:	d10d      	bne.n	8004720 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004708:	2b00      	cmp	r3, #0
 800470a:	d104      	bne.n	8004716 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800470c:	2100      	movs	r1, #0
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f968 	bl	80049e4 <USB_SetDevSpeed>
 8004714:	e008      	b.n	8004728 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004716:	2101      	movs	r1, #1
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f963 	bl	80049e4 <USB_SetDevSpeed>
 800471e:	e003      	b.n	8004728 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004720:	2103      	movs	r1, #3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f95e 	bl	80049e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004728:	2110      	movs	r1, #16
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8fa 	bl	8004924 <USB_FlushTxFifo>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f924 	bl	8004988 <USB_FlushRxFifo>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	461a      	mov	r2, r3
 8004752:	2300      	movs	r3, #0
 8004754:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475c:	461a      	mov	r2, r3
 800475e:	2300      	movs	r3, #0
 8004760:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e043      	b.n	80047fc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800478a:	d118      	bne.n	80047be <USB_DevInit+0x162>
    {
      if (i == 0U)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479e:	461a      	mov	r2, r3
 80047a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	e013      	b.n	80047d0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b4:	461a      	mov	r2, r3
 80047b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	e008      	b.n	80047d0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ca:	461a      	mov	r2, r3
 80047cc:	2300      	movs	r3, #0
 80047ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047dc:	461a      	mov	r2, r3
 80047de:	2300      	movs	r3, #0
 80047e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	461a      	mov	r2, r3
 80047f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	3301      	adds	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
 80047fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004800:	461a      	mov	r2, r3
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	4293      	cmp	r3, r2
 8004806:	d3b5      	bcc.n	8004774 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004808:	2300      	movs	r3, #0
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	e043      	b.n	8004896 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004824:	d118      	bne.n	8004858 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004838:	461a      	mov	r2, r3
 800483a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e013      	b.n	800486a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	461a      	mov	r2, r3
 8004850:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e008      	b.n	800486a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	461a      	mov	r2, r3
 8004866:	2300      	movs	r3, #0
 8004868:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	461a      	mov	r2, r3
 8004878:	2300      	movs	r3, #0
 800487a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004888:	461a      	mov	r2, r3
 800488a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800488e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	3301      	adds	r3, #1
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800489a:	461a      	mov	r2, r3
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	4293      	cmp	r3, r2
 80048a0:	d3b5      	bcc.n	800480e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048b4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048c2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d105      	bne.n	80048d8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f043 0210 	orr.w	r2, r3, #16
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699a      	ldr	r2, [r3, #24]
 80048dc:	4b10      	ldr	r3, [pc, #64]	; (8004920 <USB_DevInit+0x2c4>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048e4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f043 0208 	orr.w	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d107      	bne.n	8004910 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800491c:	b004      	add	sp, #16
 800491e:	4770      	bx	lr
 8004920:	803c3800 	.word	0x803c3800

08004924 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800493e:	d901      	bls.n	8004944 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e01b      	b.n	800497c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	daf2      	bge.n	8004932 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	019b      	lsls	r3, r3, #6
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004968:	d901      	bls.n	800496e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e006      	b.n	800497c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0320 	and.w	r3, r3, #32
 8004976:	2b20      	cmp	r3, #32
 8004978:	d0f0      	beq.n	800495c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049a0:	d901      	bls.n	80049a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e018      	b.n	80049d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	daf2      	bge.n	8004994 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2210      	movs	r2, #16
 80049b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3301      	adds	r3, #1
 80049bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80049c4:	d901      	bls.n	80049ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e006      	b.n	80049d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d0f0      	beq.n	80049b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a30:	f023 0303 	bic.w	r3, r3, #3
 8004a34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0301 	and.w	r3, r3, #1
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004a8c:	d901      	bls.n	8004a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e01b      	b.n	8004aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	daf2      	bge.n	8004a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	3301      	adds	r3, #1
 8004aae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004ab6:	d901      	bls.n	8004abc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e006      	b.n	8004aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d0f0      	beq.n	8004aaa <USB_CoreReset+0x36>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <memset>:
 8004ad6:	4402      	add	r2, r0
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d100      	bne.n	8004ae0 <memset+0xa>
 8004ade:	4770      	bx	lr
 8004ae0:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae4:	e7f9      	b.n	8004ada <memset+0x4>
	...

08004ae8 <__libc_init_array>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	4d0d      	ldr	r5, [pc, #52]	; (8004b20 <__libc_init_array+0x38>)
 8004aec:	4c0d      	ldr	r4, [pc, #52]	; (8004b24 <__libc_init_array+0x3c>)
 8004aee:	1b64      	subs	r4, r4, r5
 8004af0:	10a4      	asrs	r4, r4, #2
 8004af2:	2600      	movs	r6, #0
 8004af4:	42a6      	cmp	r6, r4
 8004af6:	d109      	bne.n	8004b0c <__libc_init_array+0x24>
 8004af8:	4d0b      	ldr	r5, [pc, #44]	; (8004b28 <__libc_init_array+0x40>)
 8004afa:	4c0c      	ldr	r4, [pc, #48]	; (8004b2c <__libc_init_array+0x44>)
 8004afc:	f000 f826 	bl	8004b4c <_init>
 8004b00:	1b64      	subs	r4, r4, r5
 8004b02:	10a4      	asrs	r4, r4, #2
 8004b04:	2600      	movs	r6, #0
 8004b06:	42a6      	cmp	r6, r4
 8004b08:	d105      	bne.n	8004b16 <__libc_init_array+0x2e>
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b10:	4798      	blx	r3
 8004b12:	3601      	adds	r6, #1
 8004b14:	e7ee      	b.n	8004af4 <__libc_init_array+0xc>
 8004b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1a:	4798      	blx	r3
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	e7f2      	b.n	8004b06 <__libc_init_array+0x1e>
 8004b20:	08004b8c 	.word	0x08004b8c
 8004b24:	08004b8c 	.word	0x08004b8c
 8004b28:	08004b8c 	.word	0x08004b8c
 8004b2c:	08004b90 	.word	0x08004b90

08004b30 <memcpy>:
 8004b30:	440a      	add	r2, r1
 8004b32:	4291      	cmp	r1, r2
 8004b34:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b38:	d100      	bne.n	8004b3c <memcpy+0xc>
 8004b3a:	4770      	bx	lr
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b46:	4291      	cmp	r1, r2
 8004b48:	d1f9      	bne.n	8004b3e <memcpy+0xe>
 8004b4a:	bd10      	pop	{r4, pc}

08004b4c <_init>:
 8004b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4e:	bf00      	nop
 8004b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b52:	bc08      	pop	{r3}
 8004b54:	469e      	mov	lr, r3
 8004b56:	4770      	bx	lr

08004b58 <_fini>:
 8004b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5a:	bf00      	nop
 8004b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5e:	bc08      	pop	{r3}
 8004b60:	469e      	mov	lr, r3
 8004b62:	4770      	bx	lr
