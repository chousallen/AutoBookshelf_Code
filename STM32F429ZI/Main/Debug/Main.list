
Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006828  08006828  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08006828  08006828  00016828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006830  08006830  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08006838  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000b10  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b28  20000b28  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   000145ec  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000269e  00000000  00000000  00034677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011e0  00000000  00000000  00036d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e07  00000000  00000000  00037ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024d17  00000000  00000000  00038cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013468  00000000  00000000  0005da16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2a31  00000000  00000000  00070e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d88  00000000  00000000  001538b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00158638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006784 	.word	0x08006784

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08006784 	.word	0x08006784

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <Stepper_Config>:
uint16_t Dir_Pin;

void Stepper_Rotate_Cplt_CB();

void Stepper_Config(TIM_HandleTypeDef *_htim, uint32_t _channel, uint16_t _interval, GPIO_TypeDef* _Dir_Port, uint16_t _Dir_Pin)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	4613      	mov	r3, r2
 80004f6:	80fb      	strh	r3, [r7, #6]
	htim = _htim;
 80004f8:	4a11      	ldr	r2, [pc, #68]	; (8000540 <Stepper_Config+0x58>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6013      	str	r3, [r2, #0]
	channel = _channel;
 80004fe:	4a11      	ldr	r2, [pc, #68]	; (8000544 <Stepper_Config+0x5c>)
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	6013      	str	r3, [r2, #0]
	interval = _interval;
 8000504:	4a10      	ldr	r2, [pc, #64]	; (8000548 <Stepper_Config+0x60>)
 8000506:	88fb      	ldrh	r3, [r7, #6]
 8000508:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, interval);
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <Stepper_Config+0x60>)
 800050c:	881a      	ldrh	r2, [r3, #0]
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <Stepper_Config+0x58>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <Stepper_Config+0x60>)
 8000518:	881a      	ldrh	r2, [r3, #0]
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <Stepper_Config+0x58>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	60da      	str	r2, [r3, #12]
	Dir_Port = _Dir_Port;
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <Stepper_Config+0x64>)
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	6013      	str	r3, [r2, #0]
	Dir_Pin = _Dir_Pin;
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <Stepper_Config+0x68>)
 8000528:	8b3b      	ldrh	r3, [r7, #24]
 800052a:	8013      	strh	r3, [r2, #0]
	steps_remain = 0;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <Stepper_Config+0x6c>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000034 	.word	0x20000034
 8000544:	20000038 	.word	0x20000038
 8000548:	20000000 	.word	0x20000000
 800054c:	20000040 	.word	0x20000040
 8000550:	20000044 	.word	0x20000044
 8000554:	2000003c 	.word	0x2000003c

08000558 <Stepper_Set_Interval>:

uint8_t Stepper_Set_Interval(uint16_t _interval)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	80fb      	strh	r3, [r7, #6]
	if(_interval < 200)
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	2bc7      	cmp	r3, #199	; 0xc7
 8000566:	d801      	bhi.n	800056c <Stepper_Set_Interval+0x14>
	{
		return 0;
 8000568:	2300      	movs	r3, #0
 800056a:	e00e      	b.n	800058a <Stepper_Set_Interval+0x32>
	}
	interval = _interval;
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <Stepper_Set_Interval+0x40>)
 800056e:	88fb      	ldrh	r3, [r7, #6]
 8000570:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, interval);
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <Stepper_Set_Interval+0x40>)
 8000574:	881a      	ldrh	r2, [r3, #0]
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <Stepper_Set_Interval+0x44>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	62da      	str	r2, [r3, #44]	; 0x2c
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <Stepper_Set_Interval+0x40>)
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <Stepper_Set_Interval+0x44>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	60da      	str	r2, [r3, #12]
	return 1;
 8000588:	2301      	movs	r3, #1
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000
 800059c:	20000034 	.word	0x20000034

080005a0 <Stepper_Rotate>:

uint8_t Stepper_Rotate(int32_t steps)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	if(steps_remain != 0 || steps == 0)
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <Stepper_Rotate+0x78>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <Stepper_Rotate+0x16>
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <Stepper_Rotate+0x1a>
	{
		return 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e02a      	b.n	8000610 <Stepper_Rotate+0x70>
	}
	if(steps < 0)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	da0c      	bge.n	80005da <Stepper_Rotate+0x3a>
	{
		steps_remain = (-steps) - 1;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	43db      	mvns	r3, r3
 80005c4:	4a14      	ldr	r2, [pc, #80]	; (8000618 <Stepper_Rotate+0x78>)
 80005c6:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(Dir_Port, Dir_Pin, RESET);
 80005c8:	4b14      	ldr	r3, [pc, #80]	; (800061c <Stepper_Rotate+0x7c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a14      	ldr	r2, [pc, #80]	; (8000620 <Stepper_Rotate+0x80>)
 80005ce:	8811      	ldrh	r1, [r2, #0]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fbc8 	bl	8002d68 <HAL_GPIO_WritePin>
 80005d8:	e00c      	b.n	80005f4 <Stepper_Rotate+0x54>
	}
	else
	{
		steps_remain = steps - 1;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	3b01      	subs	r3, #1
 80005de:	461a      	mov	r2, r3
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <Stepper_Rotate+0x78>)
 80005e2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Dir_Port, Dir_Pin, SET);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <Stepper_Rotate+0x7c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <Stepper_Rotate+0x80>)
 80005ea:	8811      	ldrh	r1, [r2, #0]
 80005ec:	2201      	movs	r2, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fbba 	bl	8002d68 <HAL_GPIO_WritePin>
	}
	HAL_TIM_Base_Start_IT(htim);
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <Stepper_Rotate+0x84>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 f9f9 	bl	80039f0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, channel);
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <Stepper_Rotate+0x84>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <Stepper_Rotate+0x88>)
 8000604:	6812      	ldr	r2, [r2, #0]
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f003 fae9 	bl	8003be0 <HAL_TIM_PWM_Start>
	return 1;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000003c 	.word	0x2000003c
 800061c:	20000040 	.word	0x20000040
 8000620:	20000044 	.word	0x20000044
 8000624:	20000034 	.word	0x20000034
 8000628:	20000038 	.word	0x20000038

0800062c <Stepper_Stop>:

void Stepper_Stop()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(htim);
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <Stepper_Stop+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fa4b 	bl	8003ad0 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(htim, channel);
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <Stepper_Stop+0x28>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a06      	ldr	r2, [pc, #24]	; (8000658 <Stepper_Stop+0x2c>)
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fb93 	bl	8003d70 <HAL_TIM_PWM_Stop>
	Stepper_Rotate_Cplt_CB();
 800064a:	f000 fd47 	bl	80010dc <Stepper_Rotate_Cplt_CB>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000034 	.word	0x20000034
 8000658:	20000038 	.word	0x20000038

0800065c <Stepper_Step_Cplt>:

void Stepper_Step_Cplt()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	if(steps_remain == 0)
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <Stepper_Step_Cplt+0x20>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d102      	bne.n	800066e <Stepper_Step_Cplt+0x12>
	{
		Stepper_Stop();
 8000668:	f7ff ffe0 	bl	800062c <Stepper_Stop>
	}
	else
	{
		steps_remain--;
	}
}
 800066c:	e004      	b.n	8000678 <Stepper_Step_Cplt+0x1c>
		steps_remain--;
 800066e:	4b03      	ldr	r3, [pc, #12]	; (800067c <Stepper_Step_Cplt+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3b01      	subs	r3, #1
 8000674:	4a01      	ldr	r2, [pc, #4]	; (800067c <Stepper_Step_Cplt+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000003c 	.word	0x2000003c

08000680 <Stepper_Cplt>:

uint8_t Stepper_Cplt()
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
	return steps_remain<=0;
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <Stepper_Cplt+0x1c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf0c      	ite	eq
 800068c:	2301      	moveq	r3, #1
 800068e:	2300      	movne	r3, #0
 8000690:	b2db      	uxtb	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	2000003c 	.word	0x2000003c

080006a0 <BT_Config>:
uint8_t TX_CPLT = 1, RX_CPLT = 1, RST = 0;
UART_HandleTypeDef *huart;


void BT_Config(UART_HandleTypeDef *_huart, uint8_t _message_len, uint8_t _msg_front, uint8_t _msg_end)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4603      	mov	r3, r0
 80006b0:	70fb      	strb	r3, [r7, #3]
 80006b2:	460b      	mov	r3, r1
 80006b4:	70bb      	strb	r3, [r7, #2]
 80006b6:	4613      	mov	r3, r2
 80006b8:	707b      	strb	r3, [r7, #1]
	huart = _huart;
 80006ba:	4a09      	ldr	r2, [pc, #36]	; (80006e0 <BT_Config+0x40>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	6013      	str	r3, [r2, #0]
	MES_LEN = _message_len;
 80006c0:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <BT_Config+0x44>)
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	7013      	strb	r3, [r2, #0]
	msg_front = _msg_front;
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <BT_Config+0x48>)
 80006c8:	78bb      	ldrb	r3, [r7, #2]
 80006ca:	7013      	strb	r3, [r2, #0]
	msg_end = _msg_end;
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <BT_Config+0x4c>)
 80006ce:	787b      	ldrb	r3, [r7, #1]
 80006d0:	7013      	strb	r3, [r2, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000024c 	.word	0x2000024c
 80006e4:	20000046 	.word	0x20000046
 80006e8:	20000249 	.word	0x20000249
 80006ec:	20000248 	.word	0x20000248

080006f0 <BT_Start_Receive>:


uint8_t BT_Start_Receive()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Receive(huart, &tmp, 1, 100);
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <BT_Start_Receive+0x48>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	1df9      	adds	r1, r7, #7
 8000700:	2364      	movs	r3, #100	; 0x64
 8000702:	2201      	movs	r2, #1
 8000704:	f004 fa94 	bl	8004c30 <HAL_UART_Receive>
	if(tmp == msg_end)
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <BT_Start_Receive+0x4c>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	429a      	cmp	r2, r3
 8000710:	d10d      	bne.n	800072e <BT_Start_Receive+0x3e>
	{
		HAL_UART_Receive_DMA(huart, rx_buff, MES_LEN);
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <BT_Start_Receive+0x48>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <BT_Start_Receive+0x50>)
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	b292      	uxth	r2, r2
 800071c:	4909      	ldr	r1, [pc, #36]	; (8000744 <BT_Start_Receive+0x54>)
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fb8e 	bl	8004e40 <HAL_UART_Receive_DMA>
		RST = 1;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <BT_Start_Receive+0x58>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
		return 1;
 800072a:	2301      	movs	r3, #1
 800072c:	e000      	b.n	8000730 <BT_Start_Receive+0x40>
	}
	return 0;
 800072e:	2300      	movs	r3, #0
}
 8000730:	4618      	mov	r0, r3
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000024c 	.word	0x2000024c
 800073c:	20000248 	.word	0x20000248
 8000740:	20000046 	.word	0x20000046
 8000744:	20000148 	.word	0x20000148
 8000748:	2000024a 	.word	0x2000024a

0800074c <BT_Transmit>:

void BT_Transmit(uint8_t *_tx_buff)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	while(TX_CPLT==0)
 8000754:	bf00      	nop
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <BT_Transmit+0x64>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0fb      	beq.n	8000756 <BT_Transmit+0xa>
	{}
	memset(tx_buff, 0, sizeof(char)*MES_LEN);
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <BT_Transmit+0x68>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	2100      	movs	r1, #0
 8000766:	4814      	ldr	r0, [pc, #80]	; (80007b8 <BT_Transmit+0x6c>)
 8000768:	f005 ffd1 	bl	800670e <memset>
	memcpy(tx_buff+1, _tx_buff, MES_LEN);
 800076c:	4813      	ldr	r0, [pc, #76]	; (80007bc <BT_Transmit+0x70>)
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <BT_Transmit+0x68>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	f005 fff7 	bl	8006768 <memcpy>
	tx_buff[0] = msg_front;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <BT_Transmit+0x74>)
 800077c:	781a      	ldrb	r2, [r3, #0]
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <BT_Transmit+0x6c>)
 8000780:	701a      	strb	r2, [r3, #0]
	tx_buff[MES_LEN-1] = msg_end;
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <BT_Transmit+0x68>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <BT_Transmit+0x78>)
 800078a:	7811      	ldrb	r1, [r2, #0]
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <BT_Transmit+0x6c>)
 800078e:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_DMA(huart, tx_buff, MES_LEN);
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <BT_Transmit+0x7c>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <BT_Transmit+0x68>)
 8000796:	7812      	ldrb	r2, [r2, #0]
 8000798:	b292      	uxth	r2, r2
 800079a:	4907      	ldr	r1, [pc, #28]	; (80007b8 <BT_Transmit+0x6c>)
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fadf 	bl	8004d60 <HAL_UART_Transmit_DMA>
	TX_CPLT = 0;
 80007a2:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <BT_Transmit+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000002 	.word	0x20000002
 80007b4:	20000046 	.word	0x20000046
 80007b8:	20000048 	.word	0x20000048
 80007bc:	20000049 	.word	0x20000049
 80007c0:	20000249 	.word	0x20000249
 80007c4:	20000248 	.word	0x20000248
 80007c8:	2000024c 	.word	0x2000024c

080007cc <BT_Transmit_Char>:

void BT_Transmit_Char(char *_tx_buff)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	while(TX_CPLT==0)
 80007d4:	bf00      	nop
 80007d6:	4b16      	ldr	r3, [pc, #88]	; (8000830 <BT_Transmit_Char+0x64>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0fb      	beq.n	80007d6 <BT_Transmit_Char+0xa>
	{}
	memset(tx_buff, 0, sizeof(char)*MES_LEN);
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <BT_Transmit_Char+0x68>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <BT_Transmit_Char+0x6c>)
 80007e8:	f005 ff91 	bl	800670e <memset>
	memcpy(tx_buff+1, _tx_buff, MES_LEN);
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <BT_Transmit_Char+0x70>)
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <BT_Transmit_Char+0x68>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	6879      	ldr	r1, [r7, #4]
 80007f6:	f005 ffb7 	bl	8006768 <memcpy>
	tx_buff[0] = msg_front;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <BT_Transmit_Char+0x74>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <BT_Transmit_Char+0x6c>)
 8000800:	701a      	strb	r2, [r3, #0]
	tx_buff[MES_LEN-1] = msg_end;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <BT_Transmit_Char+0x68>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	3b01      	subs	r3, #1
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <BT_Transmit_Char+0x78>)
 800080a:	7811      	ldrb	r1, [r2, #0]
 800080c:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <BT_Transmit_Char+0x6c>)
 800080e:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit_DMA(huart, tx_buff, MES_LEN);
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <BT_Transmit_Char+0x7c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <BT_Transmit_Char+0x68>)
 8000816:	7812      	ldrb	r2, [r2, #0]
 8000818:	b292      	uxth	r2, r2
 800081a:	4907      	ldr	r1, [pc, #28]	; (8000838 <BT_Transmit_Char+0x6c>)
 800081c:	4618      	mov	r0, r3
 800081e:	f004 fa9f 	bl	8004d60 <HAL_UART_Transmit_DMA>
	TX_CPLT = 0;
 8000822:	4b03      	ldr	r3, [pc, #12]	; (8000830 <BT_Transmit_Char+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000002 	.word	0x20000002
 8000834:	20000046 	.word	0x20000046
 8000838:	20000048 	.word	0x20000048
 800083c:	20000049 	.word	0x20000049
 8000840:	20000249 	.word	0x20000249
 8000844:	20000248 	.word	0x20000248
 8000848:	2000024c 	.word	0x2000024c

0800084c <BT_Tx_Cplt>:

void BT_Tx_Cplt()
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
	TX_CPLT = 1;
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <BT_Tx_Cplt+0x14>)
 8000852:	2201      	movs	r2, #1
 8000854:	701a      	strb	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	20000002 	.word	0x20000002

08000864 <BT_Rx_Cplt>:

const uint8_t* BT_Rx_Cplt()
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(huart, rx_buff, MES_LEN);
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <BT_Rx_Cplt+0x1c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <BT_Rx_Cplt+0x20>)
 800086e:	7812      	ldrb	r2, [r2, #0]
 8000870:	b292      	uxth	r2, r2
 8000872:	4905      	ldr	r1, [pc, #20]	; (8000888 <BT_Rx_Cplt+0x24>)
 8000874:	4618      	mov	r0, r3
 8000876:	f004 fae3 	bl	8004e40 <HAL_UART_Receive_DMA>
	return rx_buff;
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <BT_Rx_Cplt+0x24>)
}
 800087c:	4618      	mov	r0, r3
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000024c 	.word	0x2000024c
 8000884:	20000046 	.word	0x20000046
 8000888:	20000148 	.word	0x20000148

0800088c <Button_Press>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Button_Press()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	press ++;
 8000890:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <Button_Press+0x30>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <Button_Press+0x30>)
 800089a:	701a      	strb	r2, [r3, #0]
	Stepper_Set_Interval(interval);
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <Button_Press+0x34>)
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff fe59 	bl	8000558 <Stepper_Set_Interval>
	Stepper_Rotate(steps);
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <Button_Press+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe78 	bl	80005a0 <Stepper_Rotate>
	BT_Transmit(transmit);
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <Button_Press+0x3c>)
 80008b2:	f7ff ff4b 	bl	800074c <BT_Transmit>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000b18 	.word	0x20000b18
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000b14 	.word	0x20000b14
 80008c8:	20000b04 	.word	0x20000b04

080008cc <Rotate_toShelf>:

void Rotate_toShelf(uint8_t _shelf_num)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	desti_shelf = _shelf_num;
 80008d6:	4a0d      	ldr	r2, [pc, #52]	; (800090c <Rotate_toShelf+0x40>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	7013      	strb	r3, [r2, #0]
	Stepper_Rotate((desti_shelf-curr_shelf)*distance);
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <Rotate_toShelf+0x40>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <Rotate_toShelf+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <Rotate_toShelf+0x48>)
 80008ea:	8812      	ldrh	r2, [r2, #0]
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe55 	bl	80005a0 <Stepper_Rotate>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <Rotate_toShelf+0x4c>)
 80008fe:	f002 fa33 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000b1a 	.word	0x20000b1a
 8000910:	2000000a 	.word	0x2000000a
 8000914:	20000008 	.word	0x20000008
 8000918:	40020400 	.word	0x40020400

0800091c <Process_Message>:

void Process_Message(uint8_t* msg)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if(msg[0] == MSG_FRONT && msg[MESSAGE_LENGTH-1] == MSG_END)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b23      	cmp	r3, #35	; 0x23
 800092a:	d140      	bne.n	80009ae <Process_Message+0x92>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	330f      	adds	r3, #15
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b0a      	cmp	r3, #10
 8000934:	d13b      	bne.n	80009ae <Process_Message+0x92>
	{
		if(msg[1] == 's')
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3301      	adds	r3, #1
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b73      	cmp	r3, #115	; 0x73
 800093e:	d136      	bne.n	80009ae <Process_Message+0x92>
		{
			if(Stepper_Cplt() != 1)
 8000940:	f7ff fe9e 	bl	8000680 <Stepper_Cplt>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d002      	beq.n	8000950 <Process_Message+0x34>
			{
				BT_Transmit_Char("ErrorBusy**");
 800094a:	4826      	ldr	r0, [pc, #152]	; (80009e4 <Process_Message+0xc8>)
 800094c:	f7ff ff3e 	bl	80007cc <BT_Transmit_Char>
			}
			BT_Transmit_Char("get*****");
 8000950:	4825      	ldr	r0, [pc, #148]	; (80009e8 <Process_Message+0xcc>)
 8000952:	f7ff ff3b 	bl	80007cc <BT_Transmit_Char>
			uint8_t shelf_num = (msg[2]-'0')*100 + (msg[3]-'0')*10 + (msg[4]-'0');
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3302      	adds	r3, #2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	0092      	lsls	r2, r2, #2
 8000960:	4413      	add	r3, r2
 8000962:	461a      	mov	r2, r3
 8000964:	0091      	lsls	r1, r2, #2
 8000966:	461a      	mov	r2, r3
 8000968:	460b      	mov	r3, r1
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3303      	adds	r3, #3
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	0089      	lsls	r1, r1, #2
 800097a:	440b      	add	r3, r1
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4413      	add	r3, r2
 8000982:	b2da      	uxtb	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	3304      	adds	r3, #4
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3330      	adds	r3, #48	; 0x30
 8000990:	73fb      	strb	r3, [r7, #15]
			if(shelf_num == curr_shelf)
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <Process_Message+0xd0>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	7bfa      	ldrb	r2, [r7, #15]
 8000998:	429a      	cmp	r2, r3
 800099a:	d103      	bne.n	80009a4 <Process_Message+0x88>
			{
				BT_Transmit_Char("Not Change");
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <Process_Message+0xd4>)
 800099e:	f7ff ff15 	bl	80007cc <BT_Transmit_Char>
				return ;
 80009a2:	e01c      	b.n	80009de <Process_Message+0xc2>
			}
			Rotate_toShelf(shelf_num);
 80009a4:	7bfb      	ldrb	r3, [r7, #15]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff90 	bl	80008cc <Rotate_toShelf>
			return ;
 80009ac:	e017      	b.n	80009de <Process_Message+0xc2>
		}
	}
	BT_Transmit_Char("FormatErr");
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <Process_Message+0xd8>)
 80009b0:	f7ff ff0c 	bl	80007cc <BT_Transmit_Char>
	while(BT_Start_Receive() == 0)
 80009b4:	e009      	b.n	80009ca <Process_Message+0xae>
	{
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80009b6:	2101      	movs	r1, #1
 80009b8:	480f      	ldr	r0, [pc, #60]	; (80009f8 <Process_Message+0xdc>)
 80009ba:	f002 f9ee 	bl	8002d9a <HAL_GPIO_TogglePin>
	  bttry++;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <Process_Message+0xe0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <Process_Message+0xe0>)
 80009c8:	701a      	strb	r2, [r3, #0]
	while(BT_Start_Receive() == 0)
 80009ca:	f7ff fe91 	bl	80006f0 <BT_Start_Receive>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f0      	beq.n	80009b6 <Process_Message+0x9a>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2101      	movs	r1, #1
 80009d8:	4807      	ldr	r0, [pc, #28]	; (80009f8 <Process_Message+0xdc>)
 80009da:	f002 f9c5 	bl	8002d68 <HAL_GPIO_WritePin>
}
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	0800679c 	.word	0x0800679c
 80009e8:	080067a8 	.word	0x080067a8
 80009ec:	2000000a 	.word	0x2000000a
 80009f0:	080067b4 	.word	0x080067b4
 80009f4:	080067c0 	.word	0x080067c0
 80009f8:	40020400 	.word	0x40020400
 80009fc:	20000b1b 	.word	0x20000b1b

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 ff31 	bl	800186c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f86d 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 fa6d 	bl	8000eec <MX_GPIO_Init>
  MX_DMA_Init();
 8000a12:	f000 fa43 	bl	8000e9c <MX_DMA_Init>
  MX_ETH_Init();
 8000a16:	f000 f8d1 	bl	8000bbc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a1a:	f000 f9e7 	bl	8000dec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a1e:	f000 fa0f 	bl	8000e40 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000a22:	f000 f919 	bl	8000c58 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000a26:	f000 f9b7 	bl	8000d98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  Stepper_Config(STEPPER_TIMER, TIM_CHANNEL_1, STEPPER_INTERVAL, Stepper_Dir_GPIO_Port, Stepper_Dir_Pin);
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <main+0xc0>)
 8000a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a36:	2100      	movs	r1, #0
 8000a38:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <main+0xc4>)
 8000a3a:	f7ff fd55 	bl	80004e8 <Stepper_Config>

  BT_Config(bt_huart, MESSAGE_LENGTH, MSG_FRONT, MSG_END);
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <main+0xc8>)
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	230a      	movs	r3, #10
 8000a44:	2223      	movs	r2, #35	; 0x23
 8000a46:	2110      	movs	r1, #16
 8000a48:	f7ff fe2a 	bl	80006a0 <BT_Config>
  BT_Transmit_Char("AutoBookshelf");
 8000a4c:	481f      	ldr	r0, [pc, #124]	; (8000acc <main+0xcc>)
 8000a4e:	f7ff febd 	bl	80007cc <BT_Transmit_Char>
  BT_Transmit_Char("Polling RESET");
 8000a52:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <main+0xd0>)
 8000a54:	f7ff feba 	bl	80007cc <BT_Transmit_Char>
  while(BT_Start_Receive() != 1)
 8000a58:	e009      	b.n	8000a6e <main+0x6e>
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	481d      	ldr	r0, [pc, #116]	; (8000ad4 <main+0xd4>)
 8000a5e:	f002 f99c 	bl	8002d9a <HAL_GPIO_TogglePin>
	  bttry++;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <main+0xd8>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <main+0xd8>)
 8000a6c:	701a      	strb	r2, [r3, #0]
  while(BT_Start_Receive() != 1)
 8000a6e:	f7ff fe3f 	bl	80006f0 <BT_Start_Receive>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d1f0      	bne.n	8000a5a <main+0x5a>
  }
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4815      	ldr	r0, [pc, #84]	; (8000ad4 <main+0xd4>)
 8000a7e:	f002 f973 	bl	8002d68 <HAL_GPIO_WritePin>
  BT_Transmit_Char("RESET SUCCESS");
 8000a82:	4816      	ldr	r0, [pc, #88]	; (8000adc <main+0xdc>)
 8000a84:	f7ff fea2 	bl	80007cc <BT_Transmit_Char>
  HAL_Delay(1);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f000 ff61 	bl	8001950 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(steps != 0)
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <main+0xe0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00c      	beq.n	8000ab0 <main+0xb0>
	  {
		  Stepper_Set_Interval(interval);
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <main+0xe4>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd5c 	bl	8000558 <Stepper_Set_Interval>
		  Stepper_Rotate(steps);
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <main+0xe0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd7b 	bl	80005a0 <Stepper_Rotate>
		  steps = 0;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <main+0xe0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
	  }
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <main+0xd4>)
 8000ab4:	f002 f971 	bl	8002d9a <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000ab8:	20c8      	movs	r0, #200	; 0xc8
 8000aba:	f000 ff49 	bl	8001950 <HAL_Delay>
	  if(steps != 0)
 8000abe:	e7e6      	b.n	8000a8e <main+0x8e>
 8000ac0:	40021400 	.word	0x40021400
 8000ac4:	20000478 	.word	0x20000478
 8000ac8:	20000004 	.word	0x20000004
 8000acc:	080067cc 	.word	0x080067cc
 8000ad0:	080067dc 	.word	0x080067dc
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	20000b1b 	.word	0x20000b1b
 8000adc:	080067ec 	.word	0x080067ec
 8000ae0:	20000b14 	.word	0x20000b14
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	; 0x50
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2230      	movs	r2, #48	; 0x30
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f005 fe09 	bl	800670e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <SystemClock_Config+0xcc>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <SystemClock_Config+0xcc>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <SystemClock_Config+0xcc>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <SystemClock_Config+0xd0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <SystemClock_Config+0xd0>)
 8000b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <SystemClock_Config+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b48:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b5c:	23a8      	movs	r3, #168	; 0xa8
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b64:	2307      	movs	r3, #7
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 fa57 	bl	8003020 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b78:	f000 fb28 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2302      	movs	r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	2105      	movs	r1, #5
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fcb8 	bl	8003510 <HAL_RCC_ClockConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ba6:	f000 fb11 	bl	80011cc <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	3750      	adds	r7, #80	; 0x50
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40007000 	.word	0x40007000

08000bbc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_ETH_Init+0x84>)
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <MX_ETH_Init+0x88>)
 8000bc4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bcc:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000bd4:	22e1      	movs	r2, #225	; 0xe1
 8000bd6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <MX_ETH_Init+0x84>)
 8000bec:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000bee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_ETH_Init+0x84>)
 8000bf2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bf6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_ETH_Init+0x84>)
 8000bfa:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <MX_ETH_Init+0x90>)
 8000bfc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_ETH_Init+0x84>)
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <MX_ETH_Init+0x94>)
 8000c02:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_ETH_Init+0x84>)
 8000c06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c0a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_ETH_Init+0x84>)
 8000c0e:	f001 fbd7 	bl	80023c0 <HAL_ETH_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c18:	f000 fad8 	bl	80011cc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c1c:	2238      	movs	r2, #56	; 0x38
 8000c1e:	2100      	movs	r1, #0
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_ETH_Init+0x98>)
 8000c22:	f005 fd74 	bl	800670e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_ETH_Init+0x98>)
 8000c28:	2221      	movs	r2, #33	; 0x21
 8000c2a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_ETH_Init+0x98>)
 8000c2e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000c32:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c34:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MX_ETH_Init+0x98>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003c8 	.word	0x200003c8
 8000c44:	40028000 	.word	0x40028000
 8000c48:	20000b1c 	.word	0x20000b1c
 8000c4c:	20000328 	.word	0x20000328
 8000c50:	20000288 	.word	0x20000288
 8000c54:	20000250 	.word	0x20000250

08000c58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b096      	sub	sp, #88	; 0x58
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f005 fd3c 	bl	800670e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c96:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000c98:	4a3e      	ldr	r2, [pc, #248]	; (8000d94 <MX_TIM1_Init+0x13c>)
 8000c9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000c9c:	4b3c      	ldr	r3, [pc, #240]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000c9e:	22a7      	movs	r2, #167	; 0xa7
 8000ca0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b3b      	ldr	r3, [pc, #236]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000ca8:	4b39      	ldr	r3, [pc, #228]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b37      	ldr	r3, [pc, #220]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb6:	4b36      	ldr	r3, [pc, #216]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b34      	ldr	r3, [pc, #208]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cc2:	4833      	ldr	r0, [pc, #204]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000cc4:	f002 fe44 	bl	8003950 <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cce:	f000 fa7d 	bl	80011cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cd8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cdc:	4619      	mov	r1, r3
 8000cde:	482c      	ldr	r0, [pc, #176]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000ce0:	f003 fa68 	bl	80041b4 <HAL_TIM_ConfigClockSource>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cea:	f000 fa6f 	bl	80011cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cee:	4828      	ldr	r0, [pc, #160]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000cf0:	f002 ff1d 	bl	8003b2e <HAL_TIM_PWM_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cfa:	f000 fa67 	bl	80011cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cfe:	2320      	movs	r3, #32
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4820      	ldr	r0, [pc, #128]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000d0e:	f003 fe5d 	bl	80049cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d18:	f000 fa58 	bl	80011cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d1c:	2370      	movs	r3, #112	; 0x70
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 9;
 8000d20:	2309      	movs	r3, #9
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000d42:	f003 f975 	bl	8004030 <HAL_TIM_PWM_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d4c:	f000 fa3e 	bl	80011cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	4619      	mov	r1, r3
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000d74:	f003 fea6 	bl	8004ac4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d7e:	f000 fa25 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM1_Init+0x138>)
 8000d84:	f000 fb3e 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8000d88:	bf00      	nop
 8000d8a:	3758      	adds	r7, #88	; 0x58
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000478 	.word	0x20000478
 8000d94:	40010000 	.word	0x40010000

08000d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <MX_USART2_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f003 fede 	bl	8004b90 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f000 f9f7 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200004c0 	.word	0x200004c0
 8000de8:	40004400 	.word	0x40004400

08000dec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_USART3_UART_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_USART3_UART_Init+0x4c>)
 8000e24:	f003 feb4 	bl	8004b90 <HAL_UART_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e2e:	f000 f9cd 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000508 	.word	0x20000508
 8000e3c:	40004800 	.word	0x40004800

08000e40 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e44:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4e:	2204      	movs	r2, #4
 8000e50:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e60:	2202      	movs	r2, #2
 8000e62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e76:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e84:	f001 ffbc 	bl	8002e00 <HAL_PCD_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f000 f99d 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000610 	.word	0x20000610

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <MX_DMA_Init+0x4c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <MX_DMA_Init+0x4c>)
 8000eac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <MX_DMA_Init+0x4c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2010      	movs	r0, #16
 8000ec4:	f000 fe43 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ec8:	2010      	movs	r0, #16
 8000eca:	f000 fe5c 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2011      	movs	r0, #17
 8000ed4:	f000 fe3b 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ed8:	2011      	movs	r0, #17
 8000eda:	f000 fe54 	bl	8001b86 <HAL_NVIC_EnableIRQ>

}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08e      	sub	sp, #56	; 0x38
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
 8000f06:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a67      	ldr	r2, [pc, #412]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b65      	ldr	r3, [pc, #404]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	623b      	str	r3, [r7, #32]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	4b61      	ldr	r3, [pc, #388]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a60      	ldr	r2, [pc, #384]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b5e      	ldr	r3, [pc, #376]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a59      	ldr	r2, [pc, #356]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b53      	ldr	r3, [pc, #332]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a52      	ldr	r2, [pc, #328]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b50      	ldr	r3, [pc, #320]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a4b      	ldr	r2, [pc, #300]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a3d      	ldr	r2, [pc, #244]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000fb4:	f043 0308 	orr.w	r3, r3, #8
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a36      	ldr	r2, [pc, #216]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <MX_GPIO_Init+0x1bc>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fe8:	4830      	ldr	r0, [pc, #192]	; (80010ac <MX_GPIO_Init+0x1c0>)
 8000fea:	f001 febd 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_RESET);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff4:	482e      	ldr	r0, [pc, #184]	; (80010b0 <MX_GPIO_Init+0x1c4>)
 8000ff6:	f001 feb7 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	; 0x40
 8000ffe:	482d      	ldr	r0, [pc, #180]	; (80010b4 <MX_GPIO_Init+0x1c8>)
 8001000:	f001 feb2 	bl	8002d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001004:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4827      	ldr	r0, [pc, #156]	; (80010b8 <MX_GPIO_Init+0x1cc>)
 800101c:	f001 fcf8 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001020:	f244 0381 	movw	r3, #16513	; 0x4081
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	481c      	ldr	r0, [pc, #112]	; (80010ac <MX_GPIO_Init+0x1c0>)
 800103a:	f001 fce9 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stepper_Dir_Pin */
  GPIO_InitStruct.Pin = Stepper_Dir_Pin;
 800103e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104c:	2302      	movs	r3, #2
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Stepper_Dir_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4816      	ldr	r0, [pc, #88]	; (80010b0 <MX_GPIO_Init+0x1c4>)
 8001058:	f001 fcda 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800105c:	2340      	movs	r3, #64	; 0x40
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <MX_GPIO_Init+0x1c8>)
 8001074:	f001 fccc 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	480a      	ldr	r0, [pc, #40]	; (80010b4 <MX_GPIO_Init+0x1c8>)
 800108c:	f001 fcc0 	bl	8002a10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2028      	movs	r0, #40	; 0x28
 8001096:	f000 fd5a 	bl	8001b4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800109a:	2028      	movs	r0, #40	; 0x28
 800109c:	f000 fd73 	bl	8001b86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40021400 	.word	0x40021400
 80010b4:	40021800 	.word	0x40021800
 80010b8:	40020800 	.word	0x40020800

080010bc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	if(htim == STEPPER_TIMER)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Stepper_Step_Cplt();
 80010cc:	f7ff fac6 	bl	800065c <Stepper_Step_Cplt>
	}
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000478 	.word	0x20000478

080010dc <Stepper_Rotate_Cplt_CB>:

void Stepper_Rotate_Cplt_CB()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	callback++;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <Stepper_Rotate_Cplt_CB+0x30>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <Stepper_Rotate_Cplt_CB+0x30>)
 80010ea:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <Stepper_Rotate_Cplt_CB+0x34>)
 80010f4:	f001 fe38 	bl	8002d68 <HAL_GPIO_WritePin>
	curr_shelf = desti_shelf;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <Stepper_Rotate_Cplt_CB+0x38>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <Stepper_Rotate_Cplt_CB+0x3c>)
 80010fe:	701a      	strb	r2, [r3, #0]
	BT_Transmit_Char("rotate cplt");
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <Stepper_Rotate_Cplt_CB+0x40>)
 8001102:	f7ff fb63 	bl	80007cc <BT_Transmit_Char>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000b19 	.word	0x20000b19
 8001110:	40020400 	.word	0x40020400
 8001114:	20000b1a 	.word	0x20000b1a
 8001118:	2000000a 	.word	0x2000000a
 800111c:	080067fc 	.word	0x080067fc

08001120 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin)
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001130:	d107      	bne.n	8001142 <HAL_GPIO_EXTI_Callback+0x22>
	{
		press++;
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	3301      	adds	r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_GPIO_EXTI_Callback+0x2c>)
 800113c:	701a      	strb	r2, [r3, #0]
		Button_Press();
 800113e:	f7ff fba5 	bl	800088c <Button_Press>
	}
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000b18 	.word	0x20000b18

08001150 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(huart == bt_huart)
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_UART_TxCpltCallback+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	429a      	cmp	r2, r3
 8001160:	d106      	bne.n	8001170 <HAL_UART_TxCpltCallback+0x20>
	{
		BT_Tx_Cplt();
 8001162:	f7ff fb73 	bl	800084c <BT_Tx_Cplt>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2101      	movs	r1, #1
 800116a:	4804      	ldr	r0, [pc, #16]	; (800117c <HAL_UART_TxCpltCallback+0x2c>)
 800116c:	f001 fdfc 	bl	8002d68 <HAL_GPIO_WritePin>
	}
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000004 	.word	0x20000004
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if(huart == bt_huart)
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_UART_RxCpltCallback+0x40>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d111      	bne.n	80011b6 <HAL_UART_RxCpltCallback+0x36>
  {
	  const uint8_t *tmp;
	  tmp = BT_Rx_Cplt();
 8001192:	f7ff fb67 	bl	8000864 <BT_Rx_Cplt>
 8001196:	60f8      	str	r0, [r7, #12]
	  memcpy(receive, tmp, MESSAGE_LENGTH);
 8001198:	4a0a      	ldr	r2, [pc, #40]	; (80011c4 <HAL_UART_RxCpltCallback+0x44>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4614      	mov	r4, r2
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	6859      	ldr	r1, [r3, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	  Process_Message(receive);
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <HAL_UART_RxCpltCallback+0x44>)
 80011aa:	f7ff fbb7 	bl	800091c <Process_Message>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80011ae:	2101      	movs	r1, #1
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <HAL_UART_RxCpltCallback+0x48>)
 80011b2:	f001 fdf2 	bl	8002d9a <HAL_GPIO_TogglePin>
  }
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000004 	.word	0x20000004
 80011c4:	20000af4 	.word	0x20000af4
 80011c8:	40020400 	.word	0x40020400

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	; 0x38
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a55      	ldr	r2, [pc, #340]	; (800139c <HAL_ETH_MspInit+0x174>)
 8001246:	4293      	cmp	r3, r2
 8001248:	f040 80a4 	bne.w	8001394 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 8001256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001264:	623b      	str	r3, [r7, #32]
 8001266:	6a3b      	ldr	r3, [r7, #32]
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	4b4c      	ldr	r3, [pc, #304]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a4b      	ldr	r2, [pc, #300]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 8001272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2300      	movs	r3, #0
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 800128e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b42      	ldr	r3, [pc, #264]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a3d      	ldr	r2, [pc, #244]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a36      	ldr	r2, [pc, #216]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b34      	ldr	r3, [pc, #208]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a2f      	ldr	r2, [pc, #188]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 80012fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_ETH_MspInit+0x178>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001310:	2332      	movs	r3, #50	; 0x32
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001320:	230b      	movs	r3, #11
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	481e      	ldr	r0, [pc, #120]	; (80013a4 <HAL_ETH_MspInit+0x17c>)
 800132c:	f001 fb70 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001330:	2386      	movs	r3, #134	; 0x86
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001340:	230b      	movs	r3, #11
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	4817      	ldr	r0, [pc, #92]	; (80013a8 <HAL_ETH_MspInit+0x180>)
 800134c:	f001 fb60 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001362:	230b      	movs	r3, #11
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <HAL_ETH_MspInit+0x184>)
 800136e:	f001 fb4f 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001372:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001384:	230b      	movs	r3, #11
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <HAL_ETH_MspInit+0x188>)
 8001390:	f001 fb3e 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3738      	adds	r7, #56	; 0x38
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40028000 	.word	0x40028000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40021800 	.word	0x40021800

080013b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_TIM_Base_MspInit+0x48>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d115      	bne.n	80013f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_TIM_Base_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2019      	movs	r0, #25
 80013e8:	f000 fbb1 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013ec:	2019      	movs	r0, #25
 80013ee:	f000 fbca 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40010000 	.word	0x40010000
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <HAL_TIM_MspPostInit+0x68>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d11e      	bne.n	8001464 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_TIM_MspPostInit+0x6c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_TIM_MspPostInit+0x6c>)
 8001430:	f043 0310 	orr.w	r3, r3, #16
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_TIM_MspPostInit+0x6c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001446:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001454:	2301      	movs	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <HAL_TIM_MspPostInit+0x70>)
 8001460:	f001 fad6 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40010000 	.word	0x40010000
 8001470:	40023800 	.word	0x40023800
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a74      	ldr	r2, [pc, #464]	; (8001668 <HAL_UART_MspInit+0x1f0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	f040 80af 	bne.w	80015fa <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	4a71      	ldr	r2, [pc, #452]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014aa:	6413      	str	r3, [r2, #64]	; 0x40
 80014ac:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	61bb      	str	r3, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d4:	2300      	movs	r3, #0
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	4b64      	ldr	r3, [pc, #400]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	4a63      	ldr	r2, [pc, #396]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6313      	str	r3, [r2, #48]	; 0x30
 80014e4:	4b61      	ldr	r3, [pc, #388]	; (800166c <HAL_UART_MspInit+0x1f4>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f0:	2308      	movs	r3, #8
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001500:	2307      	movs	r3, #7
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4859      	ldr	r0, [pc, #356]	; (8001670 <HAL_UART_MspInit+0x1f8>)
 800150c:	f001 fa80 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001510:	2320      	movs	r3, #32
 8001512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001520:	2307      	movs	r3, #7
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	4619      	mov	r1, r3
 800152a:	4852      	ldr	r0, [pc, #328]	; (8001674 <HAL_UART_MspInit+0x1fc>)
 800152c:	f001 fa70 	bl	8002a10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001532:	4a52      	ldr	r2, [pc, #328]	; (800167c <HAL_UART_MspInit+0x204>)
 8001534:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001536:	4b50      	ldr	r3, [pc, #320]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800153c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800153e:	4b4e      	ldr	r3, [pc, #312]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001544:	4b4c      	ldr	r3, [pc, #304]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154a:	4b4b      	ldr	r3, [pc, #300]	; (8001678 <HAL_UART_MspInit+0x200>)
 800154c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001550:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001552:	4b49      	ldr	r3, [pc, #292]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <HAL_UART_MspInit+0x200>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800155e:	4b46      	ldr	r3, [pc, #280]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001564:	4b44      	ldr	r3, [pc, #272]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156a:	4b43      	ldr	r3, [pc, #268]	; (8001678 <HAL_UART_MspInit+0x200>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001570:	4841      	ldr	r0, [pc, #260]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001572:	f000 fb23 	bl	8001bbc <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800157c:	f7ff fe26 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a3d      	ldr	r2, [pc, #244]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001584:	63da      	str	r2, [r3, #60]	; 0x3c
 8001586:	4a3c      	ldr	r2, [pc, #240]	; (8001678 <HAL_UART_MspInit+0x200>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800158c:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <HAL_UART_MspInit+0x208>)
 800158e:	4a3d      	ldr	r2, [pc, #244]	; (8001684 <HAL_UART_MspInit+0x20c>)
 8001590:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001592:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <HAL_UART_MspInit+0x208>)
 8001594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001598:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159a:	4b39      	ldr	r3, [pc, #228]	; (8001680 <HAL_UART_MspInit+0x208>)
 800159c:	2240      	movs	r2, #64	; 0x40
 800159e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a0:	4b37      	ldr	r3, [pc, #220]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ae:	4b34      	ldr	r3, [pc, #208]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b4:	4b32      	ldr	r3, [pc, #200]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015ba:	4b31      	ldr	r3, [pc, #196]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015c0:	4b2f      	ldr	r3, [pc, #188]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015cc:	482c      	ldr	r0, [pc, #176]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015ce:	f000 faf5 	bl	8001bbc <HAL_DMA_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80015d8:	f7ff fdf8 	bl	80011cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015e0:	639a      	str	r2, [r3, #56]	; 0x38
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_UART_MspInit+0x208>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2026      	movs	r0, #38	; 0x26
 80015ee:	f000 faae 	bl	8001b4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015f2:	2026      	movs	r0, #38	; 0x26
 80015f4:	f000 fac7 	bl	8001b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015f8:	e031      	b.n	800165e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a22      	ldr	r2, [pc, #136]	; (8001688 <HAL_UART_MspInit+0x210>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d12c      	bne.n	800165e <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_UART_MspInit+0x1f4>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a17      	ldr	r2, [pc, #92]	; (800166c <HAL_UART_MspInit+0x1f4>)
 800160e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_UART_MspInit+0x1f4>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_UART_MspInit+0x1f4>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <HAL_UART_MspInit+0x1f4>)
 800162a:	f043 0308 	orr.w	r3, r3, #8
 800162e:	6313      	str	r3, [r2, #48]	; 0x30
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_UART_MspInit+0x1f4>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800163c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800164e:	2307      	movs	r3, #7
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	4619      	mov	r1, r3
 8001658:	4806      	ldr	r0, [pc, #24]	; (8001674 <HAL_UART_MspInit+0x1fc>)
 800165a:	f001 f9d9 	bl	8002a10 <HAL_GPIO_Init>
}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40004400 	.word	0x40004400
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40020c00 	.word	0x40020c00
 8001678:	20000550 	.word	0x20000550
 800167c:	40026088 	.word	0x40026088
 8001680:	200005b0 	.word	0x200005b0
 8001684:	400260a0 	.word	0x400260a0
 8001688:	40004800 	.word	0x40004800

0800168c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ac:	d13f      	bne.n	800172e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_PCD_MspInit+0xac>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_PCD_MspInit+0xac>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <HAL_PCD_MspInit+0xac>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016dc:	230a      	movs	r3, #10
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4815      	ldr	r0, [pc, #84]	; (800173c <HAL_PCD_MspInit+0xb0>)
 80016e8:	f001 f992 	bl	8002a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <HAL_PCD_MspInit+0xb0>)
 8001702:	f001 f985 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_PCD_MspInit+0xac>)
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_PCD_MspInit+0xac>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6353      	str	r3, [r2, #52]	; 0x34
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_PCD_MspInit+0xac>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_PCD_MspInit+0xac>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <HAL_PCD_MspInit+0xac>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40020000 	.word	0x40020000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f000 f8c0 	bl	8001910 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <DMA1_Stream5_IRQHandler+0x10>)
 800179a:	f000 fba7 	bl	8001eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000550 	.word	0x20000550

080017a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA1_Stream6_IRQHandler+0x10>)
 80017ae:	f000 fb9d 	bl	8001eec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200005b0 	.word	0x200005b0

080017bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017c2:	f002 fb45 	bl	8003e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000478 	.word	0x20000478

080017d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <USART2_IRQHandler+0x10>)
 80017d6:	f003 fb59 	bl	8004e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200004c0 	.word	0x200004c0

080017e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80017e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ec:	f001 faf0 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181c:	f7ff ffea 	bl	80017f4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001822:	490d      	ldr	r1, [pc, #52]	; (8001858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001838:	4c0a      	ldr	r4, [pc, #40]	; (8001864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001846:	f004 ff6b 	bl	8006720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff f8d9 	bl	8000a00 <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001850:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800185c:	08006838 	.word	0x08006838
  ldr r2, =_sbss
 8001860:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001864:	20000b28 	.word	0x20000b28

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>
	...

0800186c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_Init+0x40>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <HAL_Init+0x40>)
 8001876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_Init+0x40>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_Init+0x40>)
 8001882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001888:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_Init+0x40>)
 800188e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001894:	2003      	movs	r0, #3
 8001896:	f000 f94f 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f000 f808 	bl	80018b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a0:	f7ff fc9a 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00

080018b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_InitTick+0x54>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0x58>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 f967 	bl	8001ba2 <HAL_SYSTICK_Config>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e00e      	b.n	80018fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b0f      	cmp	r3, #15
 80018e2:	d80a      	bhi.n	80018fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e4:	2200      	movs	r2, #0
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f000 f92f 	bl	8001b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_InitTick+0x5c>)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000000c 	.word	0x2000000c
 8001908:	20000014 	.word	0x20000014
 800190c:	20000010 	.word	0x20000010

08001910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_IncTick+0x20>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x24>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4413      	add	r3, r2
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <HAL_IncTick+0x24>)
 8001922:	6013      	str	r3, [r2, #0]
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000014 	.word	0x20000014
 8001934:	20000b24 	.word	0x20000b24

08001938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_GetTick+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000b24 	.word	0x20000b24

08001950 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001958:	f7ff ffee 	bl	8001938 <HAL_GetTick>
 800195c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001968:	d005      	beq.n	8001976 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196a:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_Delay+0x44>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4413      	add	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001976:	bf00      	nop
 8001978:	f7ff ffde 	bl	8001938 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	429a      	cmp	r2, r3
 8001986:	d8f7      	bhi.n	8001978 <HAL_Delay+0x28>
  {
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000014 	.word	0x20000014

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b04:	d301      	bcc.n	8001b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00f      	b.n	8001b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <SysTick_Config+0x40>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b12:	210f      	movs	r1, #15
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f7ff ff8e 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <SysTick_Config+0x40>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b22:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SysTick_Config+0x40>)
 8001b24:	2207      	movs	r2, #7
 8001b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	e000e010 	.word	0xe000e010

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff ff29 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b60:	f7ff ff3e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	68b9      	ldr	r1, [r7, #8]
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff ff8e 	bl	8001a8c <NVIC_EncodePriority>
 8001b70:	4602      	mov	r2, r0
 8001b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b76:	4611      	mov	r1, r2
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	bf00      	nop
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff31 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff ffa2 	bl	8001af4 <SysTick_Config>
 8001bb0:	4603      	mov	r3, r0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff feb6 	bl	8001938 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e099      	b.n	8001d0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf8:	e00f      	b.n	8001c1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfa:	f7ff fe9d 	bl	8001938 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	d908      	bls.n	8001c1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2203      	movs	r2, #3
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e078      	b.n	8001d0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e8      	bne.n	8001bfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_DMA_Init+0x158>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d107      	bne.n	8001c84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0307 	bic.w	r3, r3, #7
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d117      	bne.n	8001cde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fb01 	bl	80022c8 <DMA_CheckFifoParam>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e016      	b.n	8001d0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fab8 	bl	800225c <DMA_CalcBaseAndBitshift>
 8001cec:	4603      	mov	r3, r0
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	223f      	movs	r2, #63	; 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	f010803f 	.word	0xf010803f

08001d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_DMA_Start_IT+0x26>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e040      	b.n	8001dc0 <HAL_DMA_Start_IT+0xa8>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d12f      	bne.n	8001db2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fa4a 	bl	8002200 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	223f      	movs	r2, #63	; 0x3f
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0216 	orr.w	r2, r2, #22
 8001d86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0208 	orr.w	r2, r2, #8
 8001d9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e005      	b.n	8001dbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dd6:	f7ff fdaf 	bl	8001938 <HAL_GetTick>
 8001dda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d008      	beq.n	8001dfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2280      	movs	r2, #128	; 0x80
 8001dec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e052      	b.n	8001ea0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0216 	bic.w	r2, r2, #22
 8001e08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d103      	bne.n	8001e2a <HAL_DMA_Abort+0x62>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0208 	bic.w	r2, r2, #8
 8001e38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	e013      	b.n	8001e74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e4c:	f7ff fd74 	bl	8001938 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d90c      	bls.n	8001e74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e015      	b.n	8001ea0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1e4      	bne.n	8001e4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	223f      	movs	r2, #63	; 0x3f
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00c      	b.n	8001ee0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2205      	movs	r2, #5
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0201 	bic.w	r2, r2, #1
 8001edc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ef8:	4b8e      	ldr	r3, [pc, #568]	; (8002134 <HAL_DMA_IRQHandler+0x248>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a8e      	ldr	r2, [pc, #568]	; (8002138 <HAL_DMA_IRQHandler+0x24c>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0a9b      	lsrs	r3, r3, #10
 8001f04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	2208      	movs	r2, #8
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01a      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d013      	beq.n	8001f58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0204 	bic.w	r2, r2, #4
 8001f3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2208      	movs	r2, #8
 8001f46:	409a      	lsls	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d012      	beq.n	8001f8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f86:	f043 0202 	orr.w	r2, r3, #2
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2204      	movs	r2, #4
 8001f94:	409a      	lsls	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d00b      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	2210      	movs	r2, #16
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d043      	beq.n	800205c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03c      	beq.n	800205c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d018      	beq.n	800202e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d108      	bne.n	800201c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d024      	beq.n	800205c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
 800201a:	e01f      	b.n	800205c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01b      	beq.n	800205c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
 800202c:	e016      	b.n	800205c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0208 	bic.w	r2, r2, #8
 800204a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	2220      	movs	r2, #32
 8002062:	409a      	lsls	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4013      	ands	r3, r2
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 808f 	beq.w	800218c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 8087 	beq.w	800218c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2220      	movs	r2, #32
 8002084:	409a      	lsls	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b05      	cmp	r3, #5
 8002094:	d136      	bne.n	8002104 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0216 	bic.w	r2, r2, #22
 80020a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	695a      	ldr	r2, [r3, #20]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d103      	bne.n	80020c6 <HAL_DMA_IRQHandler+0x1da>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0208 	bic.w	r2, r2, #8
 80020d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	223f      	movs	r2, #63	; 0x3f
 80020dc:	409a      	lsls	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d07e      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
        }
        return;
 8002102:	e079      	b.n	80021f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01d      	beq.n	800214e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	2b00      	cmp	r3, #0
 8002126:	d031      	beq.n	800218c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	4798      	blx	r3
 8002130:	e02c      	b.n	800218c <HAL_DMA_IRQHandler+0x2a0>
 8002132:	bf00      	nop
 8002134:	2000000c 	.word	0x2000000c
 8002138:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d023      	beq.n	800218c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
 800214c:	e01e      	b.n	800218c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10f      	bne.n	800217c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f022 0210 	bic.w	r2, r2, #16
 800216a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002190:	2b00      	cmp	r3, #0
 8002192:	d032      	beq.n	80021fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2205      	movs	r2, #5
 80021a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d307      	bcc.n	80021d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f2      	bne.n	80021b8 <HAL_DMA_IRQHandler+0x2cc>
 80021d2:	e000      	b.n	80021d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
 80021f6:	e000      	b.n	80021fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80021f8:	bf00      	nop
    }
  }
}
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800221c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d108      	bne.n	8002240 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800223e:	e007      	b.n	8002250 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	60da      	str	r2, [r3, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3b10      	subs	r3, #16
 800226c:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <DMA_CalcBaseAndBitshift+0x64>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002276:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d909      	bls.n	800229e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	1d1a      	adds	r2, r3, #4
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	659a      	str	r2, [r3, #88]	; 0x58
 800229c:	e007      	b.n	80022ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	aaaaaaab 	.word	0xaaaaaaab
 80022c4:	08006820 	.word	0x08006820

080022c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d11f      	bne.n	8002322 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d856      	bhi.n	8002396 <DMA_CheckFifoParam+0xce>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <DMA_CheckFifoParam+0x28>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002301 	.word	0x08002301
 80022f4:	08002313 	.word	0x08002313
 80022f8:	08002301 	.word	0x08002301
 80022fc:	08002397 	.word	0x08002397
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d046      	beq.n	800239a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002310:	e043      	b.n	800239a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800231a:	d140      	bne.n	800239e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002320:	e03d      	b.n	800239e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800232a:	d121      	bne.n	8002370 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d837      	bhi.n	80023a2 <DMA_CheckFifoParam+0xda>
 8002332:	a201      	add	r2, pc, #4	; (adr r2, 8002338 <DMA_CheckFifoParam+0x70>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002349 	.word	0x08002349
 800233c:	0800234f 	.word	0x0800234f
 8002340:	08002349 	.word	0x08002349
 8002344:	08002361 	.word	0x08002361
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      break;
 800234c:	e030      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d025      	beq.n	80023a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235e:	e022      	b.n	80023a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800236e:	e01c      	b.n	80023aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d903      	bls.n	800237e <DMA_CheckFifoParam+0xb6>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d003      	beq.n	8002384 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800237c:	e018      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
      break;
 8002382:	e015      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00e      	beq.n	80023ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
      break;
 8002394:	e00b      	b.n	80023ae <DMA_CheckFifoParam+0xe6>
      break;
 8002396:	bf00      	nop
 8002398:	e00a      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
 800239c:	e008      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
 80023a0:	e006      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 80023a2:	bf00      	nop
 80023a4:	e004      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 80023a6:	bf00      	nop
 80023a8:	e002      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80023aa:	bf00      	nop
 80023ac:	e000      	b.n	80023b0 <DMA_CheckFifoParam+0xe8>
      break;
 80023ae:	bf00      	nop
    }
  } 
  
  return status; 
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop

080023c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06c      	b.n	80024ac <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2223      	movs	r2, #35	; 0x23
 80023e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7fe ff1f 	bl	8001228 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_ETH_Init+0xf4>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	4a30      	ldr	r2, [pc, #192]	; (80024b4 <HAL_ETH_Init+0xf4>)
 80023f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023f8:	6453      	str	r3, [r2, #68]	; 0x44
 80023fa:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_ETH_Init+0xf4>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002402:	60bb      	str	r3, [r7, #8]
 8002404:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002406:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <HAL_ETH_Init+0xf8>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <HAL_ETH_Init+0xf8>)
 800240c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002410:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002412:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <HAL_ETH_Init+0xf8>)
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4927      	ldr	r1, [pc, #156]	; (80024b8 <HAL_ETH_Init+0xf8>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_ETH_Init+0xf8>)
 8002422:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800243a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800243c:	f7ff fa7c 	bl	8001938 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002442:	e011      	b.n	8002468 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002444:	f7ff fa78 	bl	8001938 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002452:	d909      	bls.n	8002468 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2204      	movs	r2, #4
 8002458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	22e0      	movs	r2, #224	; 0xe0
 8002460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e021      	b.n	80024ac <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e4      	bne.n	8002444 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f958 	bl	8002730 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f9ff 	bl	8002884 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fa55 	bl	8002936 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	461a      	mov	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f9bd 	bl	8002814 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2210      	movs	r2, #16
 80024a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40013800 	.word	0x40013800

080024bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4b51      	ldr	r3, [pc, #324]	; (8002618 <ETH_SetMACConfig+0x15c>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	7c1b      	ldrb	r3, [r3, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <ETH_SetMACConfig+0x28>
 80024de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80024e2:	e000      	b.n	80024e6 <ETH_SetMACConfig+0x2a>
 80024e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	7c5b      	ldrb	r3, [r3, #17]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <ETH_SetMACConfig+0x38>
 80024ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024f2:	e000      	b.n	80024f6 <ETH_SetMACConfig+0x3a>
 80024f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	7fdb      	ldrb	r3, [r3, #31]
 8002502:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002504:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800250a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	7f92      	ldrb	r2, [r2, #30]
 8002510:	2a00      	cmp	r2, #0
 8002512:	d102      	bne.n	800251a <ETH_SetMACConfig+0x5e>
 8002514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002518:	e000      	b.n	800251c <ETH_SetMACConfig+0x60>
 800251a:	2200      	movs	r2, #0
                        macconf->Speed |
 800251c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7f1b      	ldrb	r3, [r3, #28]
 8002522:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002524:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800252a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	791b      	ldrb	r3, [r3, #4]
 8002530:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002532:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	f892 2020 	ldrb.w	r2, [r2, #32]
 800253a:	2a00      	cmp	r2, #0
 800253c:	d102      	bne.n	8002544 <ETH_SetMACConfig+0x88>
 800253e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002542:	e000      	b.n	8002546 <ETH_SetMACConfig+0x8a>
 8002544:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002546:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	7bdb      	ldrb	r3, [r3, #15]
 800254c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800254e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002554:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800255c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800255e:	4313      	orrs	r3, r2
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff f9ea 	bl	8001950 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002592:	4013      	ands	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80025a2:	2a00      	cmp	r2, #0
 80025a4:	d101      	bne.n	80025aa <ETH_SetMACConfig+0xee>
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	e000      	b.n	80025ac <ETH_SetMACConfig+0xf0>
 80025aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80025b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80025ba:	2a01      	cmp	r2, #1
 80025bc:	d101      	bne.n	80025c2 <ETH_SetMACConfig+0x106>
 80025be:	2208      	movs	r2, #8
 80025c0:	e000      	b.n	80025c4 <ETH_SetMACConfig+0x108>
 80025c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80025c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80025cc:	2a01      	cmp	r2, #1
 80025ce:	d101      	bne.n	80025d4 <ETH_SetMACConfig+0x118>
 80025d0:	2204      	movs	r2, #4
 80025d2:	e000      	b.n	80025d6 <ETH_SetMACConfig+0x11a>
 80025d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80025d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80025de:	2a01      	cmp	r2, #1
 80025e0:	d101      	bne.n	80025e6 <ETH_SetMACConfig+0x12a>
 80025e2:	2202      	movs	r2, #2
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0x12c>
 80025e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80025e8:	4313      	orrs	r3, r2
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff f9a5 	bl	8001950 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	ff20810f 	.word	0xff20810f

0800261c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4b3d      	ldr	r3, [pc, #244]	; (800272c <ETH_SetDMAConfig+0x110>)
 8002636:	4013      	ands	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	7b1b      	ldrb	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <ETH_SetDMAConfig+0x2c>
 8002642:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002646:	e000      	b.n	800264a <ETH_SetDMAConfig+0x2e>
 8002648:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7b5b      	ldrb	r3, [r3, #13]
 800264e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002650:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	7f52      	ldrb	r2, [r2, #29]
 8002656:	2a00      	cmp	r2, #0
 8002658:	d102      	bne.n	8002660 <ETH_SetDMAConfig+0x44>
 800265a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800265e:	e000      	b.n	8002662 <ETH_SetDMAConfig+0x46>
 8002660:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002662:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	7b9b      	ldrb	r3, [r3, #14]
 8002668:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800266a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002670:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	7f1b      	ldrb	r3, [r3, #28]
 8002676:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002678:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	7f9b      	ldrb	r3, [r3, #30]
 800267e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002680:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002686:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800268e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002690:	4313      	orrs	r3, r2
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a0:	461a      	mov	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f7ff f94c 	bl	8001950 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c0:	461a      	mov	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	791b      	ldrb	r3, [r3, #4]
 80026ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80026d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80026dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80026e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80026ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002702:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff f91d 	bl	8001950 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6013      	str	r3, [r2, #0]
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	f8de3f23 	.word	0xf8de3f23

08002730 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b0a6      	sub	sp, #152	; 0x98
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800273e:	2301      	movs	r3, #1
 8002740:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002744:	2300      	movs	r3, #0
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800275a:	2301      	movs	r3, #1
 800275c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002766:	2300      	movs	r3, #0
 8002768:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800276c:	2300      	movs	r3, #0
 800276e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002776:	2300      	movs	r3, #0
 8002778:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002780:	2300      	movs	r3, #0
 8002782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002792:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800279c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fe86 	bl	80024bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80027be:	2301      	movs	r3, #1
 80027c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027dc:	2301      	movs	r3, #1
 80027de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027f2:	2301      	movs	r3, #1
 80027f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002800:	f107 0308 	add.w	r3, r7, #8
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ff08 	bl	800261c <ETH_SetDMAConfig>
}
 800280c:	bf00      	nop
 800280e:	3798      	adds	r7, #152	; 0x98
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3305      	adds	r3, #5
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	3204      	adds	r2, #4
 800282c:	7812      	ldrb	r2, [r2, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4b11      	ldr	r3, [pc, #68]	; (800287c <ETH_MACAddressConfig+0x68>)
 8002836:	4413      	add	r3, r2
 8002838:	461a      	mov	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3303      	adds	r3, #3
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	061a      	lsls	r2, r3, #24
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3302      	adds	r3, #2
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	041b      	lsls	r3, r3, #16
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3301      	adds	r3, #1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	4313      	orrs	r3, r2
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	7812      	ldrb	r2, [r2, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <ETH_MACAddressConfig+0x6c>)
 8002866:	4413      	add	r3, r2
 8002868:	461a      	mov	r2, r3
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	6013      	str	r3, [r2, #0]
}
 800286e:	bf00      	nop
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40028040 	.word	0x40028040
 8002880:	40028044 	.word	0x40028044

08002884 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	e03e      	b.n	8002910 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68d9      	ldr	r1, [r3, #12]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	440b      	add	r3, r1
 80028a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	3206      	adds	r2, #6
 80028c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d80c      	bhi.n	80028f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68d9      	ldr	r1, [r3, #12]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	461a      	mov	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	e004      	b.n	80028fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3301      	adds	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b03      	cmp	r3, #3
 8002914:	d9bd      	bls.n	8002892 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002928:	611a      	str	r2, [r3, #16]
}
 800292a:	bf00      	nop
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e046      	b.n	80029d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6919      	ldr	r1, [r3, #16]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	440b      	add	r3, r1
 8002954:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002980:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002988:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	3212      	adds	r2, #18
 800299e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d80c      	bhi.n	80029c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6919      	ldr	r1, [r3, #16]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	461a      	mov	r2, r3
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	e004      	b.n	80029cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	461a      	mov	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3301      	adds	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d9b5      	bls.n	8002944 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a02:	60da      	str	r2, [r3, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	e177      	b.n	8002d1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	f040 8166 	bne.w	8002d16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d005      	beq.n	8002a62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d130      	bne.n	8002ac4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a98:	2201      	movs	r2, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0201 	and.w	r2, r3, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0303 	and.w	r3, r3, #3
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d017      	beq.n	8002b00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d123      	bne.n	8002b54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	220f      	movs	r2, #15
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	08da      	lsrs	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3208      	adds	r2, #8
 8002b4e:	69b9      	ldr	r1, [r7, #24]
 8002b50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 0203 	and.w	r2, r3, #3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80c0 	beq.w	8002d16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b66      	ldr	r3, [pc, #408]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b63      	ldr	r3, [pc, #396]	; (8002d34 <HAL_GPIO_Init+0x324>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bb2:	4a61      	ldr	r2, [pc, #388]	; (8002d38 <HAL_GPIO_Init+0x328>)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	089b      	lsrs	r3, r3, #2
 8002bb8:	3302      	adds	r3, #2
 8002bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	220f      	movs	r2, #15
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <HAL_GPIO_Init+0x32c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d037      	beq.n	8002c4e <HAL_GPIO_Init+0x23e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a57      	ldr	r2, [pc, #348]	; (8002d40 <HAL_GPIO_Init+0x330>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <HAL_GPIO_Init+0x23a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a56      	ldr	r2, [pc, #344]	; (8002d44 <HAL_GPIO_Init+0x334>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02b      	beq.n	8002c46 <HAL_GPIO_Init+0x236>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a55      	ldr	r2, [pc, #340]	; (8002d48 <HAL_GPIO_Init+0x338>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d025      	beq.n	8002c42 <HAL_GPIO_Init+0x232>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a54      	ldr	r2, [pc, #336]	; (8002d4c <HAL_GPIO_Init+0x33c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d01f      	beq.n	8002c3e <HAL_GPIO_Init+0x22e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a53      	ldr	r2, [pc, #332]	; (8002d50 <HAL_GPIO_Init+0x340>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x22a>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_GPIO_Init+0x344>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x226>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a51      	ldr	r2, [pc, #324]	; (8002d58 <HAL_GPIO_Init+0x348>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x222>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a50      	ldr	r2, [pc, #320]	; (8002d5c <HAL_GPIO_Init+0x34c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x21e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x350>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x21a>
 8002c26:	2309      	movs	r3, #9
 8002c28:	e012      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	e010      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c2e:	2308      	movs	r3, #8
 8002c30:	e00e      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e00c      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c36:	2306      	movs	r3, #6
 8002c38:	e00a      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x240>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	; (8002d38 <HAL_GPIO_Init+0x328>)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6e:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c98:	4b32      	ldr	r3, [pc, #200]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cbc:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc2:	4b28      	ldr	r3, [pc, #160]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d10:	4a14      	ldr	r2, [pc, #80]	; (8002d64 <HAL_GPIO_Init+0x354>)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	2b0f      	cmp	r3, #15
 8002d20:	f67f ae84 	bls.w	8002a2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021800 	.word	0x40021800
 8002d58:	40021c00 	.word	0x40021c00
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	40022400 	.word	0x40022400
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
 8002d74:	4613      	mov	r3, r2
 8002d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d84:	e003      	b.n	8002d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	619a      	str	r2, [r3, #24]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dac:	887a      	ldrh	r2, [r7, #2]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	041a      	lsls	r2, r3, #16
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	400b      	ands	r3, r1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe f996 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e101      	b.n	8003016 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d106      	bne.n	8002e32 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7fe fc2d 	bl	800168c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2203      	movs	r2, #3
 8002e36:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e40:	d102      	bne.n	8002e48 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 f9c3 	bl	80061d8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7c1a      	ldrb	r2, [r3, #16]
 8002e5a:	f88d 2000 	strb.w	r2, [sp]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e62:	f003 f955 	bl	8006110 <USB_CoreInit>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d005      	beq.n	8002e78 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e0ce      	b.n	8003016 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 f9bb 	bl	80061fa <USB_SetCurrentMode>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e0bf      	b.n	8003016 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	e04a      	b.n	8002f32 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3315      	adds	r3, #21
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	b298      	uxth	r0, r3
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	332e      	adds	r3, #46	; 0x2e
 8002ed8:	4602      	mov	r2, r0
 8002eda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002edc:	7bfa      	ldrb	r2, [r7, #15]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	3318      	adds	r3, #24
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ef0:	7bfa      	ldrb	r2, [r7, #15]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	331c      	adds	r3, #28
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	3320      	adds	r3, #32
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	3324      	adds	r3, #36	; 0x24
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d3af      	bcc.n	8002e9c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	e044      	b.n	8002fcc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002f6a:	7bfa      	ldrb	r2, [r7, #15]
 8002f6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	791b      	ldrb	r3, [r3, #4]
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d3b5      	bcc.n	8002f42 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7c1a      	ldrb	r2, [r3, #16]
 8002fde:	f88d 2000 	strb.w	r2, [sp]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe6:	f003 f955 	bl	8006294 <USB_DevInit>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e00c      	b.n	8003016 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f003 fb1d 	bl	800664e <USB_DevDisconnect>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e267      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d075      	beq.n	800312a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303e:	4b88      	ldr	r3, [pc, #544]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d00c      	beq.n	8003064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800304a:	4b85      	ldr	r3, [pc, #532]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003052:	2b08      	cmp	r3, #8
 8003054:	d112      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b82      	ldr	r3, [pc, #520]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003062:	d10b      	bne.n	800307c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	4b7e      	ldr	r3, [pc, #504]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05b      	beq.n	8003128 <HAL_RCC_OscConfig+0x108>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d157      	bne.n	8003128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e242      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d106      	bne.n	8003094 <HAL_RCC_OscConfig+0x74>
 8003086:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a75      	ldr	r2, [pc, #468]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	e01d      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x98>
 800309e:	4b70      	ldr	r3, [pc, #448]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6f      	ldr	r2, [pc, #444]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	4b6d      	ldr	r3, [pc, #436]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a6c      	ldr	r2, [pc, #432]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0xb0>
 80030b8:	4b69      	ldr	r3, [pc, #420]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a68      	ldr	r2, [pc, #416]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	4b66      	ldr	r3, [pc, #408]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a65      	ldr	r2, [pc, #404]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fc2e 	bl	8001938 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030e0:	f7fe fc2a 	bl	8001938 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b64      	cmp	r3, #100	; 0x64
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e207      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b5b      	ldr	r3, [pc, #364]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0xc0>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fc1a 	bl	8001938 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe fc16 	bl	8001938 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1f3      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311a:	4b51      	ldr	r3, [pc, #324]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0xe8>
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d063      	beq.n	80031fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003136:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00b      	beq.n	800315a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800314a:	2b08      	cmp	r3, #8
 800314c:	d11c      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800314e:	4b44      	ldr	r3, [pc, #272]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315a:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e1c7      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4937      	ldr	r1, [pc, #220]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003186:	e03a      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003190:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x244>)
 8003192:	2201      	movs	r2, #1
 8003194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe fbcf 	bl	8001938 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe fbcb 	bl	8001938 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e1a8      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4925      	ldr	r1, [pc, #148]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]
 80031d0:	e015      	b.n	80031fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_RCC_OscConfig+0x244>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d8:	f7fe fbae 	bl	8001938 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e0:	f7fe fbaa 	bl	8001938 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e187      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d036      	beq.n	8003278 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d016      	beq.n	8003240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <HAL_RCC_OscConfig+0x248>)
 8003214:	2201      	movs	r2, #1
 8003216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe fb8e 	bl	8001938 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003220:	f7fe fb8a 	bl	8001938 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e167      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_OscConfig+0x240>)
 8003234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x200>
 800323e:	e01b      	b.n	8003278 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_OscConfig+0x248>)
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7fe fb77 	bl	8001938 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324c:	e00e      	b.n	800326c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800324e:	f7fe fb73 	bl	8001938 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d907      	bls.n	800326c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e150      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
 8003260:	40023800 	.word	0x40023800
 8003264:	42470000 	.word	0x42470000
 8003268:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	4b88      	ldr	r3, [pc, #544]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800326e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ea      	bne.n	800324e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8097 	beq.w	80033b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800328a:	4b81      	ldr	r3, [pc, #516]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10f      	bne.n	80032b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b7d      	ldr	r3, [pc, #500]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	4a7c      	ldr	r2, [pc, #496]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 80032a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a4:	6413      	str	r3, [r2, #64]	; 0x40
 80032a6:	4b7a      	ldr	r3, [pc, #488]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b77      	ldr	r3, [pc, #476]	; (8003494 <HAL_RCC_OscConfig+0x474>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d118      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032c2:	4b74      	ldr	r3, [pc, #464]	; (8003494 <HAL_RCC_OscConfig+0x474>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a73      	ldr	r2, [pc, #460]	; (8003494 <HAL_RCC_OscConfig+0x474>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ce:	f7fe fb33 	bl	8001938 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d6:	f7fe fb2f 	bl	8001938 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e10c      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCC_OscConfig+0x474>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d106      	bne.n	800330a <HAL_RCC_OscConfig+0x2ea>
 80032fc:	4b64      	ldr	r3, [pc, #400]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a63      	ldr	r2, [pc, #396]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
 8003308:	e01c      	b.n	8003344 <HAL_RCC_OscConfig+0x324>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b05      	cmp	r3, #5
 8003310:	d10c      	bne.n	800332c <HAL_RCC_OscConfig+0x30c>
 8003312:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003316:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6713      	str	r3, [r2, #112]	; 0x70
 800331e:	4b5c      	ldr	r3, [pc, #368]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	4a5b      	ldr	r2, [pc, #364]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	; 0x70
 800332a:	e00b      	b.n	8003344 <HAL_RCC_OscConfig+0x324>
 800332c:	4b58      	ldr	r3, [pc, #352]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a57      	ldr	r2, [pc, #348]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	4b55      	ldr	r3, [pc, #340]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a54      	ldr	r2, [pc, #336]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800333e:	f023 0304 	bic.w	r3, r3, #4
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe faf4 	bl	8001938 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe faf0 	bl	8001938 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e0cb      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800336a:	4b49      	ldr	r3, [pc, #292]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0ee      	beq.n	8003354 <HAL_RCC_OscConfig+0x334>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003378:	f7fe fade 	bl	8001938 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	e00a      	b.n	8003396 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003380:	f7fe fada 	bl	8001938 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	f241 3288 	movw	r2, #5000	; 0x1388
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e0b5      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003396:	4b3e      	ldr	r3, [pc, #248]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1ee      	bne.n	8003380 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d105      	bne.n	80033b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a8:	4b39      	ldr	r3, [pc, #228]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	4a38      	ldr	r2, [pc, #224]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80a1 	beq.w	8003500 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033be:	4b34      	ldr	r3, [pc, #208]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d05c      	beq.n	8003484 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d141      	bne.n	8003456 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	4b31      	ldr	r3, [pc, #196]	; (8003498 <HAL_RCC_OscConfig+0x478>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fe faae 	bl	8001938 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe faaa 	bl	8001938 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e087      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033f2:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69da      	ldr	r2, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	019b      	lsls	r3, r3, #6
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	491b      	ldr	r1, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x478>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342e:	f7fe fa83 	bl	8001938 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003436:	f7fe fa7f 	bl	8001938 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e05c      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d0f0      	beq.n	8003436 <HAL_RCC_OscConfig+0x416>
 8003454:	e054      	b.n	8003500 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fa6c 	bl	8001938 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fa68 	bl	8001938 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e045      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b06      	ldr	r3, [pc, #24]	; (8003490 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x444>
 8003482:	e03d      	b.n	8003500 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d107      	bne.n	800349c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e038      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
 8003490:	40023800 	.word	0x40023800
 8003494:	40007000 	.word	0x40007000
 8003498:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4ec>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d028      	beq.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d121      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d11a      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034cc:	4013      	ands	r3, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d111      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	085b      	lsrs	r3, r3, #1
 80034e4:	3b01      	subs	r3, #1
 80034e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800

08003510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e0cc      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003524:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d90c      	bls.n	800354c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b65      	ldr	r3, [pc, #404]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353a:	4b63      	ldr	r3, [pc, #396]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d001      	beq.n	800354c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0b8      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003564:	4b59      	ldr	r3, [pc, #356]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a58      	ldr	r2, [pc, #352]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800356e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800357c:	4b53      	ldr	r3, [pc, #332]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a52      	ldr	r2, [pc, #328]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b50      	ldr	r3, [pc, #320]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	494d      	ldr	r1, [pc, #308]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d044      	beq.n	8003630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b47      	ldr	r3, [pc, #284]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d119      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e07f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d003      	beq.n	80035ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d109      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035de:	4b3b      	ldr	r3, [pc, #236]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e067      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f023 0203 	bic.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	4934      	ldr	r1, [pc, #208]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003600:	f7fe f99a 	bl	8001938 <HAL_GetTick>
 8003604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	e00a      	b.n	800361e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003608:	f7fe f996 	bl	8001938 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e04f      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	4b2b      	ldr	r3, [pc, #172]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 020c 	and.w	r2, r3, #12
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	429a      	cmp	r2, r3
 800362e:	d1eb      	bne.n	8003608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d20c      	bcs.n	8003658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003646:	4b20      	ldr	r3, [pc, #128]	; (80036c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e032      	b.n	80036be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003664:	4b19      	ldr	r3, [pc, #100]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4916      	ldr	r1, [pc, #88]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003672:	4313      	orrs	r3, r2
 8003674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	490e      	ldr	r1, [pc, #56]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003696:	f000 f821 	bl	80036dc <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490a      	ldr	r1, [pc, #40]	; (80036d0 <HAL_RCC_ClockConfig+0x1c0>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036b2:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f8fa 	bl	80018b0 <HAL_InitTick>

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023c00 	.word	0x40023c00
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08006808 	.word	0x08006808
 80036d4:	2000000c 	.word	0x2000000c
 80036d8:	20000010 	.word	0x20000010

080036dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b094      	sub	sp, #80	; 0x50
 80036e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	647b      	str	r3, [r7, #68]	; 0x44
 80036e8:	2300      	movs	r3, #0
 80036ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036ec:	2300      	movs	r3, #0
 80036ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036f4:	4b79      	ldr	r3, [pc, #484]	; (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d00d      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x40>
 8003700:	2b08      	cmp	r3, #8
 8003702:	f200 80e1 	bhi.w	80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x34>
 800370a:	2b04      	cmp	r3, #4
 800370c:	d003      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x3a>
 800370e:	e0db      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003710:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003712:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003714:	e0db      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003716:	4b73      	ldr	r3, [pc, #460]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003718:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800371a:	e0d8      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800371c:	4b6f      	ldr	r3, [pc, #444]	; (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003724:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003726:	4b6d      	ldr	r3, [pc, #436]	; (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d063      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b6a      	ldr	r3, [pc, #424]	; (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	2200      	movs	r2, #0
 800373a:	63bb      	str	r3, [r7, #56]	; 0x38
 800373c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800373e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
 8003746:	2300      	movs	r3, #0
 8003748:	637b      	str	r3, [r7, #52]	; 0x34
 800374a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800374e:	4622      	mov	r2, r4
 8003750:	462b      	mov	r3, r5
 8003752:	f04f 0000 	mov.w	r0, #0
 8003756:	f04f 0100 	mov.w	r1, #0
 800375a:	0159      	lsls	r1, r3, #5
 800375c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003760:	0150      	lsls	r0, r2, #5
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4621      	mov	r1, r4
 8003768:	1a51      	subs	r1, r2, r1
 800376a:	6139      	str	r1, [r7, #16]
 800376c:	4629      	mov	r1, r5
 800376e:	eb63 0301 	sbc.w	r3, r3, r1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003780:	4659      	mov	r1, fp
 8003782:	018b      	lsls	r3, r1, #6
 8003784:	4651      	mov	r1, sl
 8003786:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800378a:	4651      	mov	r1, sl
 800378c:	018a      	lsls	r2, r1, #6
 800378e:	4651      	mov	r1, sl
 8003790:	ebb2 0801 	subs.w	r8, r2, r1
 8003794:	4659      	mov	r1, fp
 8003796:	eb63 0901 	sbc.w	r9, r3, r1
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ae:	4690      	mov	r8, r2
 80037b0:	4699      	mov	r9, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	eb18 0303 	adds.w	r3, r8, r3
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	462b      	mov	r3, r5
 80037bc:	eb49 0303 	adc.w	r3, r9, r3
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037ce:	4629      	mov	r1, r5
 80037d0:	024b      	lsls	r3, r1, #9
 80037d2:	4621      	mov	r1, r4
 80037d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037d8:	4621      	mov	r1, r4
 80037da:	024a      	lsls	r2, r1, #9
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037e2:	2200      	movs	r2, #0
 80037e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80037e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ec:	f7fc fcfe 	bl	80001ec <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f8:	e058      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b38      	ldr	r3, [pc, #224]	; (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	2200      	movs	r2, #0
 8003802:	4618      	mov	r0, r3
 8003804:	4611      	mov	r1, r2
 8003806:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
 8003810:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0159      	lsls	r1, r3, #5
 8003822:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003826:	0150      	lsls	r0, r2, #5
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4641      	mov	r1, r8
 800382e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003832:	4649      	mov	r1, r9
 8003834:	eb63 0b01 	sbc.w	fp, r3, r1
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003844:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003848:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800384c:	ebb2 040a 	subs.w	r4, r2, sl
 8003850:	eb63 050b 	sbc.w	r5, r3, fp
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	00eb      	lsls	r3, r5, #3
 800385e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003862:	00e2      	lsls	r2, r4, #3
 8003864:	4614      	mov	r4, r2
 8003866:	461d      	mov	r5, r3
 8003868:	4643      	mov	r3, r8
 800386a:	18e3      	adds	r3, r4, r3
 800386c:	603b      	str	r3, [r7, #0]
 800386e:	464b      	mov	r3, r9
 8003870:	eb45 0303 	adc.w	r3, r5, r3
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003882:	4629      	mov	r1, r5
 8003884:	028b      	lsls	r3, r1, #10
 8003886:	4621      	mov	r1, r4
 8003888:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800388c:	4621      	mov	r1, r4
 800388e:	028a      	lsls	r2, r1, #10
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003896:	2200      	movs	r2, #0
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	61fa      	str	r2, [r7, #28]
 800389c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038a0:	f7fc fca4 	bl	80001ec <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_GetSysClockFreq+0x200>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	3301      	adds	r3, #1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80038bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038c6:	e002      	b.n	80038ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038c8:	4b05      	ldr	r3, [pc, #20]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3750      	adds	r7, #80	; 0x50
 80038d4:	46bd      	mov	sp, r7
 80038d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800
 80038e0:	00f42400 	.word	0x00f42400
 80038e4:	007a1200 	.word	0x007a1200

080038e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038ec:	4b03      	ldr	r3, [pc, #12]	; (80038fc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	2000000c 	.word	0x2000000c

08003900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003904:	f7ff fff0 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <HAL_RCC_GetPCLK1Freq+0x20>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	0a9b      	lsrs	r3, r3, #10
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	4903      	ldr	r1, [pc, #12]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800391c:	4618      	mov	r0, r3
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40023800 	.word	0x40023800
 8003924:	08006818 	.word	0x08006818

08003928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800392c:	f7ff ffdc 	bl	80038e8 <HAL_RCC_GetHCLKFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	0b5b      	lsrs	r3, r3, #13
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	4903      	ldr	r1, [pc, #12]	; (800394c <HAL_RCC_GetPCLK2Freq+0x24>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40023800 	.word	0x40023800
 800394c:	08006818 	.word	0x08006818

08003950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e041      	b.n	80039e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd fd1c 	bl	80013b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f000 fd00 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d001      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04e      	b.n	8003aa6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a32:	d01d      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <HAL_TIM_Base_Start_IT+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_TIM_Base_Start_IT+0x80>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a18      	ldr	r2, [pc, #96]	; (8003acc <HAL_TIM_Base_Start_IT+0xdc>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d111      	bne.n	8003a94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d010      	beq.n	8003aa4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a92:	e007      	b.n	8003aa4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40000400 	.word	0x40000400
 8003abc:	40000800 	.word	0x40000800
 8003ac0:	40000c00 	.word	0x40000c00
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40001800 	.word	0x40001800

08003ad0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	f241 1311 	movw	r3, #4369	; 0x1111
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_TIM_Base_Stop_IT+0x48>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6a1a      	ldr	r2, [r3, #32]
 8003afe:	f240 4344 	movw	r3, #1092	; 0x444
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_Base_Stop_IT+0x48>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e041      	b.n	8003bc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f839 	bl	8003bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f000 fc11 	bl	8004394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_TIM_PWM_Start+0x24>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e022      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d109      	bne.n	8003c1e <HAL_TIM_PWM_Start+0x3e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	e015      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_PWM_Start+0x58>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e008      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e07c      	b.n	8003d4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x82>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x92>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fe74 	bl	8004980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2d      	ldr	r2, [pc, #180]	; (8003d54 <HAL_TIM_PWM_Start+0x174>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d004      	beq.n	8003cac <HAL_TIM_PWM_Start+0xcc>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	; (8003d58 <HAL_TIM_PWM_Start+0x178>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_PWM_Start+0xd0>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_TIM_PWM_Start+0xd2>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <HAL_TIM_PWM_Start+0x174>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x136>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d01d      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x136>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1f      	ldr	r2, [pc, #124]	; (8003d5c <HAL_TIM_PWM_Start+0x17c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x136>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <HAL_TIM_PWM_Start+0x180>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x136>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <HAL_TIM_PWM_Start+0x184>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x136>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_TIM_PWM_Start+0x178>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x136>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_TIM_PWM_Start+0x188>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIM_PWM_Start+0x136>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a16      	ldr	r2, [pc, #88]	; (8003d6c <HAL_TIM_PWM_Start+0x18c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d111      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b06      	cmp	r3, #6
 8003d26:	d010      	beq.n	8003d4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d38:	e007      	b.n	8003d4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f042 0201 	orr.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40010000 	.word	0x40010000
 8003d58:	40010400 	.word	0x40010400
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40001800 	.word	0x40001800

08003d70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fdfc 	bl	8004980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2e      	ldr	r2, [pc, #184]	; (8003e48 <HAL_TIM_PWM_Stop+0xd8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d004      	beq.n	8003d9c <HAL_TIM_PWM_Stop+0x2c>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2d      	ldr	r2, [pc, #180]	; (8003e4c <HAL_TIM_PWM_Stop+0xdc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_TIM_PWM_Stop+0x30>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_TIM_PWM_Stop+0x32>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d017      	beq.n	8003dd6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	f241 1311 	movw	r3, #4369	; 0x1111
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10f      	bne.n	8003dd6 <HAL_TIM_PWM_Stop+0x66>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	f240 4344 	movw	r3, #1092	; 0x444
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_PWM_Stop+0x66>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10f      	bne.n	8003e06 <HAL_TIM_PWM_Stop+0x96>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	f240 4344 	movw	r3, #1092	; 0x444
 8003df0:	4013      	ands	r3, r2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d107      	bne.n	8003e06 <HAL_TIM_PWM_Stop+0x96>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0201 	bic.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Stop+0xa6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e14:	e013      	b.n	8003e3e <HAL_TIM_PWM_Stop+0xce>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Stop+0xb6>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e24:	e00b      	b.n	8003e3e <HAL_TIM_PWM_Stop+0xce>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Stop+0xc6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e34:	e003      	b.n	8003e3e <HAL_TIM_PWM_Stop+0xce>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40010400 	.word	0x40010400

08003e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d020      	beq.n	8003eb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01b      	beq.n	8003eb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0202 	mvn.w	r2, #2
 8003e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa5b 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 8003ea0:	e005      	b.n	8003eae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa4d 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fa5e 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d020      	beq.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d01b      	beq.n	8003f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0204 	mvn.w	r2, #4
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fa35 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa27 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 fa38 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d020      	beq.n	8003f4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0208 	mvn.w	r2, #8
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fa0f 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa01 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fa12 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01b      	beq.n	8003f98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0210 	mvn.w	r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9e9 	bl	8004356 <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f9db 	bl	8004342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f9ec 	bl	800436a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00c      	beq.n	8003fbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0201 	mvn.w	r2, #1
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd f880 	bl	80010bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00c      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fdce 	bl	8004b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9bd 	bl	800437e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0220 	mvn.w	r2, #32
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fda0 	bl	8004b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800403c:	2300      	movs	r3, #0
 800403e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800404a:	2302      	movs	r3, #2
 800404c:	e0ae      	b.n	80041ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b0c      	cmp	r3, #12
 800405a:	f200 809f 	bhi.w	800419c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800405e:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004064:	08004099 	.word	0x08004099
 8004068:	0800419d 	.word	0x0800419d
 800406c:	0800419d 	.word	0x0800419d
 8004070:	0800419d 	.word	0x0800419d
 8004074:	080040d9 	.word	0x080040d9
 8004078:	0800419d 	.word	0x0800419d
 800407c:	0800419d 	.word	0x0800419d
 8004080:	0800419d 	.word	0x0800419d
 8004084:	0800411b 	.word	0x0800411b
 8004088:	0800419d 	.word	0x0800419d
 800408c:	0800419d 	.word	0x0800419d
 8004090:	0800419d 	.word	0x0800419d
 8004094:	0800415b 	.word	0x0800415b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fa24 	bl	80044ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0208 	orr.w	r2, r2, #8
 80040b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0204 	bic.w	r2, r2, #4
 80040c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	619a      	str	r2, [r3, #24]
      break;
 80040d6:	e064      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 fa74 	bl	80045cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6999      	ldr	r1, [r3, #24]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	021a      	lsls	r2, r3, #8
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	619a      	str	r2, [r3, #24]
      break;
 8004118:	e043      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fac9 	bl	80046b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0208 	orr.w	r2, r2, #8
 8004134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0204 	bic.w	r2, r2, #4
 8004144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69d9      	ldr	r1, [r3, #28]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	61da      	str	r2, [r3, #28]
      break;
 8004158:	e023      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fb1d 	bl	80047a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69d9      	ldr	r1, [r3, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	021a      	lsls	r2, r3, #8
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	61da      	str	r2, [r3, #28]
      break;
 800419a:	e002      	b.n	80041a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	75fb      	strb	r3, [r7, #23]
      break;
 80041a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_TIM_ConfigClockSource+0x1c>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e0b4      	b.n	800433a <HAL_TIM_ConfigClockSource+0x186>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004208:	d03e      	beq.n	8004288 <HAL_TIM_ConfigClockSource+0xd4>
 800420a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800420e:	f200 8087 	bhi.w	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004216:	f000 8086 	beq.w	8004326 <HAL_TIM_ConfigClockSource+0x172>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d87f      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004220:	2b70      	cmp	r3, #112	; 0x70
 8004222:	d01a      	beq.n	800425a <HAL_TIM_ConfigClockSource+0xa6>
 8004224:	2b70      	cmp	r3, #112	; 0x70
 8004226:	d87b      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b60      	cmp	r3, #96	; 0x60
 800422a:	d050      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0x11a>
 800422c:	2b60      	cmp	r3, #96	; 0x60
 800422e:	d877      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b50      	cmp	r3, #80	; 0x50
 8004232:	d03c      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0xfa>
 8004234:	2b50      	cmp	r3, #80	; 0x50
 8004236:	d873      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b40      	cmp	r3, #64	; 0x40
 800423a:	d058      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x13a>
 800423c:	2b40      	cmp	r3, #64	; 0x40
 800423e:	d86f      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b30      	cmp	r3, #48	; 0x30
 8004242:	d064      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x15a>
 8004244:	2b30      	cmp	r3, #48	; 0x30
 8004246:	d86b      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d060      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b20      	cmp	r3, #32
 800424e:	d867      	bhi.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05c      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	2b10      	cmp	r3, #16
 8004256:	d05a      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x15a>
 8004258:	e062      	b.n	8004320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800426a:	f000 fb69 	bl	8004940 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800427c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	609a      	str	r2, [r3, #8]
      break;
 8004286:	e04f      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004298:	f000 fb52 	bl	8004940 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042aa:	609a      	str	r2, [r3, #8]
      break;
 80042ac:	e03c      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ba:	461a      	mov	r2, r3
 80042bc:	f000 fac6 	bl	800484c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2150      	movs	r1, #80	; 0x50
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fb1f 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 80042cc:	e02c      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042da:	461a      	mov	r2, r3
 80042dc:	f000 fae5 	bl	80048aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2160      	movs	r1, #96	; 0x60
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fb0f 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 80042ec:	e01c      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 faa6 	bl	800484c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2140      	movs	r1, #64	; 0x40
 8004306:	4618      	mov	r0, r3
 8004308:	f000 faff 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 800430c:	e00c      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4619      	mov	r1, r3
 8004318:	4610      	mov	r0, r2
 800431a:	f000 faf6 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 800431e:	e003      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]
      break;
 8004324:	e000      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004338:	7bfb      	ldrb	r3, [r7, #15]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a46      	ldr	r2, [pc, #280]	; (80044c0 <TIM_Base_SetConfig+0x12c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d013      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d00f      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a43      	ldr	r2, [pc, #268]	; (80044c4 <TIM_Base_SetConfig+0x130>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00b      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a42      	ldr	r2, [pc, #264]	; (80044c8 <TIM_Base_SetConfig+0x134>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d007      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a41      	ldr	r2, [pc, #260]	; (80044cc <TIM_Base_SetConfig+0x138>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d003      	beq.n	80043d4 <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a40      	ldr	r2, [pc, #256]	; (80044d0 <TIM_Base_SetConfig+0x13c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d108      	bne.n	80043e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a35      	ldr	r2, [pc, #212]	; (80044c0 <TIM_Base_SetConfig+0x12c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d027      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a32      	ldr	r2, [pc, #200]	; (80044c4 <TIM_Base_SetConfig+0x130>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d023      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a31      	ldr	r2, [pc, #196]	; (80044c8 <TIM_Base_SetConfig+0x134>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01f      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a30      	ldr	r2, [pc, #192]	; (80044cc <TIM_Base_SetConfig+0x138>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2f      	ldr	r2, [pc, #188]	; (80044d0 <TIM_Base_SetConfig+0x13c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d017      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2e      	ldr	r2, [pc, #184]	; (80044d4 <TIM_Base_SetConfig+0x140>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <TIM_Base_SetConfig+0x144>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00f      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <TIM_Base_SetConfig+0x148>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00b      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2b      	ldr	r2, [pc, #172]	; (80044e0 <TIM_Base_SetConfig+0x14c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2a      	ldr	r2, [pc, #168]	; (80044e4 <TIM_Base_SetConfig+0x150>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d003      	beq.n	8004446 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <TIM_Base_SetConfig+0x154>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800444c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a10      	ldr	r2, [pc, #64]	; (80044c0 <TIM_Base_SetConfig+0x12c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0xf8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <TIM_Base_SetConfig+0x13c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d103      	bne.n	8004494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d105      	bne.n	80044b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f023 0201 	bic.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]
  }
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40000400 	.word	0x40000400
 80044c8:	40000800 	.word	0x40000800
 80044cc:	40000c00 	.word	0x40000c00
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800
 80044e0:	40001800 	.word	0x40001800
 80044e4:	40001c00 	.word	0x40001c00
 80044e8:	40002000 	.word	0x40002000

080044ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a1b      	ldr	r3, [r3, #32]
 80044fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f023 0201 	bic.w	r2, r3, #1
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0303 	bic.w	r3, r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f023 0302 	bic.w	r3, r3, #2
 8004534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <TIM_OC1_SetConfig+0xd8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d003      	beq.n	8004550 <TIM_OC1_SetConfig+0x64>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a1f      	ldr	r2, [pc, #124]	; (80045c8 <TIM_OC1_SetConfig+0xdc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10c      	bne.n	800456a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 0308 	bic.w	r3, r3, #8
 8004556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	4313      	orrs	r3, r2
 8004560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <TIM_OC1_SetConfig+0xd8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_OC1_SetConfig+0x8e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a14      	ldr	r2, [pc, #80]	; (80045c8 <TIM_OC1_SetConfig+0xdc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d111      	bne.n	800459e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40010400 	.word	0x40010400

080045cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f023 0210 	bic.w	r2, r3, #16
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f023 0320 	bic.w	r3, r3, #32
 8004616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	4313      	orrs	r3, r2
 8004622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a22      	ldr	r2, [pc, #136]	; (80046b0 <TIM_OC2_SetConfig+0xe4>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC2_SetConfig+0x68>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a21      	ldr	r2, [pc, #132]	; (80046b4 <TIM_OC2_SetConfig+0xe8>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10d      	bne.n	8004650 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800463a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800464e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <TIM_OC2_SetConfig+0xe4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_OC2_SetConfig+0x94>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a16      	ldr	r2, [pc, #88]	; (80046b4 <TIM_OC2_SetConfig+0xe8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d113      	bne.n	8004688 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800466e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40010400 	.word	0x40010400

080046b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a21      	ldr	r2, [pc, #132]	; (8004798 <TIM_OC3_SetConfig+0xe0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d003      	beq.n	800471e <TIM_OC3_SetConfig+0x66>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <TIM_OC3_SetConfig+0xe4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d10d      	bne.n	800473a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	4313      	orrs	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a16      	ldr	r2, [pc, #88]	; (8004798 <TIM_OC3_SetConfig+0xe0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_OC3_SetConfig+0x92>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a15      	ldr	r2, [pc, #84]	; (800479c <TIM_OC3_SetConfig+0xe4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d113      	bne.n	8004772 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	621a      	str	r2, [r3, #32]
}
 800478c:	bf00      	nop
 800478e:	371c      	adds	r7, #28
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	40010000 	.word	0x40010000
 800479c:	40010400 	.word	0x40010400

080047a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a12      	ldr	r2, [pc, #72]	; (8004844 <TIM_OC4_SetConfig+0xa4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC4_SetConfig+0x68>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a11      	ldr	r2, [pc, #68]	; (8004848 <TIM_OC4_SetConfig+0xa8>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d109      	bne.n	800481c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	019b      	lsls	r3, r3, #6
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	621a      	str	r2, [r3, #32]
}
 8004836:	bf00      	nop
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40010000 	.word	0x40010000
 8004848:	40010400 	.word	0x40010400

0800484c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f023 0201 	bic.w	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f023 030a 	bic.w	r3, r3, #10
 8004888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b087      	sub	sp, #28
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f023 0210 	bic.w	r2, r3, #16
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	031b      	lsls	r3, r3, #12
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	f043 0307 	orr.w	r3, r3, #7
 800492c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b087      	sub	sp, #28
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800495a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	431a      	orrs	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	609a      	str	r2, [r3, #8]
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 031f 	and.w	r3, r3, #31
 8004992:	2201      	movs	r2, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	43db      	mvns	r3, r3
 80049a2:	401a      	ands	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1a      	ldr	r2, [r3, #32]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	fa01 f303 	lsl.w	r3, r1, r3
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e05a      	b.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d022      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d01d      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1d      	ldr	r2, [pc, #116]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d018      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d013      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a17      	ldr	r2, [pc, #92]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a15      	ldr	r2, [pc, #84]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d10c      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	40014000 	.word	0x40014000
 8004ac0:	40001800 	.word	0x40001800

08004ac4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d101      	bne.n	8004ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004adc:	2302      	movs	r3, #2
 8004ade:	e03d      	b.n	8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e042      	b.n	8004c28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fc fc5e 	bl	8001478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2224      	movs	r2, #36	; 0x24
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f001 f827 	bl	8005c28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695a      	ldr	r2, [r3, #20]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08a      	sub	sp, #40	; 0x28
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	f040 8081 	bne.w	8004d54 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_UART_Receive+0x2e>
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e079      	b.n	8004d56 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2222      	movs	r2, #34	; 0x22
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c76:	f7fc fe5f 	bl	8001938 <HAL_GetTick>
 8004c7a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	88fa      	ldrh	r2, [r7, #6]
 8004c86:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c90:	d108      	bne.n	8004ca4 <HAL_UART_Receive+0x74>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e003      	b.n	8004cac <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cac:	e047      	b.n	8004d3e <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	2120      	movs	r1, #32
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fcfc 	bl	80056b6 <UART_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e042      	b.n	8004d56 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	3302      	adds	r3, #2
 8004cec:	61bb      	str	r3, [r7, #24]
 8004cee:	e01f      	b.n	8004d30 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	d007      	beq.n	8004d0a <HAL_UART_Receive+0xda>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <HAL_UART_Receive+0xe8>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	e008      	b.n	8004d2a <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1b2      	bne.n	8004cae <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d156      	bne.n	8004e28 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_UART_Transmit_DMA+0x26>
 8004d80:	88fb      	ldrh	r3, [r7, #6]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e04f      	b.n	8004e2a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	4a21      	ldr	r2, [pc, #132]	; (8004e34 <HAL_UART_Transmit_DMA+0xd4>)
 8004db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <HAL_UART_Transmit_DMA+0xd8>)
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	4a1f      	ldr	r2, [pc, #124]	; (8004e3c <HAL_UART_Transmit_DMA+0xdc>)
 8004dc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	461a      	mov	r2, r3
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	f7fc ff99 	bl	8001d18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	617b      	str	r3, [r7, #20]
   return(result);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3314      	adds	r3, #20
 8004e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e10:	627a      	str	r2, [r7, #36]	; 0x24
 8004e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6a39      	ldr	r1, [r7, #32]
 8004e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	e000      	b.n	8004e2a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004e28:	2302      	movs	r3, #2
  }
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3730      	adds	r7, #48	; 0x30
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	08005405 	.word	0x08005405
 8004e38:	0800549f 	.word	0x0800549f
 8004e3c:	08005623 	.word	0x08005623

08004e40 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d112      	bne.n	8004e80 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_UART_Receive_DMA+0x26>
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e00b      	b.n	8004e82 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	461a      	mov	r2, r3
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fc76 	bl	8005768 <UART_Start_Receive_DMA>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e80:	2302      	movs	r3, #2
  }
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b0ba      	sub	sp, #232	; 0xe8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x66>
 8004ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fddd 	bl	8005aaa <UART_Receive_IT>
      return;
 8004ef0:	e25b      	b.n	80053aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 80de 	beq.w	80050b8 <HAL_UART_IRQHandler+0x22c>
 8004efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80d1 	beq.w	80050b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00b      	beq.n	8004f3a <HAL_UART_IRQHandler+0xae>
 8004f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d005      	beq.n	8004f3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	f043 0201 	orr.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_UART_IRQHandler+0xd2>
 8004f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f56:	f043 0202 	orr.w	r2, r3, #2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_UART_IRQHandler+0xf6>
 8004f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f043 0204 	orr.w	r2, r3, #4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d011      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x126>
 8004f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d105      	bne.n	8004fa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004faa:	f043 0208 	orr.w	r2, r3, #8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 81f2 	beq.w	80053a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <HAL_UART_IRQHandler+0x14e>
 8004fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fcc:	f003 0320 	and.w	r3, r3, #32
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fd68 	bl	8005aaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <HAL_UART_IRQHandler+0x17a>
 8004ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d04f      	beq.n	80050a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fc70 	bl	80058ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d141      	bne.n	800509e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	3314      	adds	r3, #20
 8005042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800504a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005056:	e841 2300 	strex	r3, r2, [r1]
 800505a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800505e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1d9      	bne.n	800501a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d013      	beq.n	8005096 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	4a7e      	ldr	r2, [pc, #504]	; (800526c <HAL_UART_IRQHandler+0x3e0>)
 8005074:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	4618      	mov	r0, r3
 800507c:	f7fc ff14 	bl	8001ea8 <HAL_DMA_Abort_IT>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005090:	4610      	mov	r0, r2
 8005092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	e00e      	b.n	80050b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f99e 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509c:	e00a      	b.n	80050b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f99a 	bl	80053d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a4:	e006      	b.n	80050b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f996 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80050b2:	e175      	b.n	80053a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b4:	bf00      	nop
    return;
 80050b6:	e173      	b.n	80053a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	2b01      	cmp	r3, #1
 80050be:	f040 814f 	bne.w	8005360 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8148 	beq.w	8005360 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8141 	beq.w	8005360 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60bb      	str	r3, [r7, #8]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fe:	2b40      	cmp	r3, #64	; 0x40
 8005100:	f040 80b6 	bne.w	8005270 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 8145 	beq.w	80053a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800511e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005122:	429a      	cmp	r2, r3
 8005124:	f080 813e 	bcs.w	80053a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800512e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	f000 8088 	beq.w	800524e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800515c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800516a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800516e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005172:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005176:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1d9      	bne.n	800513e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3314      	adds	r3, #20
 8005190:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800519a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e1      	bne.n	800518a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3314      	adds	r3, #20
 80051cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e3      	bne.n	80051c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800521c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521e:	f023 0310 	bic.w	r3, r3, #16
 8005222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005230:	65ba      	str	r2, [r7, #88]	; 0x58
 8005232:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005234:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005238:	e841 2300 	strex	r3, r2, [r1]
 800523c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800523e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e3      	bne.n	800520c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005248:	4618      	mov	r0, r3
 800524a:	f7fc fdbd 	bl	8001dc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2202      	movs	r2, #2
 8005252:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525c:	b29b      	uxth	r3, r3
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	b29b      	uxth	r3, r3
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8c1 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800526a:	e09b      	b.n	80053a4 <HAL_UART_IRQHandler+0x518>
 800526c:	080059b3 	.word	0x080059b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005278:	b29b      	uxth	r3, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 808e 	beq.w	80053a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800528c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8089 	beq.w	80053a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052ba:	647a      	str	r2, [r7, #68]	; 0x44
 80052bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e3      	bne.n	8005296 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3314      	adds	r3, #20
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	623b      	str	r3, [r7, #32]
   return(result);
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052f2:	633a      	str	r2, [r7, #48]	; 0x30
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e3      	bne.n	80052ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	60fb      	str	r3, [r7, #12]
   return(result);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0310 	bic.w	r3, r3, #16
 800532a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005338:	61fa      	str	r2, [r7, #28]
 800533a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	617b      	str	r3, [r7, #20]
   return(result);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e3      	bne.n	8005314 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f847 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800535e:	e023      	b.n	80053a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <HAL_UART_IRQHandler+0x4f4>
 800536c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fb2e 	bl	80059da <UART_Transmit_IT>
    return;
 800537e:	e014      	b.n	80053aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00e      	beq.n	80053aa <HAL_UART_IRQHandler+0x51e>
 800538c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fb6e 	bl	8005a7a <UART_EndTransmit_IT>
    return;
 800539e:	e004      	b.n	80053aa <HAL_UART_IRQHandler+0x51e>
    return;
 80053a0:	bf00      	nop
 80053a2:	e002      	b.n	80053aa <HAL_UART_IRQHandler+0x51e>
      return;
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <HAL_UART_IRQHandler+0x51e>
      return;
 80053a8:	bf00      	nop
  }
}
 80053aa:	37e8      	adds	r7, #232	; 0xe8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b090      	sub	sp, #64	; 0x40
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d137      	bne.n	8005490 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005422:	2200      	movs	r2, #0
 8005424:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3314      	adds	r3, #20
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	623b      	str	r3, [r7, #32]
   return(result);
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
 800543e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005446:	633a      	str	r2, [r7, #48]	; 0x30
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800544c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e5      	bne.n	8005426 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800545a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	60fb      	str	r3, [r7, #12]
   return(result);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005470:	637b      	str	r3, [r7, #52]	; 0x34
 8005472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800547a:	61fa      	str	r2, [r7, #28]
 800547c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	69b9      	ldr	r1, [r7, #24]
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	617b      	str	r3, [r7, #20]
   return(result);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800548e:	e002      	b.n	8005496 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005490:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005492:	f7fb fe5d 	bl	8001150 <HAL_UART_TxCpltCallback>
}
 8005496:	bf00      	nop
 8005498:	3740      	adds	r7, #64	; 0x40
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff ff7f 	bl	80053b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b09c      	sub	sp, #112	; 0x70
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d172      	bne.n	80055bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80054d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d8:	2200      	movs	r2, #0
 80054da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	330c      	adds	r3, #12
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80054fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800550a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e5      	bne.n	80054dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3314      	adds	r3, #20
 8005516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005522:	f023 0301 	bic.w	r3, r3, #1
 8005526:	667b      	str	r3, [r7, #100]	; 0x64
 8005528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005530:	647a      	str	r2, [r7, #68]	; 0x44
 8005532:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800553e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e5      	bne.n	8005510 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3314      	adds	r3, #20
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	623b      	str	r3, [r7, #32]
   return(result);
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800555a:	663b      	str	r3, [r7, #96]	; 0x60
 800555c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3314      	adds	r3, #20
 8005562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005564:	633a      	str	r2, [r7, #48]	; 0x30
 8005566:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e5      	bne.n	8005544 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	2b01      	cmp	r3, #1
 8005586:	d119      	bne.n	80055bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	60fb      	str	r3, [r7, #12]
   return(result);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0310 	bic.w	r3, r3, #16
 800559e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	330c      	adds	r3, #12
 80055a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055a8:	61fa      	str	r2, [r7, #28]
 80055aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	69b9      	ldr	r1, [r7, #24]
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	617b      	str	r3, [r7, #20]
   return(result);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	2200      	movs	r2, #0
 80055c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d106      	bne.n	80055d8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055ce:	4619      	mov	r1, r3
 80055d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055d2:	f7ff ff0b 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055d6:	e002      	b.n	80055de <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80055d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80055da:	f7fb fdd1 	bl	8001180 <HAL_UART_RxCpltCallback>
}
 80055de:	bf00      	nop
 80055e0:	3770      	adds	r7, #112	; 0x70
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d108      	bne.n	8005614 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	4619      	mov	r1, r3
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff feed 	bl	80053ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005612:	e002      	b.n	800561a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fed5 	bl	80053c4 <HAL_UART_RxHalfCpltCallback>
}
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b21      	cmp	r3, #33	; 0x21
 8005654:	d108      	bne.n	8005668 <UART_DMAError+0x46>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005662:	68b8      	ldr	r0, [r7, #8]
 8005664:	f000 f91a 	bl	800589c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b22      	cmp	r3, #34	; 0x22
 8005688:	d108      	bne.n	800569c <UART_DMAError+0x7a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005696:	68b8      	ldr	r0, [r7, #8]
 8005698:	f000 f928 	bl	80058ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a0:	f043 0210 	orr.w	r2, r3, #16
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a8:	68b8      	ldr	r0, [r7, #8]
 80056aa:	f7ff fe95 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c6:	e03b      	b.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ce:	d037      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d0:	f7fc f932 	bl	8001938 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	6a3a      	ldr	r2, [r7, #32]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e03a      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d023      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b80      	cmp	r3, #128	; 0x80
 80056fc:	d020      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b40      	cmp	r3, #64	; 0x40
 8005702:	d01d      	beq.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b08      	cmp	r3, #8
 8005710:	d116      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	617b      	str	r3, [r7, #20]
 8005726:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f8df 	bl	80058ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2208      	movs	r2, #8
 8005732:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e00f      	b.n	8005760 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	429a      	cmp	r2, r3
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	429a      	cmp	r2, r3
 800575c:	d0b4      	beq.n	80056c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b098      	sub	sp, #96	; 0x60
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	88fa      	ldrh	r2, [r7, #6]
 8005780:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2222      	movs	r2, #34	; 0x22
 800578c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005794:	4a3e      	ldr	r2, [pc, #248]	; (8005890 <UART_Start_Receive_DMA+0x128>)
 8005796:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	4a3d      	ldr	r2, [pc, #244]	; (8005894 <UART_Start_Receive_DMA+0x12c>)
 800579e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a4:	4a3c      	ldr	r2, [pc, #240]	; (8005898 <UART_Start_Receive_DMA+0x130>)
 80057a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	2200      	movs	r2, #0
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80057b0:	f107 0308 	add.w	r3, r7, #8
 80057b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	f7fc faa6 	bl	8001d18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d019      	beq.n	800581e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005800:	65bb      	str	r3, [r7, #88]	; 0x58
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	330c      	adds	r3, #12
 8005808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800580a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800580c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e5      	bne.n	80057ea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	657b      	str	r3, [r7, #84]	; 0x54
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3314      	adds	r3, #20
 800583c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800583e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800584c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e5      	bne.n	800581e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3314      	adds	r3, #20
 8005858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	e853 3f00 	ldrex	r3, [r3]
 8005860:	617b      	str	r3, [r7, #20]
   return(result);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005868:	653b      	str	r3, [r7, #80]	; 0x50
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005872:	627a      	str	r2, [r7, #36]	; 0x24
 8005874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	6a39      	ldr	r1, [r7, #32]
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1e5      	bne.n	8005852 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3760      	adds	r7, #96	; 0x60
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	080054bb 	.word	0x080054bb
 8005894:	080055e7 	.word	0x080055e7
 8005898:	08005623 	.word	0x08005623

0800589c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b089      	sub	sp, #36	; 0x24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	330c      	adds	r3, #12
 80058aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	61ba      	str	r2, [r7, #24]
 80058c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6979      	ldr	r1, [r7, #20]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	613b      	str	r3, [r7, #16]
   return(result);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e5      	bne.n	80058a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80058e0:	bf00      	nop
 80058e2:	3724      	adds	r7, #36	; 0x24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b095      	sub	sp, #84	; 0x54
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800590a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005914:	643a      	str	r2, [r7, #64]	; 0x40
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800591a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3314      	adds	r3, #20
 800592e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005930:	6a3b      	ldr	r3, [r7, #32]
 8005932:	e853 3f00 	ldrex	r3, [r3]
 8005936:	61fb      	str	r3, [r7, #28]
   return(result);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800594e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e5      	bne.n	8005928 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	2b01      	cmp	r3, #1
 8005962:	d119      	bne.n	8005998 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	60bb      	str	r3, [r7, #8]
   return(result);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f023 0310 	bic.w	r3, r3, #16
 800597a:	647b      	str	r3, [r7, #68]	; 0x44
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	330c      	adds	r3, #12
 8005982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005984:	61ba      	str	r2, [r7, #24]
 8005986:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6979      	ldr	r1, [r7, #20]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	613b      	str	r3, [r7, #16]
   return(result);
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e5      	bne.n	8005964 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059a6:	bf00      	nop
 80059a8:	3754      	adds	r7, #84	; 0x54
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f7ff fd03 	bl	80053d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059d2:	bf00      	nop
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b21      	cmp	r3, #33	; 0x21
 80059ec:	d13e      	bne.n	8005a6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	d114      	bne.n	8005a22 <UART_Transmit_IT+0x48>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d110      	bne.n	8005a22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	1c9a      	adds	r2, r3, #2
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	621a      	str	r2, [r3, #32]
 8005a20:	e008      	b.n	8005a34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	1c59      	adds	r1, r3, #1
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6211      	str	r1, [r2, #32]
 8005a2c:	781a      	ldrb	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4619      	mov	r1, r3
 8005a42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10f      	bne.n	8005a68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	e000      	b.n	8005a6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a6c:	2302      	movs	r3, #2
  }
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b082      	sub	sp, #8
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fb fb58 	bl	8001150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b08c      	sub	sp, #48	; 0x30
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b22      	cmp	r3, #34	; 0x22
 8005abc:	f040 80ae 	bne.w	8005c1c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac8:	d117      	bne.n	8005afa <UART_Receive_IT+0x50>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d113      	bne.n	8005afa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	1c9a      	adds	r2, r3, #2
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	629a      	str	r2, [r3, #40]	; 0x28
 8005af8:	e026      	b.n	8005b48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0c:	d007      	beq.n	8005b1e <UART_Receive_IT+0x74>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <UART_Receive_IT+0x82>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	e008      	b.n	8005b3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4619      	mov	r1, r3
 8005b56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d15d      	bne.n	8005c18 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68da      	ldr	r2, [r3, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0220 	bic.w	r2, r2, #32
 8005b6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d135      	bne.n	8005c0e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	330c      	adds	r3, #12
 8005bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f023 0310 	bic.w	r3, r3, #16
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	330c      	adds	r3, #12
 8005bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc8:	623a      	str	r2, [r7, #32]
 8005bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	69f9      	ldr	r1, [r7, #28]
 8005bce:	6a3a      	ldr	r2, [r7, #32]
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e5      	bne.n	8005ba8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d10a      	bne.n	8005c00 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fbf0 	bl	80053ec <HAL_UARTEx_RxEventCallback>
 8005c0c:	e002      	b.n	8005c14 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fb fab6 	bl	8001180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e002      	b.n	8005c1e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e000      	b.n	8005c1e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c1c:	2302      	movs	r3, #2
  }
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3730      	adds	r7, #48	; 0x30
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c2c:	b0c0      	sub	sp, #256	; 0x100
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c44:	68d9      	ldr	r1, [r3, #12]
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	ea40 0301 	orr.w	r3, r0, r1
 8005c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c80:	f021 010c 	bic.w	r1, r1, #12
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c8e:	430b      	orrs	r3, r1
 8005c90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca2:	6999      	ldr	r1, [r3, #24]
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	ea40 0301 	orr.w	r3, r0, r1
 8005cae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b8f      	ldr	r3, [pc, #572]	; (8005ef4 <UART_SetConfig+0x2cc>)
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d005      	beq.n	8005cc8 <UART_SetConfig+0xa0>
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	4b8d      	ldr	r3, [pc, #564]	; (8005ef8 <UART_SetConfig+0x2d0>)
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d104      	bne.n	8005cd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cc8:	f7fd fe2e 	bl	8003928 <HAL_RCC_GetPCLK2Freq>
 8005ccc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cd0:	e003      	b.n	8005cda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cd2:	f7fd fe15 	bl	8003900 <HAL_RCC_GetPCLK1Freq>
 8005cd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce4:	f040 810c 	bne.w	8005f00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cf2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cf6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	1891      	adds	r1, r2, r2
 8005d00:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d02:	415b      	adcs	r3, r3
 8005d04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	eb12 0801 	adds.w	r8, r2, r1
 8005d10:	4629      	mov	r1, r5
 8005d12:	eb43 0901 	adc.w	r9, r3, r1
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d2a:	4690      	mov	r8, r2
 8005d2c:	4699      	mov	r9, r3
 8005d2e:	4623      	mov	r3, r4
 8005d30:	eb18 0303 	adds.w	r3, r8, r3
 8005d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d38:	462b      	mov	r3, r5
 8005d3a:	eb49 0303 	adc.w	r3, r9, r3
 8005d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d56:	460b      	mov	r3, r1
 8005d58:	18db      	adds	r3, r3, r3
 8005d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	eb42 0303 	adc.w	r3, r2, r3
 8005d62:	657b      	str	r3, [r7, #84]	; 0x54
 8005d64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d6c:	f7fa fa3e 	bl	80001ec <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4b61      	ldr	r3, [pc, #388]	; (8005efc <UART_SetConfig+0x2d4>)
 8005d76:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	011c      	lsls	r4, r3, #4
 8005d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d90:	4642      	mov	r2, r8
 8005d92:	464b      	mov	r3, r9
 8005d94:	1891      	adds	r1, r2, r2
 8005d96:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d98:	415b      	adcs	r3, r3
 8005d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005da0:	4641      	mov	r1, r8
 8005da2:	eb12 0a01 	adds.w	sl, r2, r1
 8005da6:	4649      	mov	r1, r9
 8005da8:	eb43 0b01 	adc.w	fp, r3, r1
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005db8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dc0:	4692      	mov	sl, r2
 8005dc2:	469b      	mov	fp, r3
 8005dc4:	4643      	mov	r3, r8
 8005dc6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dce:	464b      	mov	r3, r9
 8005dd0:	eb4b 0303 	adc.w	r3, fp, r3
 8005dd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005de4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005de8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005dec:	460b      	mov	r3, r1
 8005dee:	18db      	adds	r3, r3, r3
 8005df0:	643b      	str	r3, [r7, #64]	; 0x40
 8005df2:	4613      	mov	r3, r2
 8005df4:	eb42 0303 	adc.w	r3, r2, r3
 8005df8:	647b      	str	r3, [r7, #68]	; 0x44
 8005dfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e02:	f7fa f9f3 	bl	80001ec <__aeabi_uldivmod>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	4b3b      	ldr	r3, [pc, #236]	; (8005efc <UART_SetConfig+0x2d4>)
 8005e0e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2264      	movs	r2, #100	; 0x64
 8005e16:	fb02 f303 	mul.w	r3, r2, r3
 8005e1a:	1acb      	subs	r3, r1, r3
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e22:	4b36      	ldr	r3, [pc, #216]	; (8005efc <UART_SetConfig+0x2d4>)
 8005e24:	fba3 2302 	umull	r2, r3, r3, r2
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e30:	441c      	add	r4, r3
 8005e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e36:	2200      	movs	r2, #0
 8005e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e44:	4642      	mov	r2, r8
 8005e46:	464b      	mov	r3, r9
 8005e48:	1891      	adds	r1, r2, r2
 8005e4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e4c:	415b      	adcs	r3, r3
 8005e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e54:	4641      	mov	r1, r8
 8005e56:	1851      	adds	r1, r2, r1
 8005e58:	6339      	str	r1, [r7, #48]	; 0x30
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	414b      	adcs	r3, r1
 8005e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e6c:	4659      	mov	r1, fp
 8005e6e:	00cb      	lsls	r3, r1, #3
 8005e70:	4651      	mov	r1, sl
 8005e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e76:	4651      	mov	r1, sl
 8005e78:	00ca      	lsls	r2, r1, #3
 8005e7a:	4610      	mov	r0, r2
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	4642      	mov	r2, r8
 8005e82:	189b      	adds	r3, r3, r2
 8005e84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e88:	464b      	mov	r3, r9
 8005e8a:	460a      	mov	r2, r1
 8005e8c:	eb42 0303 	adc.w	r3, r2, r3
 8005e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ea0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ea4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	18db      	adds	r3, r3, r3
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eae:	4613      	mov	r3, r2
 8005eb0:	eb42 0303 	adc.w	r3, r2, r3
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ebe:	f7fa f995 	bl	80001ec <__aeabi_uldivmod>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	; (8005efc <UART_SetConfig+0x2d4>)
 8005ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	2164      	movs	r1, #100	; 0x64
 8005ed0:	fb01 f303 	mul.w	r3, r1, r3
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	00db      	lsls	r3, r3, #3
 8005ed8:	3332      	adds	r3, #50	; 0x32
 8005eda:	4a08      	ldr	r2, [pc, #32]	; (8005efc <UART_SetConfig+0x2d4>)
 8005edc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	f003 0207 	and.w	r2, r3, #7
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4422      	add	r2, r4
 8005eee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ef0:	e106      	b.n	8006100 <UART_SetConfig+0x4d8>
 8005ef2:	bf00      	nop
 8005ef4:	40011000 	.word	0x40011000
 8005ef8:	40011400 	.word	0x40011400
 8005efc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f12:	4642      	mov	r2, r8
 8005f14:	464b      	mov	r3, r9
 8005f16:	1891      	adds	r1, r2, r2
 8005f18:	6239      	str	r1, [r7, #32]
 8005f1a:	415b      	adcs	r3, r3
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f22:	4641      	mov	r1, r8
 8005f24:	1854      	adds	r4, r2, r1
 8005f26:	4649      	mov	r1, r9
 8005f28:	eb43 0501 	adc.w	r5, r3, r1
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	00eb      	lsls	r3, r5, #3
 8005f36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f3a:	00e2      	lsls	r2, r4, #3
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	461d      	mov	r5, r3
 8005f40:	4643      	mov	r3, r8
 8005f42:	18e3      	adds	r3, r4, r3
 8005f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f48:	464b      	mov	r3, r9
 8005f4a:	eb45 0303 	adc.w	r3, r5, r3
 8005f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f62:	f04f 0200 	mov.w	r2, #0
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f6e:	4629      	mov	r1, r5
 8005f70:	008b      	lsls	r3, r1, #2
 8005f72:	4621      	mov	r1, r4
 8005f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f78:	4621      	mov	r1, r4
 8005f7a:	008a      	lsls	r2, r1, #2
 8005f7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f80:	f7fa f934 	bl	80001ec <__aeabi_uldivmod>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4b60      	ldr	r3, [pc, #384]	; (800610c <UART_SetConfig+0x4e4>)
 8005f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	011c      	lsls	r4, r3, #4
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fa0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	1891      	adds	r1, r2, r2
 8005faa:	61b9      	str	r1, [r7, #24]
 8005fac:	415b      	adcs	r3, r3
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	1851      	adds	r1, r2, r1
 8005fb8:	6139      	str	r1, [r7, #16]
 8005fba:	4649      	mov	r1, r9
 8005fbc:	414b      	adcs	r3, r1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fcc:	4659      	mov	r1, fp
 8005fce:	00cb      	lsls	r3, r1, #3
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	00ca      	lsls	r2, r1, #3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	189b      	adds	r3, r3, r2
 8005fe4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fe8:	464b      	mov	r3, r9
 8005fea:	460a      	mov	r2, r1
 8005fec:	eb42 0303 	adc.w	r3, r2, r3
 8005ff0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ffe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800600c:	4649      	mov	r1, r9
 800600e:	008b      	lsls	r3, r1, #2
 8006010:	4641      	mov	r1, r8
 8006012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006016:	4641      	mov	r1, r8
 8006018:	008a      	lsls	r2, r1, #2
 800601a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800601e:	f7fa f8e5 	bl	80001ec <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4611      	mov	r1, r2
 8006028:	4b38      	ldr	r3, [pc, #224]	; (800610c <UART_SetConfig+0x4e4>)
 800602a:	fba3 2301 	umull	r2, r3, r3, r1
 800602e:	095b      	lsrs	r3, r3, #5
 8006030:	2264      	movs	r2, #100	; 0x64
 8006032:	fb02 f303 	mul.w	r3, r2, r3
 8006036:	1acb      	subs	r3, r1, r3
 8006038:	011b      	lsls	r3, r3, #4
 800603a:	3332      	adds	r3, #50	; 0x32
 800603c:	4a33      	ldr	r2, [pc, #204]	; (800610c <UART_SetConfig+0x4e4>)
 800603e:	fba2 2303 	umull	r2, r3, r2, r3
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006048:	441c      	add	r4, r3
 800604a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800604e:	2200      	movs	r2, #0
 8006050:	673b      	str	r3, [r7, #112]	; 0x70
 8006052:	677a      	str	r2, [r7, #116]	; 0x74
 8006054:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	1891      	adds	r1, r2, r2
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	415b      	adcs	r3, r3
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006068:	4641      	mov	r1, r8
 800606a:	1851      	adds	r1, r2, r1
 800606c:	6039      	str	r1, [r7, #0]
 800606e:	4649      	mov	r1, r9
 8006070:	414b      	adcs	r3, r1
 8006072:	607b      	str	r3, [r7, #4]
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006080:	4659      	mov	r1, fp
 8006082:	00cb      	lsls	r3, r1, #3
 8006084:	4651      	mov	r1, sl
 8006086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800608a:	4651      	mov	r1, sl
 800608c:	00ca      	lsls	r2, r1, #3
 800608e:	4610      	mov	r0, r2
 8006090:	4619      	mov	r1, r3
 8006092:	4603      	mov	r3, r0
 8006094:	4642      	mov	r2, r8
 8006096:	189b      	adds	r3, r3, r2
 8006098:	66bb      	str	r3, [r7, #104]	; 0x68
 800609a:	464b      	mov	r3, r9
 800609c:	460a      	mov	r2, r1
 800609e:	eb42 0303 	adc.w	r3, r2, r3
 80060a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	663b      	str	r3, [r7, #96]	; 0x60
 80060ae:	667a      	str	r2, [r7, #100]	; 0x64
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060bc:	4649      	mov	r1, r9
 80060be:	008b      	lsls	r3, r1, #2
 80060c0:	4641      	mov	r1, r8
 80060c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060c6:	4641      	mov	r1, r8
 80060c8:	008a      	lsls	r2, r1, #2
 80060ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060ce:	f7fa f88d 	bl	80001ec <__aeabi_uldivmod>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4b0d      	ldr	r3, [pc, #52]	; (800610c <UART_SetConfig+0x4e4>)
 80060d8:	fba3 1302 	umull	r1, r3, r3, r2
 80060dc:	095b      	lsrs	r3, r3, #5
 80060de:	2164      	movs	r1, #100	; 0x64
 80060e0:	fb01 f303 	mul.w	r3, r1, r3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	3332      	adds	r3, #50	; 0x32
 80060ea:	4a08      	ldr	r2, [pc, #32]	; (800610c <UART_SetConfig+0x4e4>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	f003 020f 	and.w	r2, r3, #15
 80060f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4422      	add	r2, r4
 80060fe:	609a      	str	r2, [r3, #8]
}
 8006100:	bf00      	nop
 8006102:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006106:	46bd      	mov	sp, r7
 8006108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800610c:	51eb851f 	.word	0x51eb851f

08006110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006110:	b084      	sub	sp, #16
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	f107 001c 	add.w	r0, r7, #28
 800611e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006122:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006126:	2b01      	cmp	r3, #1
 8006128:	d123      	bne.n	8006172 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800613e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006152:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006156:	2b01      	cmp	r3, #1
 8006158:	d105      	bne.n	8006166 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 faa0 	bl	80066ac <USB_CoreReset>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
 8006170:	e01b      	b.n	80061aa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa94 	bl	80066ac <USB_CoreReset>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006188:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
 800619c:	e005      	b.n	80061aa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061aa:	7fbb      	ldrb	r3, [r7, #30]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d10b      	bne.n	80061c8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f043 0206 	orr.w	r2, r3, #6
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f043 0220 	orr.w	r2, r3, #32
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061d4:	b004      	add	sp, #16
 80061d6:	4770      	bx	lr

080061d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f023 0201 	bic.w	r2, r3, #1
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	460b      	mov	r3, r1
 8006204:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d115      	bne.n	8006248 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006228:	200a      	movs	r0, #10
 800622a:	f7fb fb91 	bl	8001950 <HAL_Delay>
      ms += 10U;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	330a      	adds	r3, #10
 8006232:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fa2b 	bl	8006690 <USB_GetMode>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d01e      	beq.n	800627e <USB_SetCurrentMode+0x84>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2bc7      	cmp	r3, #199	; 0xc7
 8006244:	d9f0      	bls.n	8006228 <USB_SetCurrentMode+0x2e>
 8006246:	e01a      	b.n	800627e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d115      	bne.n	800627a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800625a:	200a      	movs	r0, #10
 800625c:	f7fb fb78 	bl	8001950 <HAL_Delay>
      ms += 10U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	330a      	adds	r3, #10
 8006264:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fa12 	bl	8006690 <USB_GetMode>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <USB_SetCurrentMode+0x84>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2bc7      	cmp	r3, #199	; 0xc7
 8006276:	d9f0      	bls.n	800625a <USB_SetCurrentMode+0x60>
 8006278:	e001      	b.n	800627e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e005      	b.n	800628a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2bc8      	cmp	r3, #200	; 0xc8
 8006282:	d101      	bne.n	8006288 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e000      	b.n	800628a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006294:	b084      	sub	sp, #16
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	613b      	str	r3, [r7, #16]
 80062b2:	e009      	b.n	80062c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	3340      	adds	r3, #64	; 0x40
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	3301      	adds	r3, #1
 80062c6:	613b      	str	r3, [r7, #16]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b0e      	cmp	r3, #14
 80062cc:	d9f2      	bls.n	80062b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d11c      	bne.n	8006310 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e4:	f043 0302 	orr.w	r3, r3, #2
 80062e8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
 800630e:	e00b      	b.n	8006328 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800632e:	461a      	mov	r2, r3
 8006330:	2300      	movs	r3, #0
 8006332:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006334:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006338:	2b01      	cmp	r3, #1
 800633a:	d10d      	bne.n	8006358 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800633c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006344:	2100      	movs	r1, #0
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f968 	bl	800661c <USB_SetDevSpeed>
 800634c:	e008      	b.n	8006360 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800634e:	2101      	movs	r1, #1
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f963 	bl	800661c <USB_SetDevSpeed>
 8006356:	e003      	b.n	8006360 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006358:	2103      	movs	r1, #3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f95e 	bl	800661c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006360:	2110      	movs	r1, #16
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f8fa 	bl	800655c <USB_FlushTxFifo>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f924 	bl	80065c0 <USB_FlushRxFifo>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	461a      	mov	r2, r3
 800638a:	2300      	movs	r3, #0
 800638c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a0:	461a      	mov	r2, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	e043      	b.n	8006434 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063c2:	d118      	bne.n	80063f6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	461a      	mov	r2, r3
 80063d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	e013      	b.n	8006408 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	461a      	mov	r2, r3
 80063ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	e008      	b.n	8006408 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006402:	461a      	mov	r2, r3
 8006404:	2300      	movs	r3, #0
 8006406:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006414:	461a      	mov	r2, r3
 8006416:	2300      	movs	r3, #0
 8006418:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006426:	461a      	mov	r2, r3
 8006428:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800642c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3301      	adds	r3, #1
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006438:	461a      	mov	r2, r3
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4293      	cmp	r3, r2
 800643e:	d3b5      	bcc.n	80063ac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006440:	2300      	movs	r3, #0
 8006442:	613b      	str	r3, [r7, #16]
 8006444:	e043      	b.n	80064ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4413      	add	r3, r2
 800644e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800645c:	d118      	bne.n	8006490 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10a      	bne.n	800647a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	461a      	mov	r2, r3
 8006472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e013      	b.n	80064a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	461a      	mov	r2, r3
 8006488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	e008      	b.n	80064a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	461a      	mov	r2, r3
 800649e:	2300      	movs	r3, #0
 80064a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	461a      	mov	r2, r3
 80064b0:	2300      	movs	r3, #0
 80064b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	015a      	lsls	r2, r3, #5
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4413      	add	r3, r2
 80064bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c0:	461a      	mov	r2, r3
 80064c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	3301      	adds	r3, #1
 80064cc:	613b      	str	r3, [r7, #16]
 80064ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064d2:	461a      	mov	r2, r3
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d3b5      	bcc.n	8006446 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f043 0210 	orr.w	r2, r3, #16
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <USB_DevInit+0x2c4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800651c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f043 0208 	orr.w	r2, r3, #8
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006530:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006534:	2b01      	cmp	r3, #1
 8006536:	d107      	bne.n	8006548 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006540:	f043 0304 	orr.w	r3, r3, #4
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006548:	7dfb      	ldrb	r3, [r7, #23]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006554:	b004      	add	sp, #16
 8006556:	4770      	bx	lr
 8006558:	803c3800 	.word	0x803c3800

0800655c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006576:	d901      	bls.n	800657c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e01b      	b.n	80065b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	daf2      	bge.n	800656a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	019b      	lsls	r3, r3, #6
 800658c:	f043 0220 	orr.w	r2, r3, #32
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065a0:	d901      	bls.n	80065a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e006      	b.n	80065b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d0f0      	beq.n	8006594 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065d8:	d901      	bls.n	80065de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e018      	b.n	8006610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	daf2      	bge.n	80065cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2210      	movs	r2, #16
 80065ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065fc:	d901      	bls.n	8006602 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e006      	b.n	8006610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b10      	cmp	r3, #16
 800660c:	d0f0      	beq.n	80065f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	68f9      	ldr	r1, [r7, #12]
 8006638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800663c:	4313      	orrs	r3, r2
 800663e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006668:	f023 0303 	bic.w	r3, r3, #3
 800666c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	f003 0301 	and.w	r3, r3, #1
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80066c4:	d901      	bls.n	80066ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e01b      	b.n	8006702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	daf2      	bge.n	80066b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f043 0201 	orr.w	r2, r3, #1
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3301      	adds	r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80066ee:	d901      	bls.n	80066f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e006      	b.n	8006702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d0f0      	beq.n	80066e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <memset>:
 800670e:	4402      	add	r2, r0
 8006710:	4603      	mov	r3, r0
 8006712:	4293      	cmp	r3, r2
 8006714:	d100      	bne.n	8006718 <memset+0xa>
 8006716:	4770      	bx	lr
 8006718:	f803 1b01 	strb.w	r1, [r3], #1
 800671c:	e7f9      	b.n	8006712 <memset+0x4>
	...

08006720 <__libc_init_array>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	4d0d      	ldr	r5, [pc, #52]	; (8006758 <__libc_init_array+0x38>)
 8006724:	4c0d      	ldr	r4, [pc, #52]	; (800675c <__libc_init_array+0x3c>)
 8006726:	1b64      	subs	r4, r4, r5
 8006728:	10a4      	asrs	r4, r4, #2
 800672a:	2600      	movs	r6, #0
 800672c:	42a6      	cmp	r6, r4
 800672e:	d109      	bne.n	8006744 <__libc_init_array+0x24>
 8006730:	4d0b      	ldr	r5, [pc, #44]	; (8006760 <__libc_init_array+0x40>)
 8006732:	4c0c      	ldr	r4, [pc, #48]	; (8006764 <__libc_init_array+0x44>)
 8006734:	f000 f826 	bl	8006784 <_init>
 8006738:	1b64      	subs	r4, r4, r5
 800673a:	10a4      	asrs	r4, r4, #2
 800673c:	2600      	movs	r6, #0
 800673e:	42a6      	cmp	r6, r4
 8006740:	d105      	bne.n	800674e <__libc_init_array+0x2e>
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	f855 3b04 	ldr.w	r3, [r5], #4
 8006748:	4798      	blx	r3
 800674a:	3601      	adds	r6, #1
 800674c:	e7ee      	b.n	800672c <__libc_init_array+0xc>
 800674e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006752:	4798      	blx	r3
 8006754:	3601      	adds	r6, #1
 8006756:	e7f2      	b.n	800673e <__libc_init_array+0x1e>
 8006758:	08006830 	.word	0x08006830
 800675c:	08006830 	.word	0x08006830
 8006760:	08006830 	.word	0x08006830
 8006764:	08006834 	.word	0x08006834

08006768 <memcpy>:
 8006768:	440a      	add	r2, r1
 800676a:	4291      	cmp	r1, r2
 800676c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006770:	d100      	bne.n	8006774 <memcpy+0xc>
 8006772:	4770      	bx	lr
 8006774:	b510      	push	{r4, lr}
 8006776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800677a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800677e:	4291      	cmp	r1, r2
 8006780:	d1f9      	bne.n	8006776 <memcpy+0xe>
 8006782:	bd10      	pop	{r4, pc}

08006784 <_init>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr

08006790 <_fini>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	bf00      	nop
 8006794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006796:	bc08      	pop	{r3}
 8006798:	469e      	mov	lr, r3
 800679a:	4770      	bx	lr
