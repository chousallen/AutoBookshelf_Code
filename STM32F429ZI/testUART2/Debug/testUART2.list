
testUART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800664c  0800664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006694  08006694  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800669c  0800669c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080066a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000984  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000998  20000998  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014a3f  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002695  00000000  00000000  00034ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011f0  00000000  00000000  00037160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e14  00000000  00000000  00038350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024d45  00000000  00000000  00039164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001364e  00000000  00000000  0005dea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2cad  00000000  00000000  000714f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004dd4  00000000  00000000  001541a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00158f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006634 	.word	0x08006634

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	08006634 	.word	0x08006634

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <BT_Config>:
uint8_t dma;



void BT_Config(void(*_User_TxCplt_CB)(void), void(*_User_RxCplt_CB)(const uint8_t*))
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	User_TxCplt_CB = _User_TxCplt_CB;
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <BT_Config+0x44>)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6013      	str	r3, [r2, #0]
	User_RxCplt_CB = _User_RxCplt_CB;
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <BT_Config+0x48>)
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	6013      	str	r3, [r2, #0]
	HAL_UART_RegisterCallback(&BT_UART, HAL_UART_TX_COMPLETE_CB_ID, BT_TxCplt_CB);
 800050e:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <BT_Config+0x4c>)
 8000510:	2101      	movs	r1, #1
 8000512:	480d      	ldr	r0, [pc, #52]	; (8000548 <BT_Config+0x50>)
 8000514:	f004 fa62 	bl	80049dc <HAL_UART_RegisterCallback>
	HAL_UART_RegisterCallback(&BT_UART, HAL_UART_RX_COMPLETE_CB_ID, BT_RxCplt_CB);
 8000518:	4a0c      	ldr	r2, [pc, #48]	; (800054c <BT_Config+0x54>)
 800051a:	2103      	movs	r1, #3
 800051c:	480a      	ldr	r0, [pc, #40]	; (8000548 <BT_Config+0x50>)
 800051e:	f004 fa5d 	bl	80049dc <HAL_UART_RegisterCallback>
	tx_cplt = 1;
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <BT_Config+0x58>)
 8000524:	2201      	movs	r2, #1
 8000526:	701a      	strb	r2, [r3, #0]
	rx_cplt = 1;
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <BT_Config+0x5c>)
 800052a:	2201      	movs	r2, #1
 800052c:	701a      	strb	r2, [r3, #0]
	dma = 0;
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <BT_Config+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000934 	.word	0x20000934
 8000540:	20000938 	.word	0x20000938
 8000544:	0800061d 	.word	0x0800061d
 8000548:	200002a0 	.word	0x200002a0
 800054c:	08000639 	.word	0x08000639
 8000550:	2000093c 	.word	0x2000093c
 8000554:	2000093d 	.word	0x2000093d
 8000558:	20000960 	.word	0x20000960

0800055c <BT_Transmit_Str>:
	HAL_UART_Transmit_DMA(&BT_UART, tx_msg, MSG_LEN);
	return 1;
}

uint8_t BT_Transmit_Str(const char* str)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if(tx_cplt == 0)
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <BT_Transmit_Str+0x74>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d101      	bne.n	8000570 <BT_Transmit_Str+0x14>
		return 0;
 800056c:	2300      	movs	r3, #0
 800056e:	e02a      	b.n	80005c6 <BT_Transmit_Str+0x6a>
	tx_cplt = 0;
 8000570:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <BT_Transmit_Str+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	memset(tx_msg, ' ', sizeof(uint8_t)*MSG_LEN);
 8000576:	2210      	movs	r2, #16
 8000578:	2120      	movs	r1, #32
 800057a:	4816      	ldr	r0, [pc, #88]	; (80005d4 <BT_Transmit_Str+0x78>)
 800057c:	f006 f81f 	bl	80065be <memset>
	if(strlen(str) < MSG_LEN-2)
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f7ff fe33 	bl	80001ec <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	2b0d      	cmp	r3, #13
 800058a:	d80a      	bhi.n	80005a2 <BT_Transmit_Str+0x46>
		memcpy(tx_msg+1, str, sizeof(uint8_t)*(strlen(str)));
 800058c:	4c12      	ldr	r4, [pc, #72]	; (80005d8 <BT_Transmit_Str+0x7c>)
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f7ff fe2c 	bl	80001ec <strlen>
 8000594:	4603      	mov	r3, r0
 8000596:	461a      	mov	r2, r3
 8000598:	6879      	ldr	r1, [r7, #4]
 800059a:	4620      	mov	r0, r4
 800059c:	f006 f83c 	bl	8006618 <memcpy>
 80005a0:	e005      	b.n	80005ae <BT_Transmit_Str+0x52>
	else
		memcpy(tx_msg+1, str, sizeof(uint8_t)*(MSG_LEN-2));
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <BT_Transmit_Str+0x7c>)
 80005a4:	220e      	movs	r2, #14
 80005a6:	6879      	ldr	r1, [r7, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f006 f835 	bl	8006618 <memcpy>
	tx_msg[0] = MSG_FRONT;
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <BT_Transmit_Str+0x78>)
 80005b0:	2223      	movs	r2, #35	; 0x23
 80005b2:	701a      	strb	r2, [r3, #0]
	tx_msg[MSG_LEN-1] = MSG_END;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <BT_Transmit_Str+0x78>)
 80005b6:	220a      	movs	r2, #10
 80005b8:	73da      	strb	r2, [r3, #15]
	HAL_UART_Transmit_DMA(&BT_UART, tx_msg, MSG_LEN);
 80005ba:	2210      	movs	r2, #16
 80005bc:	4905      	ldr	r1, [pc, #20]	; (80005d4 <BT_Transmit_Str+0x78>)
 80005be:	4807      	ldr	r0, [pc, #28]	; (80005dc <BT_Transmit_Str+0x80>)
 80005c0:	f004 faca 	bl	8004b58 <HAL_UART_Transmit_DMA>
	return 1;
 80005c4:	2301      	movs	r3, #1
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000093c 	.word	0x2000093c
 80005d4:	20000940 	.word	0x20000940
 80005d8:	20000941 	.word	0x20000941
 80005dc:	200002a0 	.word	0x200002a0

080005e0 <BT_StartGetCMD>:

uint8_t BT_StartGetCMD()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if(rx_cplt == 0)
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <BT_StartGetCMD+0x30>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <BT_StartGetCMD+0x10>
		return 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e00d      	b.n	800060c <BT_StartGetCMD+0x2c>
	rx_cplt = 0;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <BT_StartGetCMD+0x30>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
	memset(rx_msg, 0, sizeof(uint8_t)*MSG_LEN);
 80005f6:	2210      	movs	r2, #16
 80005f8:	2100      	movs	r1, #0
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <BT_StartGetCMD+0x34>)
 80005fc:	f005 ffdf 	bl	80065be <memset>
	HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
 8000600:	2201      	movs	r2, #1
 8000602:	4904      	ldr	r1, [pc, #16]	; (8000614 <BT_StartGetCMD+0x34>)
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <BT_StartGetCMD+0x38>)
 8000606:	f004 fa81 	bl	8004b0c <HAL_UART_Receive_IT>
	return 1;
 800060a:	2301      	movs	r3, #1
}
 800060c:	4618      	mov	r0, r3
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000093d 	.word	0x2000093d
 8000614:	20000950 	.word	0x20000950
 8000618:	200002a0 	.word	0x200002a0

0800061c <BT_TxCplt_CB>:

void BT_TxCplt_CB()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	tx_cplt = 1;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <BT_TxCplt_CB+0x14>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
	User_TxCplt_CB();
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <BT_TxCplt_CB+0x18>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4798      	blx	r3

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000093c 	.word	0x2000093c
 8000634:	20000934 	.word	0x20000934

08000638 <BT_RxCplt_CB>:

void BT_RxCplt_CB()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	if(dma == 0)
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <BT_RxCplt_CB+0x58>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d113      	bne.n	800066c <BT_RxCplt_CB+0x34>
	{
		if(rx_msg[0] == MSG_FRONT)
 8000644:	4b13      	ldr	r3, [pc, #76]	; (8000694 <BT_RxCplt_CB+0x5c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b23      	cmp	r3, #35	; 0x23
 800064a:	d109      	bne.n	8000660 <BT_RxCplt_CB+0x28>
		{
			HAL_UART_Receive_DMA(&BT_UART, rx_msg+1, MSG_LEN-1);
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <BT_RxCplt_CB+0x60>)
 800064e:	220f      	movs	r2, #15
 8000650:	4619      	mov	r1, r3
 8000652:	4812      	ldr	r0, [pc, #72]	; (800069c <BT_RxCplt_CB+0x64>)
 8000654:	f004 faf0 	bl	8004c38 <HAL_UART_Receive_DMA>
			dma = 1;
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <BT_RxCplt_CB+0x58>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
		dma = 0;
		rx_cplt = 1;
		User_RxCplt_CB(rx_msg);
		HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
	}
}
 800065e:	e014      	b.n	800068a <BT_RxCplt_CB+0x52>
			HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	490c      	ldr	r1, [pc, #48]	; (8000694 <BT_RxCplt_CB+0x5c>)
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <BT_RxCplt_CB+0x64>)
 8000666:	f004 fa51 	bl	8004b0c <HAL_UART_Receive_IT>
}
 800066a:	e00e      	b.n	800068a <BT_RxCplt_CB+0x52>
		dma = 0;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <BT_RxCplt_CB+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
		rx_cplt = 1;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <BT_RxCplt_CB+0x68>)
 8000674:	2201      	movs	r2, #1
 8000676:	701a      	strb	r2, [r3, #0]
		User_RxCplt_CB(rx_msg);
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <BT_RxCplt_CB+0x6c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <BT_RxCplt_CB+0x5c>)
 800067e:	4798      	blx	r3
		HAL_UART_Receive_IT(&BT_UART, rx_msg, 1);
 8000680:	2201      	movs	r2, #1
 8000682:	4904      	ldr	r1, [pc, #16]	; (8000694 <BT_RxCplt_CB+0x5c>)
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <BT_RxCplt_CB+0x64>)
 8000686:	f004 fa41 	bl	8004b0c <HAL_UART_Receive_IT>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000960 	.word	0x20000960
 8000694:	20000950 	.word	0x20000950
 8000698:	20000951 	.word	0x20000951
 800069c:	200002a0 	.word	0x200002a0
 80006a0:	2000093d 	.word	0x2000093d
 80006a4:	20000938 	.word	0x20000938

080006a8 <Stepper_Config>:
uint16_t Dir_Pin;

void Stepper_Rotate_Cplt_CB();

void Stepper_Config(TIM_HandleTypeDef *_htim, uint32_t _channel, uint16_t _interval, GPIO_TypeDef* _Dir_Port, uint16_t _Dir_Pin)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4613      	mov	r3, r2
 80006b6:	80fb      	strh	r3, [r7, #6]
	htim = _htim;
 80006b8:	4a11      	ldr	r2, [pc, #68]	; (8000700 <Stepper_Config+0x58>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6013      	str	r3, [r2, #0]
	channel = _channel;
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <Stepper_Config+0x5c>)
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	6013      	str	r3, [r2, #0]
	interval = _interval;
 80006c4:	4a10      	ldr	r2, [pc, #64]	; (8000708 <Stepper_Config+0x60>)
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	8013      	strh	r3, [r2, #0]
	__HAL_TIM_SET_AUTORELOAD(htim, interval);
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <Stepper_Config+0x60>)
 80006cc:	881a      	ldrh	r2, [r3, #0]
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <Stepper_Config+0x58>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <Stepper_Config+0x60>)
 80006d8:	881a      	ldrh	r2, [r3, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <Stepper_Config+0x58>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60da      	str	r2, [r3, #12]
	Dir_Port = _Dir_Port;
 80006e0:	4a0a      	ldr	r2, [pc, #40]	; (800070c <Stepper_Config+0x64>)
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	6013      	str	r3, [r2, #0]
	Dir_Pin = _Dir_Pin;
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <Stepper_Config+0x68>)
 80006e8:	8b3b      	ldrh	r3, [r7, #24]
 80006ea:	8013      	strh	r3, [r2, #0]
	steps_remain = 0;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <Stepper_Config+0x6c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000964 	.word	0x20000964
 8000704:	20000968 	.word	0x20000968
 8000708:	20000000 	.word	0x20000000
 800070c:	20000970 	.word	0x20000970
 8000710:	20000974 	.word	0x20000974
 8000714:	2000096c 	.word	0x2000096c

08000718 <Stepper_Rotate>:
	__HAL_TIM_SET_AUTORELOAD(htim, interval);
	return 1;
}

uint8_t Stepper_Rotate(int32_t steps)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	if(steps_remain != 0 || steps == 0)
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <Stepper_Rotate+0x78>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d102      	bne.n	800072e <Stepper_Rotate+0x16>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d101      	bne.n	8000732 <Stepper_Rotate+0x1a>
	{
		return 0;
 800072e:	2300      	movs	r3, #0
 8000730:	e02a      	b.n	8000788 <Stepper_Rotate+0x70>
	}
	if(steps < 0)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b00      	cmp	r3, #0
 8000736:	da0c      	bge.n	8000752 <Stepper_Rotate+0x3a>
	{
		steps_remain = (-steps) - 1;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	43db      	mvns	r3, r3
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <Stepper_Rotate+0x78>)
 800073e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(Dir_Port, Dir_Pin, RESET);
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <Stepper_Rotate+0x7c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a14      	ldr	r2, [pc, #80]	; (8000798 <Stepper_Rotate+0x80>)
 8000746:	8811      	ldrh	r1, [r2, #0]
 8000748:	2200      	movs	r2, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 f9e4 	bl	8002b18 <HAL_GPIO_WritePin>
 8000750:	e00c      	b.n	800076c <Stepper_Rotate+0x54>
	}
	else
	{
		steps_remain = steps - 1;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	3b01      	subs	r3, #1
 8000756:	461a      	mov	r2, r3
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <Stepper_Rotate+0x78>)
 800075a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(Dir_Port, Dir_Pin, SET);
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <Stepper_Rotate+0x7c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0d      	ldr	r2, [pc, #52]	; (8000798 <Stepper_Rotate+0x80>)
 8000762:	8811      	ldrh	r1, [r2, #0]
 8000764:	2201      	movs	r2, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f002 f9d6 	bl	8002b18 <HAL_GPIO_WritePin>
	}
	HAL_TIM_Base_Start_IT(htim);
 800076c:	4b0b      	ldr	r3, [pc, #44]	; (800079c <Stepper_Rotate+0x84>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f003 f805 	bl	8003780 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, channel);
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <Stepper_Rotate+0x84>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <Stepper_Rotate+0x88>)
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f003 f8f5 	bl	8003970 <HAL_TIM_PWM_Start>
	return 1;
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000096c 	.word	0x2000096c
 8000794:	20000970 	.word	0x20000970
 8000798:	20000974 	.word	0x20000974
 800079c:	20000964 	.word	0x20000964
 80007a0:	20000968 	.word	0x20000968

080007a4 <Stepper_Stop>:

void Stepper_Stop()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(htim);
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <Stepper_Stop+0x28>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 f857 	bl	8003860 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_PWM_Stop(htim, channel);
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <Stepper_Stop+0x28>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <Stepper_Stop+0x2c>)
 80007b8:	6812      	ldr	r2, [r2, #0]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f003 f99f 	bl	8003b00 <HAL_TIM_PWM_Stop>
	Stepper_Rotate_Cplt_CB();
 80007c2:	f000 fbc5 	bl	8000f50 <Stepper_Rotate_Cplt_CB>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000964 	.word	0x20000964
 80007d0:	20000968 	.word	0x20000968

080007d4 <Stepper_Step_Cplt>:

void Stepper_Step_Cplt()
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	if(steps_remain == 0)
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <Stepper_Step_Cplt+0x20>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <Stepper_Step_Cplt+0x12>
	{
		Stepper_Stop();
 80007e0:	f7ff ffe0 	bl	80007a4 <Stepper_Stop>
	}
	else
	{
		steps_remain--;
	}
}
 80007e4:	e004      	b.n	80007f0 <Stepper_Step_Cplt+0x1c>
		steps_remain--;
 80007e6:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <Stepper_Step_Cplt+0x20>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	4a01      	ldr	r2, [pc, #4]	; (80007f4 <Stepper_Step_Cplt+0x20>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	2000096c 	.word	0x2000096c

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 ff0d 	bl	800161c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f839 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 fa39 	bl	8000c7c <MX_GPIO_Init>
  MX_DMA_Init();
 800080a:	f000 fa0f 	bl	8000c2c <MX_DMA_Init>
  MX_ETH_Init();
 800080e:	f000 f89d 	bl	800094c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000812:	f000 f9b3 	bl	8000b7c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000816:	f000 f9db 	bl	8000bd0 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 800081a:	f000 f985 	bl	8000b28 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800081e:	f000 f8e3 	bl	80009e8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  Stepper_Config(STEPPER_TIMER, TIM_CHANNEL_1, STEPPER_INTERVAL, Stepper_Dir_GPIO_Port, Stepper_Dir_Pin);
 8000822:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <main+0x68>)
 800082a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800082e:	2100      	movs	r1, #0
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <main+0x6c>)
 8000832:	f7ff ff39 	bl	80006a8 <Stepper_Config>
  BT_Config(txCplt, getCMD);
 8000836:	490c      	ldr	r1, [pc, #48]	; (8000868 <main+0x70>)
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <main+0x74>)
 800083a:	f7ff fe5d 	bl	80004f8 <BT_Config>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000844:	480a      	ldr	r0, [pc, #40]	; (8000870 <main+0x78>)
 8000846:	f002 f967 	bl	8002b18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD2_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	4808      	ldr	r0, [pc, #32]	; (8000870 <main+0x78>)
 8000850:	f002 f962 	bl	8002b18 <HAL_GPIO_WritePin>

  BT_Transmit_Str("AutoBookshelf");
 8000854:	4807      	ldr	r0, [pc, #28]	; (8000874 <main+0x7c>)
 8000856:	f7ff fe81 	bl	800055c <BT_Transmit_Str>
  BT_StartGetCMD();
 800085a:	f7ff fec1 	bl	80005e0 <BT_StartGetCMD>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085e:	e7fe      	b.n	800085e <main+0x66>
 8000860:	40021400 	.word	0x40021400
 8000864:	20000258 	.word	0x20000258
 8000868:	08000e5d 	.word	0x08000e5d
 800086c:	08000e4d 	.word	0x08000e4d
 8000870:	40020400 	.word	0x40020400
 8000874:	0800664c 	.word	0x0800664c

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 fe99 	bl	80065be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <SystemClock_Config+0xcc>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a27      	ldr	r2, [pc, #156]	; (8000944 <SystemClock_Config+0xcc>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <SystemClock_Config+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a21      	ldr	r2, [pc, #132]	; (8000948 <SystemClock_Config+0xd0>)
 80008c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008e8:	2304      	movs	r3, #4
 80008ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008ec:	23a8      	movs	r3, #168	; 0xa8
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008f0:	2302      	movs	r3, #2
 80008f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008f4:	2307      	movs	r3, #7
 80008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fa57 	bl	8002db0 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000908:	f000 fb38 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800091c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2105      	movs	r1, #5
 800092a:	4618      	mov	r0, r3
 800092c:	f002 fcb8 	bl	80032a0 <HAL_RCC_ClockConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000936:	f000 fb21 	bl	8000f7c <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	3750      	adds	r7, #80	; 0x50
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40007000 	.word	0x40007000

0800094c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_ETH_Init+0x84>)
 8000952:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <MX_ETH_Init+0x88>)
 8000954:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <MX_ETH_Init+0x8c>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_ETH_Init+0x8c>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000962:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ETH_Init+0x8c>)
 8000964:	22e1      	movs	r2, #225	; 0xe1
 8000966:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_ETH_Init+0x8c>)
 800096a:	2200      	movs	r2, #0
 800096c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_ETH_Init+0x8c>)
 8000970:	2200      	movs	r2, #0
 8000972:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000974:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_ETH_Init+0x8c>)
 8000976:	2200      	movs	r2, #0
 8000978:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_ETH_Init+0x84>)
 800097c:	4a16      	ldr	r2, [pc, #88]	; (80009d8 <MX_ETH_Init+0x8c>)
 800097e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_ETH_Init+0x84>)
 8000982:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000986:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_ETH_Init+0x84>)
 800098a:	4a14      	ldr	r2, [pc, #80]	; (80009dc <MX_ETH_Init+0x90>)
 800098c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_ETH_Init+0x84>)
 8000990:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_ETH_Init+0x94>)
 8000992:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_ETH_Init+0x84>)
 8000996:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800099a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_ETH_Init+0x84>)
 800099e:	f001 fbe7 	bl	8002170 <HAL_ETH_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009a8:	f000 fae8 	bl	8000f7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ac:	2238      	movs	r2, #56	; 0x38
 80009ae:	2100      	movs	r1, #0
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_ETH_Init+0x98>)
 80009b2:	f005 fe04 	bl	80065be <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_ETH_Init+0x98>)
 80009b8:	2221      	movs	r2, #33	; 0x21
 80009ba:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_ETH_Init+0x98>)
 80009be:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80009c2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_ETH_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200001a8 	.word	0x200001a8
 80009d4:	40028000 	.word	0x40028000
 80009d8:	2000098c 	.word	0x2000098c
 80009dc:	20000108 	.word	0x20000108
 80009e0:	20000068 	.word	0x20000068
 80009e4:	20000030 	.word	0x20000030

080009e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b096      	sub	sp, #88	; 0x58
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]
 8000a16:	615a      	str	r2, [r3, #20]
 8000a18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f005 fdcc 	bl	80065be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a28:	4a3e      	ldr	r2, [pc, #248]	; (8000b24 <MX_TIM1_Init+0x13c>)
 8000a2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000a2c:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a2e:	22a7      	movs	r2, #167	; 0xa7
 8000a30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000a38:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a52:	4833      	ldr	r0, [pc, #204]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a54:	f002 fe44 	bl	80036e0 <HAL_TIM_Base_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a5e:	f000 fa8d 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482c      	ldr	r0, [pc, #176]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a70:	f003 fa68 	bl	8003f44 <HAL_TIM_ConfigClockSource>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a7a:	f000 fa7f 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a7e:	4828      	ldr	r0, [pc, #160]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a80:	f002 ff1d 	bl	80038be <HAL_TIM_PWM_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000a8a:	f000 fa77 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4820      	ldr	r0, [pc, #128]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000a9e:	f003 fe5d 	bl	800475c <HAL_TIMEx_MasterConfigSynchronization>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000aa8:	f000 fa68 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000aac:	2370      	movs	r3, #112	; 0x70
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 9;
 8000ab0:	2309      	movs	r3, #9
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000ad2:	f003 f975 	bl	8003dc0 <HAL_TIM_PWM_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000adc:	f000 fa4e 	bl	8000f7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4807      	ldr	r0, [pc, #28]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000b04:	f003 fea6 	bl	8004854 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000b0e:	f000 fa35 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <MX_TIM1_Init+0x138>)
 8000b14:	f000 fb4e 	bl	80011b4 <HAL_TIM_MspPostInit>

}
 8000b18:	bf00      	nop
 8000b1a:	3758      	adds	r7, #88	; 0x58
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000258 	.word	0x20000258
 8000b24:	40010000 	.word	0x40010000

08000b28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_USART2_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f003 fede 	bl	8004920 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f000 fa07 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200002a0 	.word	0x200002a0
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <MX_USART3_UART_Init+0x50>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_USART3_UART_Init+0x4c>)
 8000bb4:	f003 feb4 	bl	8004920 <HAL_UART_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000bbe:	f000 f9dd 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000318 	.word	0x20000318
 8000bcc:	40004800 	.word	0x40004800

08000bd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bda:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c14:	f001 ffbd 	bl	8002b92 <HAL_PCD_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c1e:	f000 f9ad 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000450 	.word	0x20000450

08000c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_DMA_Init+0x4c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <MX_DMA_Init+0x4c>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <MX_DMA_Init+0x4c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2010      	movs	r0, #16
 8000c54:	f000 fe53 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f000 fe6c 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2011      	movs	r0, #17
 8000c64:	f000 fe4b 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f000 fe64 	bl	8001936 <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
 8000c96:	4b68      	ldr	r3, [pc, #416]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a67      	ldr	r2, [pc, #412]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	623b      	str	r3, [r7, #32]
 8000cac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	4b61      	ldr	r3, [pc, #388]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a60      	ldr	r2, [pc, #384]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b5e      	ldr	r3, [pc, #376]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	61fb      	str	r3, [r7, #28]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
 8000cce:	4b5a      	ldr	r3, [pc, #360]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a59      	ldr	r2, [pc, #356]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b57      	ldr	r3, [pc, #348]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b50      	ldr	r3, [pc, #320]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b4c      	ldr	r3, [pc, #304]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a4b      	ldr	r2, [pc, #300]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a44      	ldr	r2, [pc, #272]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a36      	ldr	r2, [pc, #216]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <MX_GPIO_Init+0x1bc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000d78:	4830      	ldr	r0, [pc, #192]	; (8000e3c <MX_GPIO_Init+0x1c0>)
 8000d7a:	f001 fecd 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Stepper_Dir_GPIO_Port, Stepper_Dir_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d84:	482e      	ldr	r0, [pc, #184]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000d86:	f001 fec7 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2140      	movs	r1, #64	; 0x40
 8000d8e:	482d      	ldr	r0, [pc, #180]	; (8000e44 <MX_GPIO_Init+0x1c8>)
 8000d90:	f001 fec2 	bl	8002b18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <MX_GPIO_Init+0x1cc>)
 8000dac:	f001 fd08 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000db0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481c      	ldr	r0, [pc, #112]	; (8000e3c <MX_GPIO_Init+0x1c0>)
 8000dca:	f001 fcf9 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Stepper_Dir_Pin */
  GPIO_InitStruct.Pin = Stepper_Dir_Pin;
 8000dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Stepper_Dir_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4816      	ldr	r0, [pc, #88]	; (8000e40 <MX_GPIO_Init+0x1c4>)
 8000de8:	f001 fcea 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4810      	ldr	r0, [pc, #64]	; (8000e44 <MX_GPIO_Init+0x1c8>)
 8000e04:	f001 fcdc 	bl	80027c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480a      	ldr	r0, [pc, #40]	; (8000e44 <MX_GPIO_Init+0x1c8>)
 8000e1c:	f001 fcd0 	bl	80027c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	2028      	movs	r0, #40	; 0x28
 8000e26:	f000 fd6a 	bl	80018fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e2a:	2028      	movs	r0, #40	; 0x28
 8000e2c:	f000 fd83 	bl	8001936 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e30:	bf00      	nop
 8000e32:	3738      	adds	r7, #56	; 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40021400 	.word	0x40021400
 8000e44:	40021800 	.word	0x40021800
 8000e48:	40020800 	.word	0x40020800

08000e4c <txCplt>:

/* USER CODE BEGIN 4 */

void txCplt()
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <getCMD>:

void getCMD(const uint8_t *cmd)
{
 8000e5c:	b590      	push	{r4, r7, lr}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	480a      	ldr	r0, [pc, #40]	; (8000e94 <getCMD+0x38>)
 8000e6a:	f001 fe55 	bl	8002b18 <HAL_GPIO_WritePin>
	memset(tmp_rx, 0, sizeof(uint8_t)*MSG_LEN);
 8000e6e:	2210      	movs	r2, #16
 8000e70:	2100      	movs	r1, #0
 8000e72:	4809      	ldr	r0, [pc, #36]	; (8000e98 <getCMD+0x3c>)
 8000e74:	f005 fba3 	bl	80065be <memset>
	memcpy(tmp_rx, cmd, sizeof(uint8_t)*MSG_LEN);
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <getCMD+0x3c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4614      	mov	r4, r2
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	6859      	ldr	r1, [r3, #4]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	Process_CMD();
 8000e88:	f000 f808 	bl	8000e9c <Process_CMD>
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	40020400 	.word	0x40020400
 8000e98:	20000978 	.word	0x20000978

08000e9c <Process_CMD>:

void Process_CMD()
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	if(tmp_rx[1] == 's')
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <Process_CMD+0x80>)
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	2b73      	cmp	r3, #115	; 0x73
 8000ea6:	d136      	bne.n	8000f16 <Process_CMD+0x7a>
	{
		desti_shelf = (tmp_rx[2]-'0')*100 + (tmp_rx[3]-'0')*10 + (tmp_rx[4]-'0')*1;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <Process_CMD+0x80>)
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	461a      	mov	r2, r3
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	0091      	lsls	r1, r2, #2
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <Process_CMD+0x80>)
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	0089      	lsls	r1, r1, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <Process_CMD+0x80>)
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	3330      	adds	r3, #48	; 0x30
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <Process_CMD+0x84>)
 8000ee0:	701a      	strb	r2, [r3, #0]
		if(desti_shelf == curr_shelf)
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <Process_CMD+0x84>)
 8000ee4:	781a      	ldrb	r2, [r3, #0]
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <Process_CMD+0x88>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d106      	bne.n	8000efc <Process_CMD+0x60>
		{
			while(BT_Transmit_Str("Not Change") == 0){}
 8000eee:	bf00      	nop
 8000ef0:	480d      	ldr	r0, [pc, #52]	; (8000f28 <Process_CMD+0x8c>)
 8000ef2:	f7ff fb33 	bl	800055c <BT_Transmit_Str>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f9      	beq.n	8000ef0 <Process_CMD+0x54>
		}
		Stepper_Rotate((desti_shelf-curr_shelf)*distance);
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <Process_CMD+0x84>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <Process_CMD+0x88>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <Process_CMD+0x90>)
 8000f0a:	8812      	ldrh	r2, [r2, #0]
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fc01 	bl	8000718 <Stepper_Rotate>
	}
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000978 	.word	0x20000978
 8000f20:	20000988 	.word	0x20000988
 8000f24:	20000004 	.word	0x20000004
 8000f28:	0800665c 	.word	0x0800665c
 8000f2c:	20000002 	.word	0x20000002

08000f30 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	if(htim == STEPPER_TIMER)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d101      	bne.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Stepper_Step_Cplt();
 8000f40:	f7ff fc48 	bl	80007d4 <Stepper_Step_Cplt>
	}
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000258 	.word	0x20000258

08000f50 <Stepper_Rotate_Cplt_CB>:

void Stepper_Rotate_Cplt_CB()
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	curr_shelf = desti_shelf;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <Stepper_Rotate_Cplt_CB+0x20>)
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <Stepper_Rotate_Cplt_CB+0x24>)
 8000f5a:	701a      	strb	r2, [r3, #0]
	while(BT_Transmit_Str("Rotate Cplt") == 0){}
 8000f5c:	bf00      	nop
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <Stepper_Rotate_Cplt_CB+0x28>)
 8000f60:	f7ff fafc 	bl	800055c <BT_Transmit_Str>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f9      	beq.n	8000f5e <Stepper_Rotate_Cplt_CB+0xe>
}
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000988 	.word	0x20000988
 8000f74:	20000004 	.word	0x20000004
 8000f78:	08006668 	.word	0x08006668

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	; 0x38
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a55      	ldr	r2, [pc, #340]	; (800114c <HAL_ETH_MspInit+0x174>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	f040 80a4 	bne.w	8001144 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	4b53      	ldr	r3, [pc, #332]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800100a:	6313      	str	r3, [r2, #48]	; 0x30
 800100c:	4b50      	ldr	r3, [pc, #320]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001014:	623b      	str	r3, [r7, #32]
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a4b      	ldr	r2, [pc, #300]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001022:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001026:	6313      	str	r3, [r2, #48]	; 0x30
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	4b45      	ldr	r3, [pc, #276]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800103a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103c:	4a44      	ldr	r2, [pc, #272]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800103e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001042:	6313      	str	r3, [r2, #48]	; 0x30
 8001044:	4b42      	ldr	r3, [pc, #264]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6313      	str	r3, [r2, #48]	; 0x30
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	4b37      	ldr	r3, [pc, #220]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	4a36      	ldr	r2, [pc, #216]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6313      	str	r3, [r2, #48]	; 0x30
 800107c:	4b34      	ldr	r3, [pc, #208]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <HAL_ETH_MspInit+0x178>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	6313      	str	r3, [r2, #48]	; 0x30
 8001098:	4b2d      	ldr	r3, [pc, #180]	; (8001150 <HAL_ETH_MspInit+0x178>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <HAL_ETH_MspInit+0x178>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	4a28      	ldr	r2, [pc, #160]	; (8001150 <HAL_ETH_MspInit+0x178>)
 80010ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b2:	6313      	str	r3, [r2, #48]	; 0x30
 80010b4:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_ETH_MspInit+0x178>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80010c0:	2332      	movs	r3, #50	; 0x32
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010cc:	2303      	movs	r3, #3
 80010ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d0:	230b      	movs	r3, #11
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	481e      	ldr	r0, [pc, #120]	; (8001154 <HAL_ETH_MspInit+0x17c>)
 80010dc:	f001 fb70 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010e0:	2386      	movs	r3, #134	; 0x86
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010f0:	230b      	movs	r3, #11
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4817      	ldr	r0, [pc, #92]	; (8001158 <HAL_ETH_MspInit+0x180>)
 80010fc:	f001 fb60 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001100:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001112:	230b      	movs	r3, #11
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	480f      	ldr	r0, [pc, #60]	; (800115c <HAL_ETH_MspInit+0x184>)
 800111e:	f001 fb4f 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001122:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001134:	230b      	movs	r3, #11
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <HAL_ETH_MspInit+0x188>)
 8001140:	f001 fb3e 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001144:	bf00      	nop
 8001146:	3738      	adds	r7, #56	; 0x38
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40028000 	.word	0x40028000
 8001150:	40023800 	.word	0x40023800
 8001154:	40020800 	.word	0x40020800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40021800 	.word	0x40021800

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_TIM_Base_MspInit+0x48>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d115      	bne.n	80011a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_TIM_Base_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2019      	movs	r0, #25
 8001198:	f000 fbb1 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800119c:	2019      	movs	r0, #25
 800119e:	f000 fbca 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40010000 	.word	0x40010000
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_TIM_MspPostInit+0x68>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d11e      	bne.n	8001214 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a10      	ldr	r2, [pc, #64]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <HAL_TIM_MspPostInit+0x6c>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0310 	and.w	r3, r3, #16
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001204:	2301      	movs	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_TIM_MspPostInit+0x70>)
 8001210:	f001 fad6 	bl	80027c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40010000 	.word	0x40010000
 8001220:	40023800 	.word	0x40023800
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	; 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a74      	ldr	r2, [pc, #464]	; (8001418 <HAL_UART_MspInit+0x1f0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	f040 80af 	bne.w	80013aa <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
 8001250:	4b72      	ldr	r3, [pc, #456]	; (800141c <HAL_UART_MspInit+0x1f4>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a71      	ldr	r2, [pc, #452]	; (800141c <HAL_UART_MspInit+0x1f4>)
 8001256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b6f      	ldr	r3, [pc, #444]	; (800141c <HAL_UART_MspInit+0x1f4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	4b6b      	ldr	r3, [pc, #428]	; (800141c <HAL_UART_MspInit+0x1f4>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a6a      	ldr	r2, [pc, #424]	; (800141c <HAL_UART_MspInit+0x1f4>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b68      	ldr	r3, [pc, #416]	; (800141c <HAL_UART_MspInit+0x1f4>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	4b64      	ldr	r3, [pc, #400]	; (800141c <HAL_UART_MspInit+0x1f4>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a63      	ldr	r2, [pc, #396]	; (800141c <HAL_UART_MspInit+0x1f4>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b61      	ldr	r3, [pc, #388]	; (800141c <HAL_UART_MspInit+0x1f4>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012a0:	2308      	movs	r3, #8
 80012a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b0:	2307      	movs	r3, #7
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	4859      	ldr	r0, [pc, #356]	; (8001420 <HAL_UART_MspInit+0x1f8>)
 80012bc:	f001 fa80 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012c0:	2320      	movs	r3, #32
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d0:	2307      	movs	r3, #7
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4852      	ldr	r0, [pc, #328]	; (8001424 <HAL_UART_MspInit+0x1fc>)
 80012dc:	f001 fa70 	bl	80027c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012e0:	4b51      	ldr	r3, [pc, #324]	; (8001428 <HAL_UART_MspInit+0x200>)
 80012e2:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_UART_MspInit+0x204>)
 80012e4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012e6:	4b50      	ldr	r3, [pc, #320]	; (8001428 <HAL_UART_MspInit+0x200>)
 80012e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <HAL_UART_MspInit+0x200>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <HAL_UART_MspInit+0x200>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012fa:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <HAL_UART_MspInit+0x200>)
 80012fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001300:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <HAL_UART_MspInit+0x200>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001308:	4b47      	ldr	r3, [pc, #284]	; (8001428 <HAL_UART_MspInit+0x200>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800130e:	4b46      	ldr	r3, [pc, #280]	; (8001428 <HAL_UART_MspInit+0x200>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001314:	4b44      	ldr	r3, [pc, #272]	; (8001428 <HAL_UART_MspInit+0x200>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <HAL_UART_MspInit+0x200>)
 800131c:	2200      	movs	r2, #0
 800131e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001320:	4841      	ldr	r0, [pc, #260]	; (8001428 <HAL_UART_MspInit+0x200>)
 8001322:	f000 fb23 	bl	800196c <HAL_DMA_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800132c:	f7ff fe26 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a3d      	ldr	r2, [pc, #244]	; (8001428 <HAL_UART_MspInit+0x200>)
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
 8001336:	4a3c      	ldr	r2, [pc, #240]	; (8001428 <HAL_UART_MspInit+0x200>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800133c:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <HAL_UART_MspInit+0x208>)
 800133e:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <HAL_UART_MspInit+0x20c>)
 8001340:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001344:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001348:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800134a:	4b39      	ldr	r3, [pc, #228]	; (8001430 <HAL_UART_MspInit+0x208>)
 800134c:	2240      	movs	r2, #64	; 0x40
 800134e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001350:	4b37      	ldr	r3, [pc, #220]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001356:	4b36      	ldr	r3, [pc, #216]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800135c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001360:	2200      	movs	r2, #0
 8001362:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001366:	2200      	movs	r2, #0
 8001368:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800136a:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_UART_MspInit+0x208>)
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001370:	4b2f      	ldr	r3, [pc, #188]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001376:	4b2e      	ldr	r3, [pc, #184]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800137c:	482c      	ldr	r0, [pc, #176]	; (8001430 <HAL_UART_MspInit+0x208>)
 800137e:	f000 faf5 	bl	800196c <HAL_DMA_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8001388:	f7ff fdf8 	bl	8000f7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a28      	ldr	r2, [pc, #160]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001390:	639a      	str	r2, [r3, #56]	; 0x38
 8001392:	4a27      	ldr	r2, [pc, #156]	; (8001430 <HAL_UART_MspInit+0x208>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2026      	movs	r0, #38	; 0x26
 800139e:	f000 faae 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013a2:	2026      	movs	r0, #38	; 0x26
 80013a4:	f000 fac7 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a8:	e031      	b.n	800140e <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART3)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a22      	ldr	r2, [pc, #136]	; (8001438 <HAL_UART_MspInit+0x210>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d12c      	bne.n	800140e <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_UART_MspInit+0x1f4>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_UART_MspInit+0x1f4>)
 80013be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c2:	6413      	str	r3, [r2, #64]	; 0x40
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0x1f4>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_UART_MspInit+0x1f4>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_UART_MspInit+0x1f4>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_UART_MspInit+0x1f4>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013fe:	2307      	movs	r3, #7
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <HAL_UART_MspInit+0x1fc>)
 800140a:	f001 f9d9 	bl	80027c0 <HAL_GPIO_Init>
}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004400 	.word	0x40004400
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40020c00 	.word	0x40020c00
 8001428:	20000390 	.word	0x20000390
 800142c:	40026088 	.word	0x40026088
 8001430:	200003f0 	.word	0x200003f0
 8001434:	400260a0 	.word	0x400260a0
 8001438:	40004800 	.word	0x40004800

0800143c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800145c:	d13f      	bne.n	80014de <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800147a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800148c:	230a      	movs	r3, #10
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4815      	ldr	r0, [pc, #84]	; (80014ec <HAL_PCD_MspInit+0xb0>)
 8001498:	f001 f992 	bl	80027c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800149c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480e      	ldr	r0, [pc, #56]	; (80014ec <HAL_PCD_MspInit+0xb0>)
 80014b2:	f001 f985 	bl	80027c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 80014b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6353      	str	r3, [r2, #52]	; 0x34
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a07      	ldr	r2, [pc, #28]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_PCD_MspInit+0xac>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f8c0 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <DMA1_Stream5_IRQHandler+0x10>)
 800154a:	f000 fba7 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000390 	.word	0x20000390

08001558 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <DMA1_Stream6_IRQHandler+0x10>)
 800155e:	f000 fb9d 	bl	8001c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200003f0 	.word	0x200003f0

0800156c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001570:	4802      	ldr	r0, [pc, #8]	; (800157c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001572:	f002 fb35 	bl	8003be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000258 	.word	0x20000258

08001580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <USART2_IRQHandler+0x10>)
 8001586:	f003 fb7d 	bl	8004c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002a0 	.word	0x200002a0

08001594 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001598:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800159c:	f001 fad6 	bl	8002b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <SystemInit+0x20>)
 80015aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <SystemInit+0x20>)
 80015b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001600 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015cc:	f7ff ffea 	bl	80015a4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e8:	4c0a      	ldr	r4, [pc, #40]	; (8001614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015f6:	f004 ffeb 	bl	80065d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fa:	f7ff f8fd 	bl	80007f8 <main>
  bx  lr    
 80015fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001600:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001608:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800160c:	080066a4 	.word	0x080066a4
  ldr r2, =_sbss
 8001610:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001614:	20000998 	.word	0x20000998

08001618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001618:	e7fe      	b.n	8001618 <ADC_IRQHandler>
	...

0800161c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <HAL_Init+0x40>)
 8001626:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_Init+0x40>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_Init+0x40>)
 8001632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_Init+0x40>)
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001644:	2003      	movs	r0, #3
 8001646:	f000 f94f 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f808 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001650:	f7ff fc9a 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023c00 	.word	0x40023c00

08001660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x54>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001676:	fbb3 f3f1 	udiv	r3, r3, r1
 800167a:	fbb2 f3f3 	udiv	r3, r2, r3
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f967 	bl	8001952 <HAL_SYSTICK_Config>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00e      	b.n	80016ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d80a      	bhi.n	80016aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f000 f92f 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a0:	4a06      	ldr	r2, [pc, #24]	; (80016bc <HAL_InitTick+0x5c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e000      	b.n	80016ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000010 	.word	0x20000010
 80016bc:	2000000c 	.word	0x2000000c

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000010 	.word	0x20000010
 80016e4:	20000994 	.word	0x20000994

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000994 	.word	0x20000994

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000010 	.word	0x20000010

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	; (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	; (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff feb6 	bl	80016e8 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e099      	b.n	8001abc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019a8:	e00f      	b.n	80019ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019aa:	f7ff fe9d 	bl	80016e8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d908      	bls.n	80019ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2220      	movs	r2, #32
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2203      	movs	r2, #3
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e078      	b.n	8001abc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1e8      	bne.n	80019aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_DMA_Init+0x158>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f023 0307 	bic.w	r3, r3, #7
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d117      	bne.n	8001a8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00e      	beq.n	8001a8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb01 	bl	8002078 <DMA_CheckFifoParam>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2240      	movs	r2, #64	; 0x40
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e016      	b.n	8001abc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 fab8 	bl	800200c <DMA_CalcBaseAndBitshift>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa4:	223f      	movs	r2, #63	; 0x3f
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	f010803f 	.word	0xf010803f

08001ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_DMA_Start_IT+0x26>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e040      	b.n	8001b70 <HAL_DMA_Start_IT+0xa8>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d12f      	bne.n	8001b62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2202      	movs	r2, #2
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa4a 	bl	8001fb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	223f      	movs	r2, #63	; 0x3f
 8001b22:	409a      	lsls	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0216 	orr.w	r2, r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0208 	orr.w	r2, r2, #8
 8001b4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e005      	b.n	8001b6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b86:	f7ff fdaf 	bl	80016e8 <HAL_GetTick>
 8001b8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d008      	beq.n	8001baa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2280      	movs	r2, #128	; 0x80
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e052      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0216 	bic.w	r2, r2, #22
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695a      	ldr	r2, [r3, #20]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d103      	bne.n	8001bda <HAL_DMA_Abort+0x62>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0208 	bic.w	r2, r2, #8
 8001be8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0201 	bic.w	r2, r2, #1
 8001bf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfa:	e013      	b.n	8001c24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bfc:	f7ff fd74 	bl	80016e8 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d90c      	bls.n	8001c24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e015      	b.n	8001c50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e4      	bne.n	8001bfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	223f      	movs	r2, #63	; 0x3f
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d004      	beq.n	8001c76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00c      	b.n	8001c90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ca8:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <HAL_DMA_IRQHandler+0x248>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a8e      	ldr	r2, [pc, #568]	; (8001ee8 <HAL_DMA_IRQHandler+0x24c>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0a9b      	lsrs	r3, r3, #10
 8001cb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0204 	bic.w	r2, r2, #4
 8001cee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d00:	f043 0201 	orr.w	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d012      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00b      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2204      	movs	r2, #4
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d012      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d00b      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2204      	movs	r2, #4
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0204 	orr.w	r2, r3, #4
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	2210      	movs	r2, #16
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d043      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03c      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2210      	movs	r2, #16
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d108      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d024      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
 8001dca:	e01f      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	4798      	blx	r3
 8001ddc:	e016      	b.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0208 	bic.w	r2, r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e10:	2220      	movs	r2, #32
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 808f 	beq.w	8001f3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0310 	and.w	r3, r3, #16
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8087 	beq.w	8001f3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2220      	movs	r2, #32
 8001e34:	409a      	lsls	r2, r3
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b05      	cmp	r3, #5
 8001e44:	d136      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0216 	bic.w	r2, r2, #22
 8001e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695a      	ldr	r2, [r3, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d103      	bne.n	8001e76 <HAL_DMA_IRQHandler+0x1da>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0208 	bic.w	r2, r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	223f      	movs	r2, #63	; 0x3f
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d07e      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	4798      	blx	r3
        }
        return;
 8001eb2:	e079      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d01d      	beq.n	8001efe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10d      	bne.n	8001eec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d031      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	4798      	blx	r3
 8001ee0:	e02c      	b.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
 8001ee2:	bf00      	nop
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d023      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e01e      	b.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0210 	bic.w	r2, r2, #16
 8001f1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d032      	beq.n	8001faa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2205      	movs	r2, #5
 8001f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0201 	bic.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d307      	bcc.n	8001f84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f2      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x2cc>
 8001f82:	e000      	b.n	8001f86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	4798      	blx	r3
 8001fa6:	e000      	b.n	8001faa <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fa8:	bf00      	nop
    }
  }
}
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
 8001fbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b40      	cmp	r3, #64	; 0x40
 8001fdc:	d108      	bne.n	8001ff0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fee:	e007      	b.n	8002000 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	60da      	str	r2, [r3, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	3b10      	subs	r3, #16
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <DMA_CalcBaseAndBitshift+0x64>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002026:	4a13      	ldr	r2, [pc, #76]	; (8002074 <DMA_CalcBaseAndBitshift+0x68>)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d909      	bls.n	800204e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002042:	f023 0303 	bic.w	r3, r3, #3
 8002046:	1d1a      	adds	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	659a      	str	r2, [r3, #88]	; 0x58
 800204c:	e007      	b.n	800205e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002062:	4618      	mov	r0, r3
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	aaaaaaab 	.word	0xaaaaaaab
 8002074:	0800668c 	.word	0x0800668c

08002078 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11f      	bne.n	80020d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d856      	bhi.n	8002146 <DMA_CheckFifoParam+0xce>
 8002098:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <DMA_CheckFifoParam+0x28>)
 800209a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209e:	bf00      	nop
 80020a0:	080020b1 	.word	0x080020b1
 80020a4:	080020c3 	.word	0x080020c3
 80020a8:	080020b1 	.word	0x080020b1
 80020ac:	08002147 	.word	0x08002147
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d046      	beq.n	800214a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c0:	e043      	b.n	800214a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020ca:	d140      	bne.n	800214e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d0:	e03d      	b.n	800214e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020da:	d121      	bne.n	8002120 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d837      	bhi.n	8002152 <DMA_CheckFifoParam+0xda>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <DMA_CheckFifoParam+0x70>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	080020ff 	.word	0x080020ff
 80020f0:	080020f9 	.word	0x080020f9
 80020f4:	08002111 	.word	0x08002111
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
      break;
 80020fc:	e030      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d025      	beq.n	8002156 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800210e:	e022      	b.n	8002156 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002118:	d11f      	bne.n	800215a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800211e:	e01c      	b.n	800215a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d903      	bls.n	800212e <DMA_CheckFifoParam+0xb6>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d003      	beq.n	8002134 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800212c:	e018      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
      break;
 8002132:	e015      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      break;
 8002144:	e00b      	b.n	800215e <DMA_CheckFifoParam+0xe6>
      break;
 8002146:	bf00      	nop
 8002148:	e00a      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e008      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
 8002150:	e006      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e004      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 8002156:	bf00      	nop
 8002158:	e002      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;   
 800215a:	bf00      	nop
 800215c:	e000      	b.n	8002160 <DMA_CheckFifoParam+0xe8>
      break;
 800215e:	bf00      	nop
    }
  } 
  
  return status; 
 8002160:	7bfb      	ldrb	r3, [r7, #15]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop

08002170 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e06c      	b.n	800225c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002188:	2b00      	cmp	r3, #0
 800218a:	d106      	bne.n	800219a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2223      	movs	r2, #35	; 0x23
 8002190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7fe ff1f 	bl	8000fd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_ETH_Init+0xf4>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a30      	ldr	r2, [pc, #192]	; (8002264 <HAL_ETH_Init+0xf4>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_ETH_Init+0xf4>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <HAL_ETH_Init+0xf8>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4a2b      	ldr	r2, [pc, #172]	; (8002268 <HAL_ETH_Init+0xf8>)
 80021bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_ETH_Init+0xf8>)
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	4927      	ldr	r1, [pc, #156]	; (8002268 <HAL_ETH_Init+0xf8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_ETH_Init+0xf8>)
 80021d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ec:	f7ff fa7c 	bl	80016e8 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80021f2:	e011      	b.n	8002218 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80021f4:	f7ff fa78 	bl	80016e8 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002202:	d909      	bls.n	8002218 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2204      	movs	r2, #4
 8002208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	22e0      	movs	r2, #224	; 0xe0
 8002210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e021      	b.n	800225c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e4      	bne.n	80021f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f958 	bl	80024e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f9ff 	bl	8002634 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa55 	bl	80026e6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	461a      	mov	r2, r3
 8002242:	2100      	movs	r1, #0
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f9bd 	bl	80025c4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2210      	movs	r2, #16
 8002256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	40013800 	.word	0x40013800

0800226c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <ETH_SetMACConfig+0x15c>)
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	7c1b      	ldrb	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <ETH_SetMACConfig+0x28>
 800228e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002292:	e000      	b.n	8002296 <ETH_SetMACConfig+0x2a>
 8002294:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	7c5b      	ldrb	r3, [r3, #17]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <ETH_SetMACConfig+0x38>
 800229e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a2:	e000      	b.n	80022a6 <ETH_SetMACConfig+0x3a>
 80022a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7fdb      	ldrb	r3, [r3, #31]
 80022b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	7f92      	ldrb	r2, [r2, #30]
 80022c0:	2a00      	cmp	r2, #0
 80022c2:	d102      	bne.n	80022ca <ETH_SetMACConfig+0x5e>
 80022c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c8:	e000      	b.n	80022cc <ETH_SetMACConfig+0x60>
 80022ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80022cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	7f1b      	ldrb	r3, [r3, #28]
 80022d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d102      	bne.n	80022f4 <ETH_SetMACConfig+0x88>
 80022ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f2:	e000      	b.n	80022f6 <ETH_SetMACConfig+0x8a>
 80022f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	7bdb      	ldrb	r3, [r3, #15]
 80022fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002304:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800230c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800230e:	4313      	orrs	r3, r2
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002326:	2001      	movs	r0, #1
 8002328:	f7ff f9ea 	bl	8001700 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002342:	4013      	ands	r3, r2
 8002344:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002352:	2a00      	cmp	r2, #0
 8002354:	d101      	bne.n	800235a <ETH_SetMACConfig+0xee>
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	e000      	b.n	800235c <ETH_SetMACConfig+0xf0>
 800235a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800235c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002362:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800236a:	2a01      	cmp	r2, #1
 800236c:	d101      	bne.n	8002372 <ETH_SetMACConfig+0x106>
 800236e:	2208      	movs	r2, #8
 8002370:	e000      	b.n	8002374 <ETH_SetMACConfig+0x108>
 8002372:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002374:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800237c:	2a01      	cmp	r2, #1
 800237e:	d101      	bne.n	8002384 <ETH_SetMACConfig+0x118>
 8002380:	2204      	movs	r2, #4
 8002382:	e000      	b.n	8002386 <ETH_SetMACConfig+0x11a>
 8002384:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002386:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800238e:	2a01      	cmp	r2, #1
 8002390:	d101      	bne.n	8002396 <ETH_SetMACConfig+0x12a>
 8002392:	2202      	movs	r2, #2
 8002394:	e000      	b.n	8002398 <ETH_SetMACConfig+0x12c>
 8002396:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002398:	4313      	orrs	r3, r2
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	4313      	orrs	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7ff f9a5 	bl	8001700 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	619a      	str	r2, [r3, #24]
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	ff20810f 	.word	0xff20810f

080023cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <ETH_SetDMAConfig+0x110>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	7b1b      	ldrb	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <ETH_SetDMAConfig+0x2c>
 80023f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023f6:	e000      	b.n	80023fa <ETH_SetDMAConfig+0x2e>
 80023f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7b5b      	ldrb	r3, [r3, #13]
 80023fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002400:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	7f52      	ldrb	r2, [r2, #29]
 8002406:	2a00      	cmp	r2, #0
 8002408:	d102      	bne.n	8002410 <ETH_SetDMAConfig+0x44>
 800240a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800240e:	e000      	b.n	8002412 <ETH_SetDMAConfig+0x46>
 8002410:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002412:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7b9b      	ldrb	r3, [r3, #14]
 8002418:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800241a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002420:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	7f1b      	ldrb	r3, [r3, #28]
 8002426:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002428:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	7f9b      	ldrb	r3, [r3, #30]
 800242e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002430:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002436:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800243e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002440:	4313      	orrs	r3, r2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002450:	461a      	mov	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002462:	2001      	movs	r0, #1
 8002464:	f7ff f94c 	bl	8001700 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	461a      	mov	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	791b      	ldrb	r3, [r3, #4]
 800247a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002480:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002486:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800248c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002494:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002496:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800249e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80024a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7ff f91d 	bl	8001700 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	f8de3f23 	.word	0xf8de3f23

080024e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b0a6      	sub	sp, #152	; 0x98
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024ee:	2301      	movs	r3, #1
 80024f0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800251c:	2300      	movs	r3, #0
 800251e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002520:	2300      	movs	r3, #0
 8002522:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002526:	2300      	movs	r3, #0
 8002528:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800254c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002554:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fe86 	bl	800226c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002560:	2301      	movs	r3, #1
 8002562:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002564:	2301      	movs	r3, #1
 8002566:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800256e:	2301      	movs	r3, #1
 8002570:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002582:	2300      	movs	r3, #0
 8002584:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002586:	2301      	movs	r3, #1
 8002588:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800258c:	2301      	movs	r3, #1
 800258e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002594:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800259a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800259c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025b0:	f107 0308 	add.w	r3, r7, #8
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff08 	bl	80023cc <ETH_SetDMAConfig>
}
 80025bc:	bf00      	nop
 80025be:	3798      	adds	r7, #152	; 0x98
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3305      	adds	r3, #5
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	3204      	adds	r2, #4
 80025dc:	7812      	ldrb	r2, [r2, #0]
 80025de:	4313      	orrs	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <ETH_MACAddressConfig+0x68>)
 80025e6:	4413      	add	r3, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3303      	adds	r3, #3
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	061a      	lsls	r2, r3, #24
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3302      	adds	r3, #2
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3301      	adds	r3, #1
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	4313      	orrs	r3, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <ETH_MACAddressConfig+0x6c>)
 8002616:	4413      	add	r3, r2
 8002618:	461a      	mov	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	6013      	str	r3, [r2, #0]
}
 800261e:	bf00      	nop
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40028040 	.word	0x40028040
 8002630:	40028044 	.word	0x40028044

08002634 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	e03e      	b.n	80026c0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68d9      	ldr	r1, [r3, #12]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2200      	movs	r2, #0
 800265e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	3206      	adds	r2, #6
 8002674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b02      	cmp	r3, #2
 8002688:	d80c      	bhi.n	80026a4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68d9      	ldr	r1, [r3, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	4613      	mov	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4413      	add	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	440b      	add	r3, r1
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	e004      	b.n	80026ae <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3301      	adds	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d9bd      	bls.n	8002642 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d8:	611a      	str	r2, [r3, #16]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	e046      	b.n	8002782 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6919      	ldr	r1, [r3, #16]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2200      	movs	r2, #0
 8002722:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002730:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002738:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	3212      	adds	r2, #18
 800274e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d80c      	bhi.n	8002772 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	e004      	b.n	800277c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d9b5      	bls.n	80026f4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b2:	60da      	str	r2, [r3, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	e177      	b.n	8002acc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027dc:	2201      	movs	r2, #1
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	f040 8166 	bne.w	8002ac6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d005      	beq.n	8002812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800280e:	2b02      	cmp	r3, #2
 8002810:	d130      	bne.n	8002874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	2203      	movs	r2, #3
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 0201 	and.w	r2, r3, #1
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b03      	cmp	r3, #3
 800287e:	d017      	beq.n	80028b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	2203      	movs	r2, #3
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d123      	bne.n	8002904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	08da      	lsrs	r2, r3, #3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3208      	adds	r2, #8
 80028c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	220f      	movs	r2, #15
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691a      	ldr	r2, [r3, #16]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	2203      	movs	r2, #3
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80c0 	beq.w	8002ac6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b66      	ldr	r3, [pc, #408]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_GPIO_Init+0x324>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002962:	4a61      	ldr	r2, [pc, #388]	; (8002ae8 <HAL_GPIO_Init+0x328>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	089b      	lsrs	r3, r3, #2
 8002968:	3302      	adds	r3, #2
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a58      	ldr	r2, [pc, #352]	; (8002aec <HAL_GPIO_Init+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d037      	beq.n	80029fe <HAL_GPIO_Init+0x23e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_GPIO_Init+0x330>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d031      	beq.n	80029fa <HAL_GPIO_Init+0x23a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a56      	ldr	r2, [pc, #344]	; (8002af4 <HAL_GPIO_Init+0x334>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d02b      	beq.n	80029f6 <HAL_GPIO_Init+0x236>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a55      	ldr	r2, [pc, #340]	; (8002af8 <HAL_GPIO_Init+0x338>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d025      	beq.n	80029f2 <HAL_GPIO_Init+0x232>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a54      	ldr	r2, [pc, #336]	; (8002afc <HAL_GPIO_Init+0x33c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01f      	beq.n	80029ee <HAL_GPIO_Init+0x22e>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a53      	ldr	r2, [pc, #332]	; (8002b00 <HAL_GPIO_Init+0x340>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d019      	beq.n	80029ea <HAL_GPIO_Init+0x22a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a52      	ldr	r2, [pc, #328]	; (8002b04 <HAL_GPIO_Init+0x344>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <HAL_GPIO_Init+0x226>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a51      	ldr	r2, [pc, #324]	; (8002b08 <HAL_GPIO_Init+0x348>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00d      	beq.n	80029e2 <HAL_GPIO_Init+0x222>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a50      	ldr	r2, [pc, #320]	; (8002b0c <HAL_GPIO_Init+0x34c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x21e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_GPIO_Init+0x350>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d101      	bne.n	80029da <HAL_GPIO_Init+0x21a>
 80029d6:	2309      	movs	r3, #9
 80029d8:	e012      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029da:	230a      	movs	r3, #10
 80029dc:	e010      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029de:	2308      	movs	r3, #8
 80029e0:	e00e      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e2:	2307      	movs	r3, #7
 80029e4:	e00c      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029e6:	2306      	movs	r3, #6
 80029e8:	e00a      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ea:	2305      	movs	r3, #5
 80029ec:	e008      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029ee:	2304      	movs	r3, #4
 80029f0:	e006      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f2:	2303      	movs	r3, #3
 80029f4:	e004      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e002      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <HAL_GPIO_Init+0x240>
 80029fe:	2300      	movs	r3, #0
 8002a00:	69fa      	ldr	r2, [r7, #28]
 8002a02:	f002 0203 	and.w	r2, r2, #3
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4093      	lsls	r3, r2
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a10:	4935      	ldr	r1, [pc, #212]	; (8002ae8 <HAL_GPIO_Init+0x328>)
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	3302      	adds	r3, #2
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a34      	ldr	r2, [pc, #208]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b32      	ldr	r3, [pc, #200]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a29      	ldr	r2, [pc, #164]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_GPIO_Init+0x354>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	61fb      	str	r3, [r7, #28]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	2b0f      	cmp	r3, #15
 8002ad0:	f67f ae84 	bls.w	80027dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3724      	adds	r7, #36	; 0x24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	40020400 	.word	0x40020400
 8002af4:	40020800 	.word	0x40020800
 8002af8:	40020c00 	.word	0x40020c00
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40021400 	.word	0x40021400
 8002b04:	40021800 	.word	0x40021800
 8002b08:	40021c00 	.word	0x40021c00
 8002b0c:	40022000 	.word	0x40022000
 8002b10:	40022400 	.word	0x40022400
 8002b14:	40013c00 	.word	0x40013c00

08002b18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	807b      	strh	r3, [r7, #2]
 8002b24:	4613      	mov	r3, r2
 8002b26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b28:	787b      	ldrb	r3, [r7, #1]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2e:	887a      	ldrh	r2, [r7, #2]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b34:	e003      	b.n	8002b3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b36:	887b      	ldrh	r3, [r7, #2]
 8002b38:	041a      	lsls	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	619a      	str	r2, [r3, #24]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f806 	bl	8002b7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af02      	add	r7, sp, #8
 8002b98:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e101      	b.n	8002da8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe fc3c 	bl	800143c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd2:	d102      	bne.n	8002bda <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 fa52 	bl	8006088 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	7c1a      	ldrb	r2, [r3, #16]
 8002bec:	f88d 2000 	strb.w	r2, [sp]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bf4:	f003 f9e4 	bl	8005fc0 <USB_CoreInit>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e0ce      	b.n	8002da8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f003 fa4a 	bl	80060aa <USB_SetCurrentMode>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e0bf      	b.n	8002da8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e04a      	b.n	8002cc4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c2e:	7bfa      	ldrb	r2, [r7, #15]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	4613      	mov	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3315      	adds	r3, #21
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3314      	adds	r3, #20
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	b298      	uxth	r0, r3
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	332e      	adds	r3, #46	; 0x2e
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3318      	adds	r3, #24
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	331c      	adds	r3, #28
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3320      	adds	r3, #32
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	3324      	adds	r3, #36	; 0x24
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	791b      	ldrb	r3, [r3, #4]
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d3af      	bcc.n	8002c2e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e044      	b.n	8002d5e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	791b      	ldrb	r3, [r3, #4]
 8002d62:	7bfa      	ldrb	r2, [r7, #15]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3b5      	bcc.n	8002cd4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7c1a      	ldrb	r2, [r3, #16]
 8002d70:	f88d 2000 	strb.w	r2, [sp]
 8002d74:	3304      	adds	r3, #4
 8002d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d78:	f003 f9e4 	bl	8006144 <USB_DevInit>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00c      	b.n	8002da8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fbac 	bl	80064fe <USB_DevDisconnect>

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e267      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d075      	beq.n	8002eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dce:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b85      	ldr	r3, [pc, #532]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d112      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df2:	d10b      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4b7e      	ldr	r3, [pc, #504]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x108>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d157      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e242      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x74>
 8002e16:	4b76      	ldr	r3, [pc, #472]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a75      	ldr	r2, [pc, #468]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0x98>
 8002e2e:	4b70      	ldr	r3, [pc, #448]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6f      	ldr	r2, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b6d      	ldr	r3, [pc, #436]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6c      	ldr	r2, [pc, #432]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xb0>
 8002e48:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a68      	ldr	r2, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b66      	ldr	r3, [pc, #408]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fc3e 	bl	80016e8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fc3a 	bl	80016e8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e207      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xc0>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fc2a 	bl	80016e8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fc26 	bl	80016e8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1f3      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0xe8>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d11c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ede:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d116      	bne.n	8002f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1c7      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4937      	ldr	r1, [pc, #220]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	e03a      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f20:	4b34      	ldr	r3, [pc, #208]	; (8002ff4 <HAL_RCC_OscConfig+0x244>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f26:	f7fe fbdf 	bl	80016e8 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fbdb 	bl	80016e8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1a8      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b28      	ldr	r3, [pc, #160]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4925      	ldr	r1, [pc, #148]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f62:	4b24      	ldr	r3, [pc, #144]	; (8002ff4 <HAL_RCC_OscConfig+0x244>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f68:	f7fe fbbe 	bl	80016e8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe fbba 	bl	80016e8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e187      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d036      	beq.n	8003008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <HAL_RCC_OscConfig+0x248>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fb9e 	bl	80016e8 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fb9a 	bl	80016e8 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e167      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x200>
 8002fce:	e01b      	b.n	8003008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_OscConfig+0x248>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fb87 	bl	80016e8 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fdc:	e00e      	b.n	8002ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fde:	f7fe fb83 	bl	80016e8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d907      	bls.n	8002ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e150      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	42470000 	.word	0x42470000
 8002ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1ea      	bne.n	8002fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 8097 	beq.w	8003144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301a:	4b81      	ldr	r3, [pc, #516]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	4b7d      	ldr	r3, [pc, #500]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	4a7c      	ldr	r2, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	6413      	str	r3, [r2, #64]	; 0x40
 8003036:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003042:	2301      	movs	r3, #1
 8003044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d118      	bne.n	8003084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003052:	4b74      	ldr	r3, [pc, #464]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a73      	ldr	r2, [pc, #460]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 8003058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305e:	f7fe fb43 	bl	80016e8 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003066:	f7fe fb3f 	bl	80016e8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e10c      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_RCC_OscConfig+0x474>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x2ea>
 800308c:	4b64      	ldr	r3, [pc, #400]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	e01c      	b.n	80030d4 <HAL_RCC_OscConfig+0x324>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b05      	cmp	r3, #5
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x30c>
 80030a2:	4b5f      	ldr	r3, [pc, #380]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	4a5e      	ldr	r2, [pc, #376]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	6713      	str	r3, [r2, #112]	; 0x70
 80030ae:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a5b      	ldr	r2, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030b4:	f043 0301 	orr.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0x324>
 80030bc:	4b58      	ldr	r3, [pc, #352]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a57      	ldr	r2, [pc, #348]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 0301 	bic.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	4a54      	ldr	r2, [pc, #336]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030ce:	f023 0304 	bic.w	r3, r3, #4
 80030d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d015      	beq.n	8003108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fb04 	bl	80016e8 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fb00 	bl	80016e8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0cb      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ee      	beq.n	80030e4 <HAL_RCC_OscConfig+0x334>
 8003106:	e014      	b.n	8003132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fe faee 	bl	80016e8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310e:	e00a      	b.n	8003126 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fe faea 	bl	80016e8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0b5      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1ee      	bne.n	8003110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d105      	bne.n	8003144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	4a38      	ldr	r2, [pc, #224]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 800313e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003142:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a1 	beq.w	8003290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b08      	cmp	r3, #8
 8003158:	d05c      	beq.n	8003214 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d141      	bne.n	80031e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fabe 	bl	80016e8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe faba 	bl	80016e8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e087      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	019b      	lsls	r3, r3, #6
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	085b      	lsrs	r3, r3, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	491b      	ldr	r1, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe fa93 	bl	80016e8 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe fa8f 	bl	80016e8 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e05c      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	4b11      	ldr	r3, [pc, #68]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x416>
 80031e4:	e054      	b.n	8003290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_RCC_OscConfig+0x478>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fa7c 	bl	80016e8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fa78 	bl	80016e8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e045      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x470>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x444>
 8003212:	e03d      	b.n	8003290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e038      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
 8003220:	40023800 	.word	0x40023800
 8003224:	40007000 	.word	0x40007000
 8003228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x4ec>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d028      	beq.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d121      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11a      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800325c:	4013      	ands	r3, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003264:	4293      	cmp	r3, r2
 8003266:	d111      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	3b01      	subs	r3, #1
 8003276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d107      	bne.n	800328c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800

080032a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0cc      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d90c      	bls.n	80032dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b63      	ldr	r3, [pc, #396]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0b8      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330c:	4b53      	ldr	r3, [pc, #332]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a52      	ldr	r2, [pc, #328]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b50      	ldr	r3, [pc, #320]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	494d      	ldr	r1, [pc, #308]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d044      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d119      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800335a:	2b03      	cmp	r3, #3
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336e:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e067      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337e:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4934      	ldr	r1, [pc, #208]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	4313      	orrs	r3, r2
 800338e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003390:	f7fe f9aa 	bl	80016e8 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003396:	e00a      	b.n	80033ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003398:	f7fe f9a6 	bl	80016e8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e04f      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 020c 	and.w	r2, r3, #12
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	429a      	cmp	r2, r3
 80033be:	d1eb      	bne.n	8003398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d20c      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e032      	b.n	800344e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4916      	ldr	r1, [pc, #88]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	490e      	ldr	r1, [pc, #56]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003426:	f000 f821 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800342a:	4602      	mov	r2, r0
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	490a      	ldr	r1, [pc, #40]	; (8003460 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	5ccb      	ldrb	r3, [r1, r3]
 800343a:	fa22 f303 	lsr.w	r3, r2, r3
 800343e:	4a09      	ldr	r2, [pc, #36]	; (8003464 <HAL_RCC_ClockConfig+0x1c4>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003442:	4b09      	ldr	r3, [pc, #36]	; (8003468 <HAL_RCC_ClockConfig+0x1c8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe f90a 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40023c00 	.word	0x40023c00
 800345c:	40023800 	.word	0x40023800
 8003460:	08006674 	.word	0x08006674
 8003464:	20000008 	.word	0x20000008
 8003468:	2000000c 	.word	0x2000000c

0800346c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003470:	b094      	sub	sp, #80	; 0x50
 8003472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	647b      	str	r3, [r7, #68]	; 0x44
 8003478:	2300      	movs	r3, #0
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347c:	2300      	movs	r3, #0
 800347e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003484:	4b79      	ldr	r3, [pc, #484]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d00d      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x40>
 8003490:	2b08      	cmp	r3, #8
 8003492:	f200 80e1 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x34>
 800349a:	2b04      	cmp	r3, #4
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800349e:	e0db      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a0:	4b73      	ldr	r3, [pc, #460]	; (8003670 <HAL_RCC_GetSysClockFreq+0x204>)
 80034a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034a4:	e0db      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a6:	4b73      	ldr	r3, [pc, #460]	; (8003674 <HAL_RCC_GetSysClockFreq+0x208>)
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034aa:	e0d8      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ac:	4b6f      	ldr	r3, [pc, #444]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b6:	4b6d      	ldr	r3, [pc, #436]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d063      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	099b      	lsrs	r3, r3, #6
 80034c8:	2200      	movs	r2, #0
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80034cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
 80034d6:	2300      	movs	r3, #0
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
 80034da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f04f 0100 	mov.w	r1, #0
 80034ea:	0159      	lsls	r1, r3, #5
 80034ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f0:	0150      	lsls	r0, r2, #5
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4621      	mov	r1, r4
 80034f8:	1a51      	subs	r1, r2, r1
 80034fa:	6139      	str	r1, [r7, #16]
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003510:	4659      	mov	r1, fp
 8003512:	018b      	lsls	r3, r1, #6
 8003514:	4651      	mov	r1, sl
 8003516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800351a:	4651      	mov	r1, sl
 800351c:	018a      	lsls	r2, r1, #6
 800351e:	4651      	mov	r1, sl
 8003520:	ebb2 0801 	subs.w	r8, r2, r1
 8003524:	4659      	mov	r1, fp
 8003526:	eb63 0901 	sbc.w	r9, r3, r1
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800353a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353e:	4690      	mov	r8, r2
 8003540:	4699      	mov	r9, r3
 8003542:	4623      	mov	r3, r4
 8003544:	eb18 0303 	adds.w	r3, r8, r3
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	462b      	mov	r3, r5
 800354c:	eb49 0303 	adc.w	r3, r9, r3
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800355e:	4629      	mov	r1, r5
 8003560:	024b      	lsls	r3, r1, #9
 8003562:	4621      	mov	r1, r4
 8003564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003568:	4621      	mov	r1, r4
 800356a:	024a      	lsls	r2, r1, #9
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
 8003576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800357c:	f7fc fe3e 	bl	80001fc <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4613      	mov	r3, r2
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003588:	e058      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358a:	4b38      	ldr	r3, [pc, #224]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	099b      	lsrs	r3, r3, #6
 8003590:	2200      	movs	r2, #0
 8003592:	4618      	mov	r0, r3
 8003594:	4611      	mov	r1, r2
 8003596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800359a:	623b      	str	r3, [r7, #32]
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
 80035a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a4:	4642      	mov	r2, r8
 80035a6:	464b      	mov	r3, r9
 80035a8:	f04f 0000 	mov.w	r0, #0
 80035ac:	f04f 0100 	mov.w	r1, #0
 80035b0:	0159      	lsls	r1, r3, #5
 80035b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b6:	0150      	lsls	r0, r2, #5
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4641      	mov	r1, r8
 80035be:	ebb2 0a01 	subs.w	sl, r2, r1
 80035c2:	4649      	mov	r1, r9
 80035c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035dc:	ebb2 040a 	subs.w	r4, r2, sl
 80035e0:	eb63 050b 	sbc.w	r5, r3, fp
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	00eb      	lsls	r3, r5, #3
 80035ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f2:	00e2      	lsls	r2, r4, #3
 80035f4:	4614      	mov	r4, r2
 80035f6:	461d      	mov	r5, r3
 80035f8:	4643      	mov	r3, r8
 80035fa:	18e3      	adds	r3, r4, r3
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	464b      	mov	r3, r9
 8003600:	eb45 0303 	adc.w	r3, r5, r3
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003612:	4629      	mov	r1, r5
 8003614:	028b      	lsls	r3, r1, #10
 8003616:	4621      	mov	r1, r4
 8003618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800361c:	4621      	mov	r1, r4
 800361e:	028a      	lsls	r2, r1, #10
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003626:	2200      	movs	r2, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	61fa      	str	r2, [r7, #28]
 800362c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003630:	f7fc fde4 	bl	80001fc <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_GetSysClockFreq+0x200>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800364c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800364e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetSysClockFreq+0x204>)
 800365a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003660:	4618      	mov	r0, r3
 8003662:	3750      	adds	r7, #80	; 0x50
 8003664:	46bd      	mov	sp, r7
 8003666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000008 	.word	0x20000008

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	08006684 	.word	0x08006684

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036bc:	f7ff ffdc 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0b5b      	lsrs	r3, r3, #13
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	08006684 	.word	0x08006684

080036e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e041      	b.n	8003776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd fd2c 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 fd00 	bl	8004124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	d001      	beq.n	8003798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e04e      	b.n	8003836 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <HAL_TIM_Base_Start_IT+0xc4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d022      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c2:	d01d      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_TIM_Base_Start_IT+0xc8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d018      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1e      	ldr	r2, [pc, #120]	; (800384c <HAL_TIM_Base_Start_IT+0xcc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d013      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <HAL_TIM_Base_Start_IT+0xd0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	; (8003854 <HAL_TIM_Base_Start_IT+0xd4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d009      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <HAL_TIM_Base_Start_IT+0xd8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_TIM_Base_Start_IT+0x80>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_TIM_Base_Start_IT+0xdc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d111      	bne.n	8003824 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2b06      	cmp	r3, #6
 8003810:	d010      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003822:	e007      	b.n	8003834 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000
 8003848:	40000400 	.word	0x40000400
 800384c:	40000800 	.word	0x40000800
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40010400 	.word	0x40010400
 8003858:	40014000 	.word	0x40014000
 800385c:	40001800 	.word	0x40001800

08003860 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6a1a      	ldr	r2, [r3, #32]
 800387e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <HAL_TIM_Base_Stop_IT+0x48>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a1a      	ldr	r2, [r3, #32]
 800388e:	f240 4344 	movw	r3, #1092	; 0x444
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d107      	bne.n	80038a8 <HAL_TIM_Base_Stop_IT+0x48>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e041      	b.n	8003954 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f839 	bl	800395c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 fc11 	bl	8004124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d109      	bne.n	8003994 <HAL_TIM_PWM_Start+0x24>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	e022      	b.n	80039da <HAL_TIM_PWM_Start+0x6a>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d109      	bne.n	80039ae <HAL_TIM_PWM_Start+0x3e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	bf14      	ite	ne
 80039a6:	2301      	movne	r3, #1
 80039a8:	2300      	moveq	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	e015      	b.n	80039da <HAL_TIM_PWM_Start+0x6a>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d109      	bne.n	80039c8 <HAL_TIM_PWM_Start+0x58>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	e008      	b.n	80039da <HAL_TIM_PWM_Start+0x6a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e07c      	b.n	8003adc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_PWM_Start+0x82>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f0:	e013      	b.n	8003a1a <HAL_TIM_PWM_Start+0xaa>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_PWM_Start+0x92>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	e00b      	b.n	8003a1a <HAL_TIM_PWM_Start+0xaa>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d104      	bne.n	8003a12 <HAL_TIM_PWM_Start+0xa2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a10:	e003      	b.n	8003a1a <HAL_TIM_PWM_Start+0xaa>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2202      	movs	r2, #2
 8003a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fe74 	bl	8004710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a2d      	ldr	r2, [pc, #180]	; (8003ae4 <HAL_TIM_PWM_Start+0x174>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_TIM_PWM_Start+0xcc>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <HAL_TIM_PWM_Start+0x178>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIM_PWM_Start+0xd0>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_TIM_PWM_Start+0xd2>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <HAL_TIM_PWM_Start+0x174>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d022      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x136>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d01d      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x136>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <HAL_TIM_PWM_Start+0x17c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d018      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x136>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <HAL_TIM_PWM_Start+0x180>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x136>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1c      	ldr	r2, [pc, #112]	; (8003af4 <HAL_TIM_PWM_Start+0x184>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00e      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x136>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <HAL_TIM_PWM_Start+0x178>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x136>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_TIM_PWM_Start+0x188>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d004      	beq.n	8003aa6 <HAL_TIM_PWM_Start+0x136>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_TIM_PWM_Start+0x18c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d111      	bne.n	8003aca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2b06      	cmp	r3, #6
 8003ab6:	d010      	beq.n	8003ada <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac8:	e007      	b.n	8003ada <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40010400 	.word	0x40010400
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800
 8003af4:	40000c00 	.word	0x40000c00
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40001800 	.word	0x40001800

08003b00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	6839      	ldr	r1, [r7, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fdfc 	bl	8004710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a2e      	ldr	r2, [pc, #184]	; (8003bd8 <HAL_TIM_PWM_Stop+0xd8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_TIM_PWM_Stop+0x2c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2d      	ldr	r2, [pc, #180]	; (8003bdc <HAL_TIM_PWM_Stop+0xdc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIM_PWM_Stop+0x30>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_TIM_PWM_Stop+0x32>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d017      	beq.n	8003b66 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10f      	bne.n	8003b66 <HAL_TIM_PWM_Stop+0x66>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	f240 4344 	movw	r3, #1092	; 0x444
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_PWM_Stop+0x66>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10f      	bne.n	8003b96 <HAL_TIM_PWM_Stop+0x96>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6a1a      	ldr	r2, [r3, #32]
 8003b7c:	f240 4344 	movw	r3, #1092	; 0x444
 8003b80:	4013      	ands	r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_PWM_Stop+0x96>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0201 	bic.w	r2, r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d104      	bne.n	8003ba6 <HAL_TIM_PWM_Stop+0xa6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ba4:	e013      	b.n	8003bce <HAL_TIM_PWM_Stop+0xce>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d104      	bne.n	8003bb6 <HAL_TIM_PWM_Stop+0xb6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb4:	e00b      	b.n	8003bce <HAL_TIM_PWM_Stop+0xce>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d104      	bne.n	8003bc6 <HAL_TIM_PWM_Stop+0xc6>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc4:	e003      	b.n	8003bce <HAL_TIM_PWM_Stop+0xce>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40010400 	.word	0x40010400

08003be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d020      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0202 	mvn.w	r2, #2
 8003c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fa5b 	bl	80040e6 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa4d 	bl	80040d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fa5e 	bl	80040fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0204 	mvn.w	r2, #4
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fa35 	bl	80040e6 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa27 	bl	80040d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fa38 	bl	80040fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0208 	mvn.w	r2, #8
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa0f 	bl	80040e6 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa01 	bl	80040d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fa12 	bl	80040fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d020      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0210 	mvn.w	r2, #16
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9e9 	bl	80040e6 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f9db 	bl	80040d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f9ec 	bl	80040fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00c      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d007      	beq.n	8003d4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0201 	mvn.w	r2, #1
 8003d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7fd f8f2 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fdce 	bl	800490c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9bd 	bl	800410e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d007      	beq.n	8003db8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0220 	mvn.w	r2, #32
 8003db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fda0 	bl	80048f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e0ae      	b.n	8003f3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b0c      	cmp	r3, #12
 8003dea:	f200 809f 	bhi.w	8003f2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003e29 	.word	0x08003e29
 8003df8:	08003f2d 	.word	0x08003f2d
 8003dfc:	08003f2d 	.word	0x08003f2d
 8003e00:	08003f2d 	.word	0x08003f2d
 8003e04:	08003e69 	.word	0x08003e69
 8003e08:	08003f2d 	.word	0x08003f2d
 8003e0c:	08003f2d 	.word	0x08003f2d
 8003e10:	08003f2d 	.word	0x08003f2d
 8003e14:	08003eab 	.word	0x08003eab
 8003e18:	08003f2d 	.word	0x08003f2d
 8003e1c:	08003f2d 	.word	0x08003f2d
 8003e20:	08003f2d 	.word	0x08003f2d
 8003e24:	08003eeb 	.word	0x08003eeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fa24 	bl	800427c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0208 	orr.w	r2, r2, #8
 8003e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6999      	ldr	r1, [r3, #24]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	691a      	ldr	r2, [r3, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	619a      	str	r2, [r3, #24]
      break;
 8003e66:	e064      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fa74 	bl	800435c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6999      	ldr	r1, [r3, #24]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	021a      	lsls	r2, r3, #8
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	619a      	str	r2, [r3, #24]
      break;
 8003ea8:	e043      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fac9 	bl	8004448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	69da      	ldr	r2, [r3, #28]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0208 	orr.w	r2, r2, #8
 8003ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0204 	bic.w	r2, r2, #4
 8003ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69d9      	ldr	r1, [r3, #28]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	61da      	str	r2, [r3, #28]
      break;
 8003ee8:	e023      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68b9      	ldr	r1, [r7, #8]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fb1d 	bl	8004530 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69da      	ldr	r2, [r3, #28]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	69da      	ldr	r2, [r3, #28]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69d9      	ldr	r1, [r3, #28]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	021a      	lsls	r2, r3, #8
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	61da      	str	r2, [r3, #28]
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIM_ConfigClockSource+0x1c>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e0b4      	b.n	80040ca <HAL_TIM_ConfigClockSource+0x186>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f98:	d03e      	beq.n	8004018 <HAL_TIM_ConfigClockSource+0xd4>
 8003f9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9e:	f200 8087 	bhi.w	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	f000 8086 	beq.w	80040b6 <HAL_TIM_ConfigClockSource+0x172>
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	d87f      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb0:	2b70      	cmp	r3, #112	; 0x70
 8003fb2:	d01a      	beq.n	8003fea <HAL_TIM_ConfigClockSource+0xa6>
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d87b      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb8:	2b60      	cmp	r3, #96	; 0x60
 8003fba:	d050      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x11a>
 8003fbc:	2b60      	cmp	r3, #96	; 0x60
 8003fbe:	d877      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b50      	cmp	r3, #80	; 0x50
 8003fc2:	d03c      	beq.n	800403e <HAL_TIM_ConfigClockSource+0xfa>
 8003fc4:	2b50      	cmp	r3, #80	; 0x50
 8003fc6:	d873      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b40      	cmp	r3, #64	; 0x40
 8003fca:	d058      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x13a>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d86f      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b30      	cmp	r3, #48	; 0x30
 8003fd2:	d064      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fd4:	2b30      	cmp	r3, #48	; 0x30
 8003fd6:	d86b      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d060      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d867      	bhi.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d05c      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b10      	cmp	r3, #16
 8003fe6:	d05a      	beq.n	800409e <HAL_TIM_ConfigClockSource+0x15a>
 8003fe8:	e062      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ffa:	f000 fb69 	bl	80046d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800400c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	609a      	str	r2, [r3, #8]
      break;
 8004016:	e04f      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	f000 fb52 	bl	80046d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800403a:	609a      	str	r2, [r3, #8]
      break;
 800403c:	e03c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	461a      	mov	r2, r3
 800404c:	f000 fac6 	bl	80045dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2150      	movs	r1, #80	; 0x50
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fb1f 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 800405c:	e02c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800406a:	461a      	mov	r2, r3
 800406c:	f000 fae5 	bl	800463a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2160      	movs	r1, #96	; 0x60
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fb0f 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 800407c:	e01c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	461a      	mov	r2, r3
 800408c:	f000 faa6 	bl	80045dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2140      	movs	r1, #64	; 0x40
 8004096:	4618      	mov	r0, r3
 8004098:	f000 faff 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 800409c:	e00c      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4619      	mov	r1, r3
 80040a8:	4610      	mov	r0, r2
 80040aa:	f000 faf6 	bl	800469a <TIM_ITRx_SetConfig>
      break;
 80040ae:	e003      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      break;
 80040b4:	e000      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a46      	ldr	r2, [pc, #280]	; (8004250 <TIM_Base_SetConfig+0x12c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004142:	d00f      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a43      	ldr	r2, [pc, #268]	; (8004254 <TIM_Base_SetConfig+0x130>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00b      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a42      	ldr	r2, [pc, #264]	; (8004258 <TIM_Base_SetConfig+0x134>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d007      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a41      	ldr	r2, [pc, #260]	; (800425c <TIM_Base_SetConfig+0x138>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a40      	ldr	r2, [pc, #256]	; (8004260 <TIM_Base_SetConfig+0x13c>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d108      	bne.n	8004176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a35      	ldr	r2, [pc, #212]	; (8004250 <TIM_Base_SetConfig+0x12c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d02b      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004184:	d027      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a32      	ldr	r2, [pc, #200]	; (8004254 <TIM_Base_SetConfig+0x130>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d023      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a31      	ldr	r2, [pc, #196]	; (8004258 <TIM_Base_SetConfig+0x134>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d01f      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a30      	ldr	r2, [pc, #192]	; (800425c <TIM_Base_SetConfig+0x138>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01b      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2f      	ldr	r2, [pc, #188]	; (8004260 <TIM_Base_SetConfig+0x13c>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d017      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2e      	ldr	r2, [pc, #184]	; (8004264 <TIM_Base_SetConfig+0x140>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2d      	ldr	r2, [pc, #180]	; (8004268 <TIM_Base_SetConfig+0x144>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d00f      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2c      	ldr	r2, [pc, #176]	; (800426c <TIM_Base_SetConfig+0x148>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <TIM_Base_SetConfig+0x14c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2a      	ldr	r2, [pc, #168]	; (8004274 <TIM_Base_SetConfig+0x150>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a29      	ldr	r2, [pc, #164]	; (8004278 <TIM_Base_SetConfig+0x154>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d108      	bne.n	80041e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a10      	ldr	r2, [pc, #64]	; (8004250 <TIM_Base_SetConfig+0x12c>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <TIM_Base_SetConfig+0xf8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a12      	ldr	r2, [pc, #72]	; (8004260 <TIM_Base_SetConfig+0x13c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d103      	bne.n	8004224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b01      	cmp	r3, #1
 8004234:	d105      	bne.n	8004242 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f023 0201 	bic.w	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	611a      	str	r2, [r3, #16]
  }
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40010000 	.word	0x40010000
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40010400 	.word	0x40010400
 8004264:	40014000 	.word	0x40014000
 8004268:	40014400 	.word	0x40014400
 800426c:	40014800 	.word	0x40014800
 8004270:	40001800 	.word	0x40001800
 8004274:	40001c00 	.word	0x40001c00
 8004278:	40002000 	.word	0x40002000

0800427c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	f023 0201 	bic.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0303 	bic.w	r3, r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0302 	bic.w	r3, r3, #2
 80042c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a20      	ldr	r2, [pc, #128]	; (8004354 <TIM_OC1_SetConfig+0xd8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <TIM_OC1_SetConfig+0x64>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1f      	ldr	r2, [pc, #124]	; (8004358 <TIM_OC1_SetConfig+0xdc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10c      	bne.n	80042fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0308 	bic.w	r3, r3, #8
 80042e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <TIM_OC1_SetConfig+0xd8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC1_SetConfig+0x8e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a14      	ldr	r2, [pc, #80]	; (8004358 <TIM_OC1_SetConfig+0xdc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d111      	bne.n	800432e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	40010000 	.word	0x40010000
 8004358:	40010400 	.word	0x40010400

0800435c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	f023 0210 	bic.w	r2, r3, #16
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 0320 	bic.w	r3, r3, #32
 80043a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a22      	ldr	r2, [pc, #136]	; (8004440 <TIM_OC2_SetConfig+0xe4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_OC2_SetConfig+0x68>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a21      	ldr	r2, [pc, #132]	; (8004444 <TIM_OC2_SetConfig+0xe8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10d      	bne.n	80043e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <TIM_OC2_SetConfig+0xe4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_OC2_SetConfig+0x94>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <TIM_OC2_SetConfig+0xe8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d113      	bne.n	8004418 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40010000 	.word	0x40010000
 8004444:	40010400 	.word	0x40010400

08004448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	021b      	lsls	r3, r3, #8
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a21      	ldr	r2, [pc, #132]	; (8004528 <TIM_OC3_SetConfig+0xe0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d003      	beq.n	80044ae <TIM_OC3_SetConfig+0x66>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a20      	ldr	r2, [pc, #128]	; (800452c <TIM_OC3_SetConfig+0xe4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d10d      	bne.n	80044ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <TIM_OC3_SetConfig+0xe0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d003      	beq.n	80044da <TIM_OC3_SetConfig+0x92>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a15      	ldr	r2, [pc, #84]	; (800452c <TIM_OC3_SetConfig+0xe4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d113      	bne.n	8004502 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010000 	.word	0x40010000
 800452c:	40010400 	.word	0x40010400

08004530 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800457a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	031b      	lsls	r3, r3, #12
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a12      	ldr	r2, [pc, #72]	; (80045d4 <TIM_OC4_SetConfig+0xa4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_OC4_SetConfig+0x68>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a11      	ldr	r2, [pc, #68]	; (80045d8 <TIM_OC4_SetConfig+0xa8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d109      	bne.n	80045ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40010400 	.word	0x40010400

080045dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f023 0201 	bic.w	r2, r3, #1
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f023 030a 	bic.w	r3, r3, #10
 8004618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	621a      	str	r2, [r3, #32]
}
 800462e:	bf00      	nop
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800463a:	b480      	push	{r7}
 800463c:	b087      	sub	sp, #28
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f023 0210 	bic.w	r2, r3, #16
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	031b      	lsls	r3, r3, #12
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004676:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	621a      	str	r2, [r3, #32]
}
 800468e:	bf00      	nop
 8004690:	371c      	adds	r7, #28
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f043 0307 	orr.w	r3, r3, #7
 80046bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	609a      	str	r2, [r3, #8]
}
 80046c4:	bf00      	nop
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	021a      	lsls	r2, r3, #8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	f003 031f 	and.w	r3, r3, #31
 8004722:	2201      	movs	r2, #1
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1a      	ldr	r2, [r3, #32]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	43db      	mvns	r3, r3
 8004732:	401a      	ands	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1a      	ldr	r2, [r3, #32]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	fa01 f303 	lsl.w	r3, r1, r3
 8004748:	431a      	orrs	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004770:	2302      	movs	r3, #2
 8004772:	e05a      	b.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a21      	ldr	r2, [pc, #132]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d022      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d01d      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1d      	ldr	r2, [pc, #116]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d018      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1b      	ldr	r2, [pc, #108]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d013      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00e      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a18      	ldr	r2, [pc, #96]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d009      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a17      	ldr	r2, [pc, #92]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d004      	beq.n	80047fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d10c      	bne.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	4313      	orrs	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800

08004854 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800486c:	2302      	movs	r3, #2
 800486e:	e03d      	b.n	80048ec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e04d      	b.n	80049ce <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d111      	bne.n	8004962 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fc90 	bl	800526c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	2b00      	cmp	r3, #0
 8004952:	d102      	bne.n	800495a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <HAL_UART_Init+0xb8>)
 8004958:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2224      	movs	r2, #36	; 0x24
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004978:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f001 f8ac 	bl	8005ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800498e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800499e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049ae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	08001229 	.word	0x08001229

080049dc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	460b      	mov	r3, r1
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f8:	f043 0220 	orr.w	r2, r3, #32
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e07c      	b.n	8004afe <HAL_UART_RegisterCallback+0x122>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d150      	bne.n	8004ab2 <HAL_UART_RegisterCallback+0xd6>
  {
    switch (CallbackID)
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	2b0c      	cmp	r3, #12
 8004a14:	d844      	bhi.n	8004aa0 <HAL_UART_RegisterCallback+0xc4>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <HAL_UART_RegisterCallback+0x40>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a51 	.word	0x08004a51
 8004a20:	08004a59 	.word	0x08004a59
 8004a24:	08004a61 	.word	0x08004a61
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a79 	.word	0x08004a79
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a89 	.word	0x08004a89
 8004a3c:	08004aa1 	.word	0x08004aa1
 8004a40:	08004aa1 	.word	0x08004aa1
 8004a44:	08004aa1 	.word	0x08004aa1
 8004a48:	08004a91 	.word	0x08004a91
 8004a4c:	08004a99 	.word	0x08004a99
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004a56:	e051      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8004a5e:	e04d      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004a66:	e049      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8004a6e:	e045      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004a76:	e041      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004a7e:	e03d      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004a86:	e039      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8004a8e:	e035      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004a96:	e031      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004a9e:	e02d      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75fb      	strb	r3, [r7, #23]
        break;
 8004ab0:	e024      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d116      	bne.n	8004aec <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8004abe:	7afb      	ldrb	r3, [r7, #11]
 8004ac0:	2b0b      	cmp	r3, #11
 8004ac2:	d002      	beq.n	8004aca <HAL_UART_RegisterCallback+0xee>
 8004ac4:	2b0c      	cmp	r3, #12
 8004ac6:	d004      	beq.n	8004ad2 <HAL_UART_RegisterCallback+0xf6>
 8004ac8:	e007      	b.n	8004ada <HAL_UART_RegisterCallback+0xfe>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004ad0:	e014      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8004ad8:	e010      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
        break;
 8004aea:	e007      	b.n	8004afc <HAL_UART_RegisterCallback+0x120>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	371c      	adds	r7, #28
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop

08004b0c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d112      	bne.n	8004b4c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_UART_Receive_IT+0x26>
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e00b      	b.n	8004b4e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b3c:	88fb      	ldrh	r3, [r7, #6]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fd2a 	bl	800559c <UART_Start_Receive_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	e000      	b.n	8004b4e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08c      	sub	sp, #48	; 0x30
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b20      	cmp	r3, #32
 8004b70:	d156      	bne.n	8004c20 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_UART_Transmit_DMA+0x26>
 8004b78:	88fb      	ldrh	r3, [r7, #6]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e04f      	b.n	8004c22 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2221      	movs	r2, #33	; 0x21
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <HAL_UART_Transmit_DMA+0xd4>)
 8004ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <HAL_UART_Transmit_DMA+0xd8>)
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_UART_Transmit_DMA+0xdc>)
 8004bb8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	6819      	ldr	r1, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	f7fc ff75 	bl	8001ac8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004be6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c08:	627a      	str	r2, [r7, #36]	; 0x24
 8004c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6a39      	ldr	r1, [r7, #32]
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3730      	adds	r7, #48	; 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	080052dd 	.word	0x080052dd
 8004c30:	08005379 	.word	0x08005379
 8004c34:	08005507 	.word	0x08005507

08004c38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d112      	bne.n	8004c78 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_UART_Receive_DMA+0x26>
 8004c58:	88fb      	ldrh	r3, [r7, #6]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e00b      	b.n	8004c7a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fcce 	bl	8005610 <UART_Start_Receive_DMA>
 8004c74:	4603      	mov	r3, r0
 8004c76:	e000      	b.n	8004c7a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c78:	2302      	movs	r3, #2
  }
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
	...

08004c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b0ba      	sub	sp, #232	; 0xe8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004caa:	2300      	movs	r3, #0
 8004cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10f      	bne.n	8004cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <HAL_UART_IRQHandler+0x66>
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fe37 	bl	8005956 <UART_Receive_IT>
      return;
 8004ce8:	e260      	b.n	80051ac <HAL_UART_IRQHandler+0x528>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80e1 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x232>
 8004cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 80d4 	beq.w	8004eb6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_UART_IRQHandler+0xae>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f043 0201 	orr.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_UART_IRQHandler+0xd2>
 8004d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	f043 0202 	orr.w	r2, r3, #2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xf6>
 8004d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d72:	f043 0204 	orr.w	r2, r3, #4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d011      	beq.n	8004daa <HAL_UART_IRQHandler+0x126>
 8004d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d105      	bne.n	8004d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0208 	orr.w	r2, r3, #8
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 81f7 	beq.w	80051a2 <HAL_UART_IRQHandler+0x51e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x14e>
 8004dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fdc2 	bl	8005956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <HAL_UART_IRQHandler+0x17a>
 8004df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d051      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fcc8 	bl	8005794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d142      	bne.n	8004e98 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3314      	adds	r3, #20
 8004e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3314      	adds	r3, #20
 8004e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1d9      	bne.n	8004e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d013      	beq.n	8004e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	4a80      	ldr	r2, [pc, #512]	; (800506c <HAL_UART_IRQHandler+0x3e8>)
 8004e6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fc fef0 	bl	8001c58 <HAL_DMA_Abort_IT>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d019      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8c:	e011      	b.n	8004eb2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e96:	e00c      	b.n	8004eb2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e007      	b.n	8004eb2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004eb0:	e177      	b.n	80051a2 <HAL_UART_IRQHandler+0x51e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb2:	bf00      	nop
    return;
 8004eb4:	e175      	b.n	80051a2 <HAL_UART_IRQHandler+0x51e>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	f040 8151 	bne.w	8005162 <HAL_UART_IRQHandler+0x4de>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 814a 	beq.w	8005162 <HAL_UART_IRQHandler+0x4de>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8143 	beq.w	8005162 <HAL_UART_IRQHandler+0x4de>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	f040 80b7 	bne.w	8005070 <HAL_UART_IRQHandler+0x3ec>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8147 	beq.w	80051a6 <HAL_UART_IRQHandler+0x522>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f20:	429a      	cmp	r2, r3
 8004f22:	f080 8140 	bcs.w	80051a6 <HAL_UART_IRQHandler+0x522>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f2c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f38:	f000 8088 	beq.w	800504c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1d9      	bne.n	8004f3c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3314      	adds	r3, #20
 8004f8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f9a:	f023 0301 	bic.w	r3, r3, #1
 8004f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3314      	adds	r3, #20
 8004fa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e1      	bne.n	8004f88 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3314      	adds	r3, #20
 8004fca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004fe8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ff6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e3      	bne.n	8004fc4 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	330c      	adds	r3, #12
 8005010:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	f023 0310 	bic.w	r3, r3, #16
 8005020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800502e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005030:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005034:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800503c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e3      	bne.n	800500a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	4618      	mov	r0, r3
 8005048:	f7fc fd96 	bl	8001b78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800505e:	b292      	uxth	r2, r2
 8005060:	1a8a      	subs	r2, r1, r2
 8005062:	b292      	uxth	r2, r2
 8005064:	4611      	mov	r1, r2
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800506a:	e09c      	b.n	80051a6 <HAL_UART_IRQHandler+0x522>
 800506c:	0800585b 	.word	0x0800585b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005078:	b29b      	uxth	r3, r3
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 808f 	beq.w	80051aa <HAL_UART_IRQHandler+0x526>
          && (nb_rx_data > 0U))
 800508c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 808a 	beq.w	80051aa <HAL_UART_IRQHandler+0x526>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	330c      	adds	r3, #12
 80050b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050ba:	647a      	str	r2, [r7, #68]	; 0x44
 80050bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e3      	bne.n	8005096 <HAL_UART_IRQHandler+0x412>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3314      	adds	r3, #20
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	623b      	str	r3, [r7, #32]
   return(result);
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050f2:	633a      	str	r2, [r7, #48]	; 0x30
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e3      	bne.n	80050ce <HAL_UART_IRQHandler+0x44a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	60fb      	str	r3, [r7, #12]
   return(result);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0310 	bic.w	r3, r3, #16
 800512a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005138:	61fa      	str	r2, [r7, #28]
 800513a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	69b9      	ldr	r1, [r7, #24]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	617b      	str	r3, [r7, #20]
   return(result);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e3      	bne.n	8005114 <HAL_UART_IRQHandler+0x490>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	635a      	str	r2, [r3, #52]	; 0x34

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005156:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800515a:	4611      	mov	r1, r2
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005160:	e023      	b.n	80051aa <HAL_UART_IRQHandler+0x526>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_UART_IRQHandler+0x4fe>
 800516e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_UART_IRQHandler+0x4fe>
  {
    UART_Transmit_IT(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fb82 	bl	8005884 <UART_Transmit_IT>
    return;
 8005180:	e014      	b.n	80051ac <HAL_UART_IRQHandler+0x528>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00e      	beq.n	80051ac <HAL_UART_IRQHandler+0x528>
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fbc2 	bl	8005924 <UART_EndTransmit_IT>
    return;
 80051a0:	e004      	b.n	80051ac <HAL_UART_IRQHandler+0x528>
    return;
 80051a2:	bf00      	nop
 80051a4:	e002      	b.n	80051ac <HAL_UART_IRQHandler+0x528>
      return;
 80051a6:	bf00      	nop
 80051a8:	e000      	b.n	80051ac <HAL_UART_IRQHandler+0x528>
      return;
 80051aa:	bf00      	nop
  }
}
 80051ac:	37e8      	adds	r7, #232	; 0xe8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop

080051b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a10      	ldr	r2, [pc, #64]	; (80052b8 <UART_InitCallbacksToDefault+0x4c>)
 8005278:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a0f      	ldr	r2, [pc, #60]	; (80052bc <UART_InitCallbacksToDefault+0x50>)
 800527e:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a0f      	ldr	r2, [pc, #60]	; (80052c0 <UART_InitCallbacksToDefault+0x54>)
 8005284:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a0e      	ldr	r2, [pc, #56]	; (80052c4 <UART_InitCallbacksToDefault+0x58>)
 800528a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a0e      	ldr	r2, [pc, #56]	; (80052c8 <UART_InitCallbacksToDefault+0x5c>)
 8005290:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a0d      	ldr	r2, [pc, #52]	; (80052cc <UART_InitCallbacksToDefault+0x60>)
 8005296:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <UART_InitCallbacksToDefault+0x64>)
 800529c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <UART_InitCallbacksToDefault+0x68>)
 80052a2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a0c      	ldr	r2, [pc, #48]	; (80052d8 <UART_InitCallbacksToDefault+0x6c>)
 80052a8:	66da      	str	r2, [r3, #108]	; 0x6c

}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	080051c9 	.word	0x080051c9
 80052bc:	080051b5 	.word	0x080051b5
 80052c0:	080051f1 	.word	0x080051f1
 80052c4:	080051dd 	.word	0x080051dd
 80052c8:	08005205 	.word	0x08005205
 80052cc:	08005219 	.word	0x08005219
 80052d0:	0800522d 	.word	0x0800522d
 80052d4:	08005241 	.word	0x08005241
 80052d8:	08005255 	.word	0x08005255

080052dc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b090      	sub	sp, #64	; 0x40
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d137      	bne.n	8005368 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80052f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fa:	2200      	movs	r2, #0
 80052fc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	623b      	str	r3, [r7, #32]
   return(result);
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005314:	63bb      	str	r3, [r7, #56]	; 0x38
 8005316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531e:	633a      	str	r2, [r7, #48]	; 0x30
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e5      	bne.n	80052fe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	60fb      	str	r3, [r7, #12]
   return(result);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005348:	637b      	str	r3, [r7, #52]	; 0x34
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005352:	61fa      	str	r2, [r7, #28]
 8005354:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	69b9      	ldr	r1, [r7, #24]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	617b      	str	r3, [r7, #20]
   return(result);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e5      	bne.n	8005332 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005366:	e003      	b.n	8005370 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8005368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800536e:	4798      	blx	r3
}
 8005370:	bf00      	nop
 8005372:	3740      	adds	r7, #64	; 0x40
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b09c      	sub	sp, #112	; 0x70
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d172      	bne.n	8005498 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	2200      	movs	r2, #0
 80053b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80053da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3314      	adds	r3, #20
 80053f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fe:	f023 0301 	bic.w	r3, r3, #1
 8005402:	667b      	str	r3, [r7, #100]	; 0x64
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3314      	adds	r3, #20
 800540a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800540c:	647a      	str	r2, [r7, #68]	; 0x44
 800540e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	623b      	str	r3, [r7, #32]
   return(result);
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005436:	663b      	str	r3, [r7, #96]	; 0x60
 8005438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005440:	633a      	str	r2, [r7, #48]	; 0x30
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800545c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005460:	2b01      	cmp	r3, #1
 8005462:	d119      	bne.n	8005498 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	330c      	adds	r3, #12
 800546a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	e853 3f00 	ldrex	r3, [r3]
 8005472:	60fb      	str	r3, [r7, #12]
   return(result);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0310 	bic.w	r3, r3, #16
 800547a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800547c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005484:	61fa      	str	r2, [r7, #28]
 8005486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	69fa      	ldr	r2, [r7, #28]
 800548c:	e841 2300 	strex	r3, r2, [r1]
 8005490:	617b      	str	r3, [r7, #20]
   return(result);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e5      	bne.n	8005464 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800549a:	2200      	movs	r2, #0
 800549c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800549e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d107      	bne.n	80054b6 <UART_DMAReceiveCplt+0x120>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80054a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054ac:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80054ae:	4611      	mov	r1, r2
 80054b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054b2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054b4:	e003      	b.n	80054be <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80054b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054bc:	4798      	blx	r3
}
 80054be:	bf00      	nop
 80054c0:	3770      	adds	r7, #112	; 0x70
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d109      	bne.n	80054f6 <UART_DMARxHalfCplt+0x30>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80054ea:	0852      	lsrs	r2, r2, #1
 80054ec:	b292      	uxth	r2, r2
 80054ee:	4611      	mov	r1, r2
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054f4:	e003      	b.n	80054fe <UART_DMARxHalfCplt+0x38>
    huart->RxHalfCpltCallback(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	4798      	blx	r3
}
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	bf0c      	ite	eq
 8005526:	2301      	moveq	r3, #1
 8005528:	2300      	movne	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b21      	cmp	r3, #33	; 0x21
 8005538:	d108      	bne.n	800554c <UART_DMAError+0x46>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005546:	68b8      	ldr	r0, [r7, #8]
 8005548:	f000 f8fc 	bl	8005744 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	bf0c      	ite	eq
 800555a:	2301      	moveq	r3, #1
 800555c:	2300      	movne	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b22      	cmp	r3, #34	; 0x22
 800556c:	d108      	bne.n	8005580 <UART_DMAError+0x7a>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d005      	beq.n	8005580 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800557a:	68b8      	ldr	r0, [r7, #8]
 800557c:	f000 f90a 	bl	8005794 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005584:	f043 0210 	orr.w	r2, r3, #16
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005590:	68b8      	ldr	r0, [r7, #8]
 8005592:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	88fa      	ldrh	r2, [r7, #6]
 80055b4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	88fa      	ldrh	r2, [r7, #6]
 80055ba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2222      	movs	r2, #34	; 0x22
 80055c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f042 0201 	orr.w	r2, r2, #1
 80055f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0220 	orr.w	r2, r2, #32
 8005600:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b098      	sub	sp, #96	; 0x60
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	88fa      	ldrh	r2, [r7, #6]
 8005628:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2222      	movs	r2, #34	; 0x22
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563c:	4a3e      	ldr	r2, [pc, #248]	; (8005738 <UART_Start_Receive_DMA+0x128>)
 800563e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	4a3d      	ldr	r2, [pc, #244]	; (800573c <UART_Start_Receive_DMA+0x12c>)
 8005646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564c:	4a3c      	ldr	r2, [pc, #240]	; (8005740 <UART_Start_Receive_DMA+0x130>)
 800564e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005654:	2200      	movs	r2, #0
 8005656:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005658:	f107 0308 	add.w	r3, r7, #8
 800565c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3304      	adds	r3, #4
 8005668:	4619      	mov	r1, r3
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	88fb      	ldrh	r3, [r7, #6]
 8005670:	f7fc fa2a 	bl	8001ac8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	613b      	str	r3, [r7, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d019      	beq.n	80056c6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	330c      	adds	r3, #12
 8005698:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	330c      	adds	r3, #12
 80056b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80056b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80056b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80056c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3314      	adds	r3, #20
 80056cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	657b      	str	r3, [r7, #84]	; 0x54
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80056e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80056ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e5      	bne.n	80056c6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3314      	adds	r3, #20
 8005700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	617b      	str	r3, [r7, #20]
   return(result);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005710:	653b      	str	r3, [r7, #80]	; 0x50
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3314      	adds	r3, #20
 8005718:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800571a:	627a      	str	r2, [r7, #36]	; 0x24
 800571c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6a39      	ldr	r1, [r7, #32]
 8005720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	61fb      	str	r3, [r7, #28]
   return(result);
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e5      	bne.n	80056fa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3760      	adds	r7, #96	; 0x60
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	08005397 	.word	0x08005397
 800573c:	080054c7 	.word	0x080054c7
 8005740:	08005507 	.word	0x08005507

08005744 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005744:	b480      	push	{r7}
 8005746:	b089      	sub	sp, #36	; 0x24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	60bb      	str	r3, [r7, #8]
   return(result);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	330c      	adds	r3, #12
 800576a:	69fa      	ldr	r2, [r7, #28]
 800576c:	61ba      	str	r2, [r7, #24]
 800576e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6979      	ldr	r1, [r7, #20]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	613b      	str	r3, [r7, #16]
   return(result);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e5      	bne.n	800574c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005788:	bf00      	nop
 800578a:	3724      	adds	r7, #36	; 0x24
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005794:	b480      	push	{r7}
 8005796:	b095      	sub	sp, #84	; 0x54
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	330c      	adds	r3, #12
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057bc:	643a      	str	r2, [r7, #64]	; 0x40
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e5      	bne.n	800579c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3314      	adds	r3, #20
 80057d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f023 0301 	bic.w	r3, r3, #1
 80057e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3314      	adds	r3, #20
 80057ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e5      	bne.n	80057d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005808:	2b01      	cmp	r3, #1
 800580a:	d119      	bne.n	8005840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	60bb      	str	r3, [r7, #8]
   return(result);
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f023 0310 	bic.w	r3, r3, #16
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800582c:	61ba      	str	r2, [r7, #24]
 800582e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6979      	ldr	r1, [r7, #20]
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	613b      	str	r3, [r7, #16]
   return(result);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e5      	bne.n	800580c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800584e:	bf00      	nop
 8005850:	3754      	adds	r7, #84	; 0x54
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800587c:	bf00      	nop
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b21      	cmp	r3, #33	; 0x21
 8005896:	d13e      	bne.n	8005916 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a0:	d114      	bne.n	80058cc <UART_Transmit_IT+0x48>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d110      	bne.n	80058cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	1c9a      	adds	r2, r3, #2
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	621a      	str	r2, [r3, #32]
 80058ca:	e008      	b.n	80058de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	1c59      	adds	r1, r3, #1
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6211      	str	r1, [r2, #32]
 80058d6:	781a      	ldrb	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	4619      	mov	r1, r3
 80058ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10f      	bne.n	8005912 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005900:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005910:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	e000      	b.n	8005918 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
  }
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3708      	adds	r7, #8
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}

08005956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b08c      	sub	sp, #48	; 0x30
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b22      	cmp	r3, #34	; 0x22
 8005968:	f040 80b0 	bne.w	8005acc <UART_Receive_IT+0x176>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	d117      	bne.n	80059a6 <UART_Receive_IT+0x50>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d113      	bne.n	80059a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800597e:	2300      	movs	r3, #0
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005994:	b29a      	uxth	r2, r3
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599e:	1c9a      	adds	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	629a      	str	r2, [r3, #40]	; 0x28
 80059a4:	e026      	b.n	80059f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b8:	d007      	beq.n	80059ca <UART_Receive_IT+0x74>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <UART_Receive_IT+0x82>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	e008      	b.n	80059ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4619      	mov	r1, r3
 8005a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d15f      	bne.n	8005ac8 <UART_Receive_IT+0x172>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0220 	bic.w	r2, r2, #32
 8005a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d136      	bne.n	8005abc <UART_Receive_IT+0x166>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	330c      	adds	r3, #12
 8005a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	613b      	str	r3, [r7, #16]
   return(result);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 0310 	bic.w	r3, r3, #16
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	623a      	str	r2, [r7, #32]
 8005a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	69f9      	ldr	r1, [r7, #28]
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e5      	bne.n	8005a54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b10      	cmp	r3, #16
 8005a94:	d10a      	bne.n	8005aac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005ab4:	4611      	mov	r1, r2
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
 8005aba:	e003      	b.n	8005ac4 <UART_Receive_IT+0x16e>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e002      	b.n	8005ace <UART_Receive_IT+0x178>
    }
    return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e000      	b.n	8005ace <UART_Receive_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 8005acc:	2302      	movs	r3, #2
  }
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3730      	adds	r7, #48	; 0x30
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005adc:	b0c0      	sub	sp, #256	; 0x100
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	68d9      	ldr	r1, [r3, #12]
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	ea40 0301 	orr.w	r3, r0, r1
 8005b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	431a      	orrs	r2, r3
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b30:	f021 010c 	bic.w	r1, r1, #12
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	6999      	ldr	r1, [r3, #24]
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	ea40 0301 	orr.w	r3, r0, r1
 8005b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	4b8f      	ldr	r3, [pc, #572]	; (8005da4 <UART_SetConfig+0x2cc>)
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d005      	beq.n	8005b78 <UART_SetConfig+0xa0>
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b8d      	ldr	r3, [pc, #564]	; (8005da8 <UART_SetConfig+0x2d0>)
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d104      	bne.n	8005b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b78:	f7fd fd9e 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 8005b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b80:	e003      	b.n	8005b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b82:	f7fd fd85 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8005b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8e:	69db      	ldr	r3, [r3, #28]
 8005b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b94:	f040 810c 	bne.w	8005db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005baa:	4622      	mov	r2, r4
 8005bac:	462b      	mov	r3, r5
 8005bae:	1891      	adds	r1, r2, r2
 8005bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bb2:	415b      	adcs	r3, r3
 8005bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bba:	4621      	mov	r1, r4
 8005bbc:	eb12 0801 	adds.w	r8, r2, r1
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	eb43 0901 	adc.w	r9, r3, r1
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	f04f 0300 	mov.w	r3, #0
 8005bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bda:	4690      	mov	r8, r2
 8005bdc:	4699      	mov	r9, r3
 8005bde:	4623      	mov	r3, r4
 8005be0:	eb18 0303 	adds.w	r3, r8, r3
 8005be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005be8:	462b      	mov	r3, r5
 8005bea:	eb49 0303 	adc.w	r3, r9, r3
 8005bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c06:	460b      	mov	r3, r1
 8005c08:	18db      	adds	r3, r3, r3
 8005c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	eb42 0303 	adc.w	r3, r2, r3
 8005c12:	657b      	str	r3, [r7, #84]	; 0x54
 8005c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c1c:	f7fa faee 	bl	80001fc <__aeabi_uldivmod>
 8005c20:	4602      	mov	r2, r0
 8005c22:	460b      	mov	r3, r1
 8005c24:	4b61      	ldr	r3, [pc, #388]	; (8005dac <UART_SetConfig+0x2d4>)
 8005c26:	fba3 2302 	umull	r2, r3, r3, r2
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	011c      	lsls	r4, r3, #4
 8005c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c40:	4642      	mov	r2, r8
 8005c42:	464b      	mov	r3, r9
 8005c44:	1891      	adds	r1, r2, r2
 8005c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c48:	415b      	adcs	r3, r3
 8005c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c50:	4641      	mov	r1, r8
 8005c52:	eb12 0a01 	adds.w	sl, r2, r1
 8005c56:	4649      	mov	r1, r9
 8005c58:	eb43 0b01 	adc.w	fp, r3, r1
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c70:	4692      	mov	sl, r2
 8005c72:	469b      	mov	fp, r3
 8005c74:	4643      	mov	r3, r8
 8005c76:	eb1a 0303 	adds.w	r3, sl, r3
 8005c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	eb4b 0303 	adc.w	r3, fp, r3
 8005c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	18db      	adds	r3, r3, r3
 8005ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	eb42 0303 	adc.w	r3, r2, r3
 8005ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8005caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cb2:	f7fa faa3 	bl	80001fc <__aeabi_uldivmod>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4b3b      	ldr	r3, [pc, #236]	; (8005dac <UART_SetConfig+0x2d4>)
 8005cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	2264      	movs	r2, #100	; 0x64
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	1acb      	subs	r3, r1, r3
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cd2:	4b36      	ldr	r3, [pc, #216]	; (8005dac <UART_SetConfig+0x2d4>)
 8005cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ce0:	441c      	add	r4, r3
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	1891      	adds	r1, r2, r2
 8005cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cfc:	415b      	adcs	r3, r3
 8005cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d04:	4641      	mov	r1, r8
 8005d06:	1851      	adds	r1, r2, r1
 8005d08:	6339      	str	r1, [r7, #48]	; 0x30
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	414b      	adcs	r3, r1
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d1c:	4659      	mov	r1, fp
 8005d1e:	00cb      	lsls	r3, r1, #3
 8005d20:	4651      	mov	r1, sl
 8005d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d26:	4651      	mov	r1, sl
 8005d28:	00ca      	lsls	r2, r1, #3
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4642      	mov	r2, r8
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d38:	464b      	mov	r3, r9
 8005d3a:	460a      	mov	r2, r1
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d58:	460b      	mov	r3, r1
 8005d5a:	18db      	adds	r3, r3, r3
 8005d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d5e:	4613      	mov	r3, r2
 8005d60:	eb42 0303 	adc.w	r3, r2, r3
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d6e:	f7fa fa45 	bl	80001fc <__aeabi_uldivmod>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <UART_SetConfig+0x2d4>)
 8005d78:	fba3 1302 	umull	r1, r3, r3, r2
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	2164      	movs	r1, #100	; 0x64
 8005d80:	fb01 f303 	mul.w	r3, r1, r3
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	3332      	adds	r3, #50	; 0x32
 8005d8a:	4a08      	ldr	r2, [pc, #32]	; (8005dac <UART_SetConfig+0x2d4>)
 8005d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	f003 0207 	and.w	r2, r3, #7
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4422      	add	r2, r4
 8005d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005da0:	e106      	b.n	8005fb0 <UART_SetConfig+0x4d8>
 8005da2:	bf00      	nop
 8005da4:	40011000 	.word	0x40011000
 8005da8:	40011400 	.word	0x40011400
 8005dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	1891      	adds	r1, r2, r2
 8005dc8:	6239      	str	r1, [r7, #32]
 8005dca:	415b      	adcs	r3, r3
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dd2:	4641      	mov	r1, r8
 8005dd4:	1854      	adds	r4, r2, r1
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	eb43 0501 	adc.w	r5, r3, r1
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	00eb      	lsls	r3, r5, #3
 8005de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dea:	00e2      	lsls	r2, r4, #3
 8005dec:	4614      	mov	r4, r2
 8005dee:	461d      	mov	r5, r3
 8005df0:	4643      	mov	r3, r8
 8005df2:	18e3      	adds	r3, r4, r3
 8005df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005df8:	464b      	mov	r3, r9
 8005dfa:	eb45 0303 	adc.w	r3, r5, r3
 8005dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e1e:	4629      	mov	r1, r5
 8005e20:	008b      	lsls	r3, r1, #2
 8005e22:	4621      	mov	r1, r4
 8005e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e28:	4621      	mov	r1, r4
 8005e2a:	008a      	lsls	r2, r1, #2
 8005e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e30:	f7fa f9e4 	bl	80001fc <__aeabi_uldivmod>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4b60      	ldr	r3, [pc, #384]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	011c      	lsls	r4, r3, #4
 8005e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e46:	2200      	movs	r2, #0
 8005e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e54:	4642      	mov	r2, r8
 8005e56:	464b      	mov	r3, r9
 8005e58:	1891      	adds	r1, r2, r2
 8005e5a:	61b9      	str	r1, [r7, #24]
 8005e5c:	415b      	adcs	r3, r3
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e64:	4641      	mov	r1, r8
 8005e66:	1851      	adds	r1, r2, r1
 8005e68:	6139      	str	r1, [r7, #16]
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	414b      	adcs	r3, r1
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	f04f 0200 	mov.w	r2, #0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e7c:	4659      	mov	r1, fp
 8005e7e:	00cb      	lsls	r3, r1, #3
 8005e80:	4651      	mov	r1, sl
 8005e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e86:	4651      	mov	r1, sl
 8005e88:	00ca      	lsls	r2, r1, #3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	4642      	mov	r2, r8
 8005e92:	189b      	adds	r3, r3, r2
 8005e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e98:	464b      	mov	r3, r9
 8005e9a:	460a      	mov	r2, r1
 8005e9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	008b      	lsls	r3, r1, #2
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	008a      	lsls	r2, r1, #2
 8005eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ece:	f7fa f995 	bl	80001fc <__aeabi_uldivmod>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4b38      	ldr	r3, [pc, #224]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005eda:	fba3 2301 	umull	r2, r3, r3, r1
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	2264      	movs	r2, #100	; 0x64
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	1acb      	subs	r3, r1, r3
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	3332      	adds	r3, #50	; 0x32
 8005eec:	4a33      	ldr	r2, [pc, #204]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005eee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef8:	441c      	add	r4, r3
 8005efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005efe:	2200      	movs	r2, #0
 8005f00:	673b      	str	r3, [r7, #112]	; 0x70
 8005f02:	677a      	str	r2, [r7, #116]	; 0x74
 8005f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f08:	4642      	mov	r2, r8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	1891      	adds	r1, r2, r2
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	415b      	adcs	r3, r3
 8005f12:	60fb      	str	r3, [r7, #12]
 8005f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f18:	4641      	mov	r1, r8
 8005f1a:	1851      	adds	r1, r2, r1
 8005f1c:	6039      	str	r1, [r7, #0]
 8005f1e:	4649      	mov	r1, r9
 8005f20:	414b      	adcs	r3, r1
 8005f22:	607b      	str	r3, [r7, #4]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f30:	4659      	mov	r1, fp
 8005f32:	00cb      	lsls	r3, r1, #3
 8005f34:	4651      	mov	r1, sl
 8005f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	00ca      	lsls	r2, r1, #3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	4642      	mov	r2, r8
 8005f46:	189b      	adds	r3, r3, r2
 8005f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	460a      	mov	r2, r1
 8005f4e:	eb42 0303 	adc.w	r3, r2, r3
 8005f52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f5e:	667a      	str	r2, [r7, #100]	; 0x64
 8005f60:	f04f 0200 	mov.w	r2, #0
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	008b      	lsls	r3, r1, #2
 8005f70:	4641      	mov	r1, r8
 8005f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f76:	4641      	mov	r1, r8
 8005f78:	008a      	lsls	r2, r1, #2
 8005f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f7e:	f7fa f93d 	bl	80001fc <__aeabi_uldivmod>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005f88:	fba3 1302 	umull	r1, r3, r3, r2
 8005f8c:	095b      	lsrs	r3, r3, #5
 8005f8e:	2164      	movs	r1, #100	; 0x64
 8005f90:	fb01 f303 	mul.w	r3, r1, r3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	3332      	adds	r3, #50	; 0x32
 8005f9a:	4a08      	ldr	r2, [pc, #32]	; (8005fbc <UART_SetConfig+0x4e4>)
 8005f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	f003 020f 	and.w	r2, r3, #15
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4422      	add	r2, r4
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fbc:	51eb851f 	.word	0x51eb851f

08005fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	f107 001c 	add.w	r0, r7, #28
 8005fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fd2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d123      	bne.n	8006022 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006002:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006006:	2b01      	cmp	r3, #1
 8006008:	d105      	bne.n	8006016 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 faa0 	bl	800655c <USB_CoreReset>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]
 8006020:	e01b      	b.n	800605a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fa94 	bl	800655c <USB_CoreReset>
 8006034:	4603      	mov	r3, r0
 8006036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006038:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	639a      	str	r2, [r3, #56]	; 0x38
 800604c:	e005      	b.n	800605a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800605a:	7fbb      	ldrb	r3, [r7, #30]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d10b      	bne.n	8006078 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f043 0206 	orr.w	r2, r3, #6
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006084:	b004      	add	sp, #16
 8006086:	4770      	bx	lr

08006088 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f023 0201 	bic.w	r2, r3, #1
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060c6:	78fb      	ldrb	r3, [r7, #3]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d115      	bne.n	80060f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060d8:	200a      	movs	r0, #10
 80060da:	f7fb fb11 	bl	8001700 <HAL_Delay>
      ms += 10U;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	330a      	adds	r3, #10
 80060e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa2b 	bl	8006540 <USB_GetMode>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d01e      	beq.n	800612e <USB_SetCurrentMode+0x84>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2bc7      	cmp	r3, #199	; 0xc7
 80060f4:	d9f0      	bls.n	80060d8 <USB_SetCurrentMode+0x2e>
 80060f6:	e01a      	b.n	800612e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d115      	bne.n	800612a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800610a:	200a      	movs	r0, #10
 800610c:	f7fb faf8 	bl	8001700 <HAL_Delay>
      ms += 10U;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	330a      	adds	r3, #10
 8006114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fa12 	bl	8006540 <USB_GetMode>
 800611c:	4603      	mov	r3, r0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <USB_SetCurrentMode+0x84>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2bc7      	cmp	r3, #199	; 0xc7
 8006126:	d9f0      	bls.n	800610a <USB_SetCurrentMode+0x60>
 8006128:	e001      	b.n	800612e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e005      	b.n	800613a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2bc8      	cmp	r3, #200	; 0xc8
 8006132:	d101      	bne.n	8006138 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006144:	b084      	sub	sp, #16
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006156:	2300      	movs	r3, #0
 8006158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800615e:	2300      	movs	r3, #0
 8006160:	613b      	str	r3, [r7, #16]
 8006162:	e009      	b.n	8006178 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3340      	adds	r3, #64	; 0x40
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	2200      	movs	r2, #0
 8006170:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	3301      	adds	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	2b0e      	cmp	r3, #14
 800617c:	d9f2      	bls.n	8006164 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800617e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006182:	2b00      	cmp	r3, #0
 8006184:	d11c      	bne.n	80061c0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006194:	f043 0302 	orr.w	r3, r3, #2
 8006198:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
 80061be:	e00b      	b.n	80061d8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061de:	461a      	mov	r2, r3
 80061e0:	2300      	movs	r3, #0
 80061e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80061e4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d10d      	bne.n	8006208 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80061ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80061f4:	2100      	movs	r1, #0
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f968 	bl	80064cc <USB_SetDevSpeed>
 80061fc:	e008      	b.n	8006210 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80061fe:	2101      	movs	r1, #1
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f963 	bl	80064cc <USB_SetDevSpeed>
 8006206:	e003      	b.n	8006210 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006208:	2103      	movs	r1, #3
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f95e 	bl	80064cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006210:	2110      	movs	r1, #16
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f8fa 	bl	800640c <USB_FlushTxFifo>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f924 	bl	8006470 <USB_FlushRxFifo>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	461a      	mov	r2, r3
 800623a:	2300      	movs	r3, #0
 800623c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006244:	461a      	mov	r2, r3
 8006246:	2300      	movs	r3, #0
 8006248:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006250:	461a      	mov	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e043      	b.n	80062e4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4413      	add	r3, r2
 8006264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800626e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006272:	d118      	bne.n	80062a6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006286:	461a      	mov	r2, r3
 8006288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e013      	b.n	80062b8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	461a      	mov	r2, r3
 800629e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	e008      	b.n	80062b8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b2:	461a      	mov	r2, r3
 80062b4:	2300      	movs	r3, #0
 80062b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	461a      	mov	r2, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d6:	461a      	mov	r2, r3
 80062d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3301      	adds	r3, #1
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062e8:	461a      	mov	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d3b5      	bcc.n	800625c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062f0:	2300      	movs	r3, #0
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	e043      	b.n	800637e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800630c:	d118      	bne.n	8006340 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10a      	bne.n	800632a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	461a      	mov	r2, r3
 8006322:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	e013      	b.n	8006352 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	461a      	mov	r2, r3
 8006338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	e008      	b.n	8006352 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634c:	461a      	mov	r2, r3
 800634e:	2300      	movs	r3, #0
 8006350:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800635e:	461a      	mov	r2, r3
 8006360:	2300      	movs	r3, #0
 8006362:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006370:	461a      	mov	r2, r3
 8006372:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	3301      	adds	r3, #1
 800637c:	613b      	str	r3, [r7, #16]
 800637e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006382:	461a      	mov	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4293      	cmp	r3, r2
 8006388:	d3b5      	bcc.n	80062f6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800639c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	f043 0210 	orr.w	r2, r3, #16
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <USB_DevInit+0x2c4>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d005      	beq.n	80063e0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	f043 0208 	orr.w	r2, r3, #8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d107      	bne.n	80063f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f0:	f043 0304 	orr.w	r3, r3, #4
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006404:	b004      	add	sp, #16
 8006406:	4770      	bx	lr
 8006408:	803c3800 	.word	0x803c3800

0800640c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006426:	d901      	bls.n	800642c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e01b      	b.n	8006464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	daf2      	bge.n	800641a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	019b      	lsls	r3, r3, #6
 800643c:	f043 0220 	orr.w	r2, r3, #32
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006450:	d901      	bls.n	8006456 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e006      	b.n	8006464 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b20      	cmp	r3, #32
 8006460:	d0f0      	beq.n	8006444 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006488:	d901      	bls.n	800648e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e018      	b.n	80064c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	daf2      	bge.n	800647c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2210      	movs	r2, #16
 800649e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064ac:	d901      	bls.n	80064b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e006      	b.n	80064c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b10      	cmp	r3, #16
 80064bc:	d0f0      	beq.n	80064a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	68f9      	ldr	r1, [r7, #12]
 80064e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ec:	4313      	orrs	r3, r2
 80064ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006518:	f023 0303 	bic.w	r3, r3, #3
 800651c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800652c:	f043 0302 	orr.w	r3, r3, #2
 8006530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	f003 0301 	and.w	r3, r3, #1
}
 8006550:	4618      	mov	r0, r3
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006574:	d901      	bls.n	800657a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e01b      	b.n	80065b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	daf2      	bge.n	8006568 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f043 0201 	orr.w	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3301      	adds	r3, #1
 8006596:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800659e:	d901      	bls.n	80065a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e006      	b.n	80065b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d0f0      	beq.n	8006592 <USB_CoreReset+0x36>

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <memset>:
 80065be:	4402      	add	r2, r0
 80065c0:	4603      	mov	r3, r0
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d100      	bne.n	80065c8 <memset+0xa>
 80065c6:	4770      	bx	lr
 80065c8:	f803 1b01 	strb.w	r1, [r3], #1
 80065cc:	e7f9      	b.n	80065c2 <memset+0x4>
	...

080065d0 <__libc_init_array>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	4d0d      	ldr	r5, [pc, #52]	; (8006608 <__libc_init_array+0x38>)
 80065d4:	4c0d      	ldr	r4, [pc, #52]	; (800660c <__libc_init_array+0x3c>)
 80065d6:	1b64      	subs	r4, r4, r5
 80065d8:	10a4      	asrs	r4, r4, #2
 80065da:	2600      	movs	r6, #0
 80065dc:	42a6      	cmp	r6, r4
 80065de:	d109      	bne.n	80065f4 <__libc_init_array+0x24>
 80065e0:	4d0b      	ldr	r5, [pc, #44]	; (8006610 <__libc_init_array+0x40>)
 80065e2:	4c0c      	ldr	r4, [pc, #48]	; (8006614 <__libc_init_array+0x44>)
 80065e4:	f000 f826 	bl	8006634 <_init>
 80065e8:	1b64      	subs	r4, r4, r5
 80065ea:	10a4      	asrs	r4, r4, #2
 80065ec:	2600      	movs	r6, #0
 80065ee:	42a6      	cmp	r6, r4
 80065f0:	d105      	bne.n	80065fe <__libc_init_array+0x2e>
 80065f2:	bd70      	pop	{r4, r5, r6, pc}
 80065f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f8:	4798      	blx	r3
 80065fa:	3601      	adds	r6, #1
 80065fc:	e7ee      	b.n	80065dc <__libc_init_array+0xc>
 80065fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006602:	4798      	blx	r3
 8006604:	3601      	adds	r6, #1
 8006606:	e7f2      	b.n	80065ee <__libc_init_array+0x1e>
 8006608:	0800669c 	.word	0x0800669c
 800660c:	0800669c 	.word	0x0800669c
 8006610:	0800669c 	.word	0x0800669c
 8006614:	080066a0 	.word	0x080066a0

08006618 <memcpy>:
 8006618:	440a      	add	r2, r1
 800661a:	4291      	cmp	r1, r2
 800661c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006620:	d100      	bne.n	8006624 <memcpy+0xc>
 8006622:	4770      	bx	lr
 8006624:	b510      	push	{r4, lr}
 8006626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800662a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800662e:	4291      	cmp	r1, r2
 8006630:	d1f9      	bne.n	8006626 <memcpy+0xe>
 8006632:	bd10      	pop	{r4, pc}

08006634 <_init>:
 8006634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006636:	bf00      	nop
 8006638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663a:	bc08      	pop	{r3}
 800663c:	469e      	mov	lr, r3
 800663e:	4770      	bx	lr

08006640 <_fini>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	bf00      	nop
 8006644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006646:	bc08      	pop	{r3}
 8006648:	469e      	mov	lr, r3
 800664a:	4770      	bx	lr
